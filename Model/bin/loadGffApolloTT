#!/usr/bin/perl
#use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use CBIL::Util::PropertySet;
use Getopt::Long;
use DBI;
use DBD::Oracle;
use Data::Dumper;
use Getopt::Long qw(GetOptions);
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Response;
use EbrcModelCommon::Model::tmUtils;
use CBIL::Util::Utils;
use JSON;
use Date::Manip;
use XML::Simple;
use URI::Escape;

my $dateCmd = "date";
my $dateStr1 = &runCmd($dateCmd);
chomp $dateStr1;
my $annotationInsert;
my $commentInsert;
my $NASequenceID;
my $json;
my %apolloID;

my ($propFile, $instance, $schema, $suffix, $prefix, $filterValue, $debug,  $username, $passwd );
GetOptions("propfile=s" => \$propFile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "prefix=s" => \$prefix,
           "filterValue=s" => \$filterValue,
           "debug!" => \$debug,
	  );
die "required parameter missing" unless ($propFile && $instance && $schema);
#Extract username and password from propfile
my $xmlParser = new XML::Simple();
my $props = $xmlParser->XMLin($propFile);
my $passwd = $props->{apolloPassword};
my $username = $props->{apolloUserId};
die "required parameters userID and password missing from propfile" unless ($passwd && $username);

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propFile);

#Create Apollo ID table
createApolloIdTable($dbh, $prefix, $suffix);
#Create Apollo GFF table
createTables($dbh, $prefix, $suffix);

#Extract all organisms in Apollo
my $organismsCmd = "curl -X POST -F 'username=".$username."' -F 'password=".$passwd."' -L https://apollo-api\.veupathdb\.org/organism/findAllOrganisms --silent --show-error";
my $organismJSONResponse = &runCmd($organismsCmd);
my $organismJSON = decode_json($organismJSONResponse);
my %daysSinceRelease;
my @filteredOrganisms;
my @gffData;

# Make a hash of the VEuPath organisms of the database instance we're updating
my %veupathOrganisms;
my $organismQ = $dbh->prepare(<<SQL) or die "parsing organism query";
  select distinct organism
  from GenomicSeqAttributes
SQL
$organismQ->execute() or die "running organism query";
while (my ($org) = $organismQ->fetchrow_array()) {
  $veupathOrganisms{$org} = 1;
}
$organismQ->finish();

# prepare na_sequence_id query
my $sequenceIdQ = $dbh->prepare(<<SQL) or die "parsing organism query";
  select na_sequence_id
  from dots.NaSequence where source_id = ?
SQL

#Get number of days since release and filter organisms
foreach my $item( @$organismJSON){
    my $organism = $item->{commonName};
    my ($veupathId) = $organism =~ /(.*)\s+\[/;

    next unless $veupathOrganisms{$veupathId};

    # Get organism ID
    my $organismIdCmd = "curl -X POST -H \"Content-Type: application/json\" --data '{'username':'".$username."','password':'".$passwd."','organism':\"".$organism."\"}' https://apollo-api\.veupathdb\.org/organism/findAllOrganisms --silent --show-error";
    my $organismIdJSONResponse = &runCmd($organismIdCmd);
    my $organismIdJSON = decode_json($organismIdJSONResponse);
    my $organismId;
    foreach my $line( @$organismIdJSON ) {
      $organismId = $line->{id};
      $apolloID{$organism} = $organismId;
      #Write to the organism table called apolloID
      insertApolloIdTable($dbh, $prefix, $suffix,  $veupathId, $organism, $organismId);
    }
    push (@filteredOrganisms, $organism);
  }
$dbh->commit() or die $dbh->errstr;

my $insertCount = 0;

foreach(@filteredOrganisms){

  my $organismName = $_;

  my $apolloID = $apolloID{$organismName};

  my ($org, $abbrev) = split (/\[/, $organismName, 2);
  #extract annotations
  my $getGFFCmd = "curl -X POST -H \"Content-Type: application/json\" --data '{'username':'".$username."','password':'".$passwd."','type':'GFF3','organism':\"".$organismName."\",'output':'text'}' https://apollo-api\.veupathdb\.org/IOService/write --silent --show-error";

  print STDERR "Fetching Apollo GFF from URL \"$getGFFCmd\"\n";

  open (GFF, "$getGFFCmd|") or die "Can't open $getGFFCmd\n";

  my @gffArray;
  while (<GFF>) {
    my $line = $_;

    if ($line !~ /^###$/){
      push @gffArray, $line;
    }
    else{
      my $match = "status=Finished";
      chomp @gffArray;
      if (grep(/$match/, @gffArray)) {
	foreach (@gffArray){
	  #Skip whitespace or comments
	  next if /^(\s*(#.*)?)?$/;
	  my ($seqID, $source, $type, $start, $end, $score, $strand, $phase, $attributes) = split ( /\t/, $_);
	  #Fix any single quotes in attributes string
	  $attributes =~ s/\'/\'\'/g;
	  #Decode uri encoding
	  $attributes = uri_unescape( $attributes );
	  my $creationDate;
	  my $parentAttr="";
	  my $idAttr="";
	  my $apolloProduct="";
	  my $apolloSymbol="";
	  my $apolloOwner="";
	  my $apolloGoTerm="";
	  my $apolloPmid="";
	  my $apolloTranscriptId="";
	  my $apolloEvidenceCode="";
	  my $apolloObsolete="";
	  my $evidenceCodeAssignment="";
	  #Parse creation date
	  if ($attributes =~ m/date_creation=([0-9-]+)/ ){
	    $creationDate = $1;
	  }
	  #Parse parent attr
	  if ($attributes =~ m/Parent=([0-9a-zA-Z-]+);/ ){
	    $parentAttr = $1;
	  }
	  #Parse id attr
	  if ($attributes =~ m/ID=([0-9a-zA-Z-]+);/ ){
	    $idAttr = $1;
	  }
	  #Parse apollo product
	  if ($attributes =~ m/gene_product=rank=1;term=(.+?);/  ||  $attributes =~ m/description=(.+?);/   ){
	    $apolloProduct = $1;
	  }
	  #Parse apollo symbol
	  if ($attributes =~ m/symbol=([0-9a-zA-Z-]+);/ ){
	    $apolloSymbol = $1;
	  }
	  #Parse apollo owner
	  if ($attributes =~ m/owner=([0-9a-zA-Z-\.,]+);/ ){
	    $apolloOwner = $1;
	  }
	  #Parse apollo GO term
	  my @goMatches;
	  push @goMatches, $1 while ($attributes=~ m{term=(GO:[0-9]+);}g);
	  my @uniqGoMatches = uniq(@goMatches);
	  $apolloGoTerm = join(", ", @uniqGoMatches);

	  #Parse apollo PMID
	  my @pmidMatches;
	  push @pmidMatches, $1 while ($attributes=~ m{db_xref=(PMID:[0-9]+);}g);
	  my @uniqPmidMatches = uniq(@pmidMatches);
	  $apolloPmid = join(", ", @uniqPmidMatches);

	  # (don't) Get Apollo numerical organism ID
	  # my $apolloID = getApolloID($dbh, $prefix, $suffix,$seqID);

	  #Get Apollo transcript ID
	  if ($attributes =~ m/Name=([0-9a-zA-Z-\._:]+);/ ){
	    $apolloTranscriptId = $1;
	  }
	  #Parse apollo Evidence code
	  if ($attributes =~ m/evidence=([0-9a-zA-Z-:]+);/ ){
	    $apolloEvidenceCode = $1;
	  }
	  #Parse apollo obsolete
	  if ($attributes =~ m/(obsolete)=true;/ ){
	    $apolloObsolete = $1;
	  }
	  #Parse apollo Evidence Code Assignment
	  if ($attributes =~ m/based_on=\[\"([0-9a-zA-Z-:]+)\"\];/ ){
	    $evidenceCodeAssignment = $1;
	  }

	  #Check if NA_Sequence_ID is available
	  $NASequenceID = getNASequenceID($dbh, $sequenceIdQ, $seqID);
	  if ($NASequenceID ne ""){
	    #Insert Gff into table
	    insertAttribute($dbh, $prefix, $suffix, $NASequenceID,  $seqID, $source, $type, $start, $end, $score, $strand, $phase, $attributes, $creationDate, $apolloID, $parentAttr, $idAttr, $apolloProduct, $apolloSymbol, $apolloOwner, $apolloGoTerm, $apolloPmid, $apolloTranscriptId, $apolloEvidenceCode, $apolloObsolete, $evidenceCodeAssignment);
	    unless ($insertCount++ % 1000) {
	      $dbh->commit() or die $dbh->errstr;
	    }
	  }
	  else{
	    #print "ERROR: $getGFFCmd\n";
	    next;
	  }
	}
      }
      undef @gffArray;
    }
  }
  $dbh->commit() or die $dbh->errstr;
  close GFF;

}
$sequenceIdQ->finish();
$dbh->disconnect;

sub insertAttribute {
    my ($dbh, $prefix, $suffix, $NASequenceID, $seqID, $source, $type, $start, $end, $score, $strand, $phase, $attributes, $creationDate, $apolloID, $parentAttr, $idAttr, $apolloProduct, $apolloSymbol, $apolloOwner, $apolloGoTerm, $apolloPmid, $apolloTranscriptId, $apolloEvidenceCode, $apolloObsolete, $evidenceCodeAssignment) = @_;
    $dbh->do(<<SQL) or die "inserting attribute";
    INSERT INTO ${prefix}ApolloUpdate$suffix (NA_SEQUENCE_ID, SeqID, Source, Type, MAPPING_START, MAPPING_END, Score, Strand, Phase, ATTR, creationdate, apolloid, parent_attr, id_attr, apolloProduct, apolloSymbol, apolloOwner, apolloGoTerm, apolloPmid, apolloTranscript, apolloEvidenceCode, apolloObsolete, apolloEvidenceCodeAssignment) VALUES ('$NASequenceID', '$seqID', '$source', '$type', '$start', '$end', '$score', '$strand', '$phase', '$attributes', '$creationDate', '$apolloID', '$parentAttr', '$idAttr', '$apolloProduct', '$apolloSymbol', '$apolloOwner', '$apolloGoTerm', '$apolloPmid', '$apolloTranscriptId', '$apolloEvidenceCode', '$apolloObsolete', '$evidenceCodeAssignment')
SQL
}

sub createTables {
    my ($dbh, $prefix, $suffix) = @_;

    $dbh->do(<<SQL) or die "creating ApolloUpdate table";
create table ${prefix}ApolloUpdate$suffix (
   NA_SEQUENCE_ID  numeric(10),
   SeqID           varchar(50),
   Source          varchar(200),
   Type            varchar(50),
   MAPPING_START   numeric(10),
   MAPPING_END     numeric(10),
   Score           varchar(50),
   Strand          varchar(1),
   Phase           varchar(1),
   ATTR            TEXT,
   creationdate    varchar(10),
   apolloid        numeric(10),
   parent_attr     varchar(50),
   id_attr         varchar(50),
   apolloProduct   varchar(3000),
   apolloSymbol    varchar(10),
   apolloOwner     varchar(1000),
   apolloGoTerm    varchar(3000),
   apolloPmid      varchar(3000),
   apolloTranscript varchar(200),
   apolloEvidenceCode varchar(200),
   apolloObsolete varchar(10),
   apolloEvidenceCodeAssignment varchar(200)
)
SQL
}

sub insertApolloIdTable {
    my ($dbh, $prefix, $suffix, $veupathId, $organism, $organismID) = @_;
    $dbh->do(<<SQL) or die "inserting attribute";
    INSERT INTO ${prefix}apolloid$suffix (organism, commonname, apolloid) VALUES ('$veupathId','$organism','$organismID')
SQL
}

sub createApolloIdTable {
    my ($dbh, $prefix, $suffix) = @_;

    $dbh->do(<<SQL) or die "creating ApolloID  table";
create table ${prefix}ApolloID$suffix (
    ORGANISM         VARCHAR(100),
    COMMONNAME       VARCHAR(100),
    APOLLOID         VARCHAR(50)
)
SQL
}

sub getNASequenceID {
    my ($dbh, $sequenceIdQ, $seqID) = @_;
    $sequenceIdQ->execute($seqID);
    my ($NASequenceID) = $sequenceIdQ->fetchrow_array();
    return $NASequenceID;
}

sub getApolloID {
    my ($dbh, $prefix, $suffix, $seqID) = @_;
    my $sql = "select distinct aid.apolloid from apidbtuning.genomicseqattributes gsa, ${prefix}apolloid$suffix aid where gsa.organism = aid.organism and gsa.source_id like ?";
    my $sh = $dbh->prepare($sql);
    $sh->execute($seqID);
    my ($apolloID) = $sh->fetchrow_array();
    return $apolloID;
}

sub uniq {
  my %seen;
  return grep { !$seen{$_}++ } @_;
}
