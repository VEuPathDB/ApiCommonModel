#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use XML::Simple;

use File::Basename;

use DBI;

use Getopt::Long qw(GetOptions);

use Data::Dumper;

use Spreadsheet::ParseExcel;

use EbrcModelCommon::Model::tmUtils;

my ($help, $propfile, $instance, $schema, $suffix, $prefix, $filterValue, $debug);

GetOptions("propfile=s" => \$propfile,
  "instance=s" => \$instance,
  "schema=s" => \$schema,
  "suffix=s" => \$suffix,
  "prefix=s" => \$prefix,
  "filterValue=s" => \$filterValue,
  "debug!" => \$debug,
  "help|h" => \$help,
);

die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);
my $tabFileLocation = "$ENV{PROJECT_HOME}/EbrcModelCommon/Model/data/SampleDisplayInfo.xls";

&run();

sub run{

  unless (-e $tabFileLocation)  {
    die "Tab file :$tabFileLocation does not exist";
  }

  if($help) {
    &usage();
  }

  my $failures = 0;

  # parse Tab file

  my $insertStatement = "INSERT INTO SampleDisplayInfo$suffix(dataset_name, sample, sample_display_name, sort_order, html_color) VALUES (?,?,?, NULLIF(?,'')::Numeric,?)";
  my $insertRow = $dbh->prepare($insertStatement);
  createEmptyTable($dbh,$suffix);
  if ($tabFileLocation =~ /\.xls$/ || $tabFileLocation =~ /\.xlsx$/) {
    eval {
      require Spreadsheet::ParseExcel;
    };
    if($@) {
      die "Spreadsheet::ParseExcel is a required package when loading from a .xls file";
    }
    else {
      my $oExcel = new Spreadsheet::ParseExcel;
      my $oBook = $oExcel->Parse($tabFileLocation);

      for(my $iSheet=0; $iSheet < $oBook->{SheetCount} ; $iSheet++) {
        my $oSheet = $oBook->{Worksheet}[$iSheet];
        my $minRow = $oSheet->{MinRow};
        my $maxRow = $oSheet->{MaxRow};
        my $minCol = $oSheet->{MinCol};
        my $maxCol = $oSheet->{MaxCol};
        if($maxRow) {
          for(my $i = $minRow; $i <= $maxRow; $i++) {
            my @row;
            for(my $j = $minCol; $j <= $maxCol; $j++) {
              my $oCell = $oSheet->{Cells}[$i][$j];
              my $cellValue = $oCell ? $oCell->Value : undef;
              $cellValue =~ s/["\']//g;
              push(@row, $cellValue);
            }

            my ($ext_db_name, $sample, $sample_display, $sort_order, $color ) = @row ;

            # skip comments / header
            next if($ext_db_name =~ /^#/);

            if ($ext_db_name) {
              $insertRow->execute($ext_db_name, $sample, $sample_display, $sort_order,$color);
            }
          }
        }
      }
    }
  }

  $dbh->commit();
  $dbh->disconnect();
}

sub createEmptyTable {
  my ($dbh, $suffix) = @_;

  $dbh->do(<<SQL) or die "creating table";
     create table SampleDisplayInfo$suffix (
       dataset_name          varchar(255),
	     sample                varchar(255),
	     sample_display_name   varchar(255),
       sort_order            numeric,
       html_color            varchar(64)
     )
SQL
  $dbh->{PrintError} = 0;

  $dbh->do(<<SQL) or die "creating index";
     create index sdi_dsn_ix$suffix 
       on SampleDisplayInfo$suffix (dataset_name)
SQL
  $dbh->{PrintError} = 0;

}

sub usage {
  my $e = shift;
  if($e) {
    print STDERR $e . "\n";
  }
  print STDERR "usage:  buildSampleDisplayInfo.pl -instance <instance> -propfile <file> -suffix <NNNN> [ -schema <login> ] [ -debug ] [ -help ] \n";
  exit;
}

1;
