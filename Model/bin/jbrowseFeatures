#!/usr/bin/perl

use strict;

use lib $ENV{GUS_HOME} . "/lib/perl";

use JSON;
use DBI;
use DBD::Oracle;

use WDK::Model::ModelConfig;

use XML::Simple;

use Data::Dumper;



my ($gusHome, $projectId, $refseqName, $start, $end, $feature, @queryParams) = @ARGV;

my %qp;
foreach my $p (@queryParams) {
  next if($p =~ /select/i);
  my ($key, $value) = split(/=/, $p);
  $qp{$key} = $value;
}

my $basesPerBin = $qp{basesPerBin} + 0;

my $modelConfig = new WDK::Model::ModelConfig($projectId);


my $gbrowseXmlFile;
if($qp{seqType} eq 'protein') {
  $gbrowseXmlFile = $ENV{GUS_HOME} . "/lib/xml/gbrowse/pbrowseQueries.xml";
}
else {
  $gbrowseXmlFile = $ENV{GUS_HOME} . "/lib/xml/gbrowse/gbrowseQueries.xml";
}

my $xml = XMLin($gbrowseXmlFile);

my $dbh = DBI->connect( $modelConfig->getAppDbDbiDsn(),
                        $modelConfig->getAppDbLogin(),
                        $modelConfig->getAppDbPassword()
    )
    || die "unable to open db handle to ", $modelConfig->getAppDbDbiDsn();

$dbh->{LongTruncOk} = 0;
$dbh->{LongReadLen} = 10000000;

my $seqId;
if($qp{seqType} eq 'protein') {
  ($seqId) = $dbh->selectrow_array("select aa_sequence_id from webready.ProteinAttributes_p where source_id = '$refseqName'");
}
else {
  ($seqId) = $dbh->selectrow_array("select na_sequence_id from webready.GenomicSeqAttributes_p where source_id = '$refseqName'");
}

die "no seqId found for refseq $refseqName" unless($seqId);

my $result = {"features" => [] };

my $featureSql;


if($qp{seqType} eq 'protein') {
  if($feature eq "ReferenceSequenceAa") {
    my $length = $end - $start; #interbase coordinates

    $start = 0 if($start < 0);
    $featureSql = "select substr(sequence, $start, $length) as seq, $start as startm, $end as end, '$refseqName' as feature_id from webready.ProteinSequence_p where source_id = '$refseqName'";
  }
  else {
    $featureSql = &makeSql($xml->{module}->{'Segment.pm'}->{sqlQuery}->{$feature}->{sql}, $start, $end, $seqId, \@queryParams);
  }
}
else {
  if($feature eq "ReferenceSequence") {
    my $length = $end - $start; #interbase coordinates

    $start = 0 if($start < 0);

    $featureSql = "select substr(sequence, $start, $length) as seq, $start as startm, $end as end, '$refseqName' as feature_id from webready.GenomicSequenceSequence_p where source_id = '$refseqName'"
  }
  else {
    $featureSql = &makeSql($xml->{module}->{'Segment.pm'}->{sqlQuery}->{$feature}->{sql}, $start, $end, $seqId, \@queryParams);
  }
}

my $sh = $dbh->prepare($featureSql);
$sh->execute();

my %lookup;

my ($minStart, $maxEnd);

while(my $hash = $sh->fetchrow_hashref("NAME_lc")) {

  $hash->{start} = $hash->{startm} - 1;
  $hash->{end} = $hash->{end} + 0;

  $minStart = $hash->{start} if(!defined($minStart) || $hash->{start} < $minStart);
  $maxEnd = $hash->{end} if(!defined($maxEnd) || $hash->{end} > $maxEnd);

  if($hash->{atts}) {
    my @atts = split(';', $hash->{atts});
    foreach(@atts) {
      my ($key, $value) = split("=", $_);
      $hash->{lc($key)} = $value;
    }
  }

  my $uniqueId = $hash->{feature_id};
  $hash->{uniqueID} = $uniqueId;

  $lookup{$uniqueId} = $hash;

  $hash->{subfeatures} = [];

  push @{$result->{features}}, $hash;
}

my $bulkSubfeature = "$feature:bulksubfeatures";
my $bulkSubfeatureSql =  $xml->{module}->{'Feature.pm'}->{sqlQuery}->{$bulkSubfeature}->{sql};
if(scalar @{$result->{features}} > 0 && $bulkSubfeatureSql) {
  $bulkSubfeatureSql = &makeSql($bulkSubfeatureSql, $minStart, $maxEnd, $seqId, \@queryParams);
  my $bsh = $dbh->prepare($bulkSubfeatureSql);
  $bsh->execute();

  # subfeatures can have subfeatures.  sql must be ordered!!
  while(my $hash = $bsh->fetchrow_hashref("NAME_lc")) {
    my $parent = $lookup{$hash->{parent_id}};
    $hash->{start} = $hash->{startm} - 1;

    if($hash->{atts}) {
      my @atts = split(';', $hash->{atts});
      foreach(@atts) {
        my ($key, $value) = split("=", $_);
        $hash->{lc($key)} = $value;
      }
    }

    if($hash->{tstarts}) {
      my @tstarts = map { s/\s+//g; $_ - 1 } split /,/, $hash->{tstarts};
      my @blocksizes = map { s/\s+//g; $_ } split /,/, $hash->{blocksizes};
      my $counter = 0;
      foreach my $start (@tstarts) {
        my $end = $start + $blocksizes[$counter];

        my %tmp = %$hash;
        $tmp{feature_id} = $tmp{feature_id} . "_$counter";
        $tmp{name} = $tmp{name} . "_$counter";
        $tmp{start} = $start;
        $tmp{end} = $end;
        push @{$parent->{subfeatures}}, \%tmp;
        $counter = $counter + 1;
      }
    }
    else {
      push @{$parent->{subfeatures}}, $hash;
    }

    if($hash->{has_children}) {
      my $uniqueId = $hash->{feature_id};
      $hash->{uniqueID} = $uniqueId;
      $lookup{$uniqueId} = $hash;
      $hash->{subfeatures} = [];
    }
  }
}

if($basesPerBin) {
  my $binCount = ($end - $start) / $basesPerBin;

  my %bins;

  foreach my $feature (@{$result->{features}}) {
    my $startBin = int(($feature->{start} - $start) / $basesPerBin);
    my $endBin = int(($feature->{end} - $start) / $basesPerBin);

    $bins{$startBin}++;
    if($startBin != $endBin) {
      $bins{$endBin}++;
    }
  }

  my $maxBin = 0;
  my @sortedBinValues;
  for(my $i = 0; $i < $binCount; $i++) {
    my $value = $bins{$i} ? $bins{$i} : 0;

    $maxBin = $value if($value > $maxBin);
    push @sortedBinValues, $value;
  }

  $result = {
    "bins" =>  \@sortedBinValues,
    "stats" => {
      "basesPerBin" => $basesPerBin,
      "max"=> $maxBin
    }
  };
}


$dbh->disconnect();

print encode_json($result);

sub makeSql {
  my ($sql, $start, $end, $seqId, $queryParams) = @_;

  my $dlm = '|';

  $sql =~ s/\$base_start/$start/g;
  $sql =~ s/\$rend/$end/g;
  $sql =~ s/\$dlm/;/g;
  $sql =~ s/\$srcfeature_id/$seqId/g;

  foreach my $p (@$queryParams) {
    next if($p =~ /select/i);
    my ($key, $value) = split(/=/, $p);
    $sql =~ s/\$\$${key}\$\$/${value}/g;
  }


  return $sql
}
