#!/usr/bin/perl

use strict;
use DBI;
use DBD::Oracle;
use LWP::Simple;
use Data::Dumper;
use JSON qw( decode_json );
use WDK::Model::ModelConfig;

usage() unless scalar(@ARGV) == 4;

my ($siteServiceUrl, $modelName, $startDate, $endDate) = @ARGV;

# from wdk record class endpoint:
#   get map of searches to record class display name (which is the category for non-Gene record classes)

# from ontology endpoint
#   recurse down tree, passing down the path of label names
#   for searches with record class full name == transcript record class
#     consider second element of path to be category
#     overwrite the map of search to category (record class display name) with this new category

# from userdb, get map of search names in steps to count
#   collapse this into the categories, using the categories map

my %searchToCategoryMap;

# for each record class, map each search to the record class display name
print STDERR "Reading from wdk /record-types endpoint\n";
my $recordsString = get("https://$siteServiceUrl/record-types?format=expanded");
my $recordClassesJson = decode_json($recordsString);
getSearchToRecordClassDisplayNameMap($recordClassesJson, \%searchToCategoryMap);

# read the ontology.  map each Transcript search to its ontology category (overriding the record class display name)
# use the ontologyToNiaidCategory map to find the final NIAID approved category
print STDERR "Reading from wdk /ontology/Categories endpoint\n";
my $categoriesString = get("https://$siteServiceUrl/ontologies/Categories");
my $categoriesJson = decode_json($categoriesString);
my @emptyArray;
addSearchesFromOntologyToMap($categoriesJson->{tree}, \@emptyArray, \%searchToCategoryMap, \%ontologyToNiaidCategory);

print STDERR "Reading from Steps table in UserDB\n";
my $distribution = getDistribution($modelName, $startDate, $endDate, \%searchToCategoryMap);

foreach my $category (sort keys $distribution) {
  print STDOUT "$category\t$distribution->{$category}\n";
}
print STDERR "Done\n";

##################################################################################################################

sub getSearchToRecordClassDisplayNameMap {
  my ($recordClassesJson, $searchToCategoryMap) = @_;
  foreach my $recordClass (@$recordClassesJson) {
    my $plural = $recordClass->{displayNamePlural};
    next if $plural eq 'Genes';
    foreach my $search (@{$recordClass->{searches}}) {
      $searchToCategoryMap->{$search->{fullName}} = $plural;
    }
  }
}

# for Gene searches, gather categories from the ontology
# each ontology node has children[] and properties[]
# properties might have these keys:
#   labels: an array of category labels.  we only care about the 0th element.
#   targetType: might be "search".  in this case, the 0th element of labels is the search full name
# because it is a tree, the category have subcategories.  but we only care about the second-to-top level, which
# corresponds to what is shown in the menus for Genes.
# we must use niaid approved cateogries.  use the supplied map.
sub addSearchesFromOntologyToMap {
  my ($ontologyNode, $labelsPath, $searchToCategoryMap, $ontologyToNiaidCategory) = @_;
  my $children = $ontologyNode->{children};
  my $props = $ontologyNode->{properties};

#  print Dumper $labelsPath;
  # handle category node
  if (scalar(@$children)) {
    my @newPath = @$labelsPath;
    if ($props) {
      my $label = $props->{'EuPathDB alternative term'}?
	$props->{'EuPathDB alternative term'}->[0] : $props->{'label'}->[0];
      @newPath = (@$labelsPath, $label);
    }
    foreach my $child (@{$children}) {
      addSearchesFromOntologyToMap($child, \@newPath, $searchToCategoryMap);
    }
  }

  # handle search node
  elsif ($props && $props->{targetType} && $props->{targetType}->[0] eq 'search' &&
	$props->{recordClassName}->[0] eq 'TranscriptRecordClasses.TranscriptRecordClass') {
    my $searchName = $props->{name}->[0];
    my $ontologyTerm = $labelsPath->[1];
    my $category = $ontologyToNiaidCategory->{$ontologyTerm};
    die "ontology term '$ontologyTerm' is not found in the map to approved NIAID categories\n";
    $searchToCategoryMap->{$searchName} = $category;
  }
}

sub getDistribution {
  my ($model, $startDate, $endDate, $searchToCategoryMap) = @_;

  my $modelConfig = WDK::Model::ModelConfig->new($model);

  my $dbh = DBI->connect($modelConfig->getUserDbDbiDsn(),
                        $modelConfig->getUserDbLogin(),
                        $modelConfig->getUserDbPassword()
                      );

  my $sql = "select question_name, count(question_name) as cnt from userdata.steps
where last_run_time >= TO_DATE('$startDate', 'DD-MM-YYYY')
and last_run_time <= TO_DATE('$endDate', 'DD-MM-YYYY')
group by question_name
order by cnt desc";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $distribution;
  while(my ($searchName, $count) = $sh->fetchrow_array()) {
    if ($searchToCategoryMap->{$searchName}) {
      my $category = $searchToCategoryMap->{$searchName};
      $distribution->{$category} += $count;
    }
  }
  return $distribution;
}

sub usage {
  die "
Generate usage statistics for searches in the specified genomics site, for the specified time period.

Uses the /record-types endpoint of the provided site_service_url to get a mapping of search names to record classes.

For Genes, uses the /ontology endpoint to get gene search categories.

Connects to the site's user database, and queries the steps table to count searches used.  The results are mapped to categories.

Output (standard out) is tab delimited.  First column is category (as seen in site menu); second column is count.  Ordered alphabetically.

Usage: generateSearchesStats site_service_url model_name start_date end_date

Dates are in DD-MM-YYYY format.

Example: generateSearchesStats plasmodb.org/plasmo/service PlasmoDB 21-04-2020 21-05-2020 > my_favorite_output_file

";

}
