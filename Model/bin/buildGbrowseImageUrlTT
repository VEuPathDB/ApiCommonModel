#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use XML::Simple;

use DBI;
use DBD::Oracle;

use Getopt::Long qw(GetOptions);

use Data::Dumper;

use EbrcModelCommon::Model::tmUtils;

my ($help, $propfile, $instance, $schema, $suffix, $prefix, $filterValue, $debug);

Getopt::Long::Configure("pass_through");
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "prefix=s" => \$prefix,
           "filterValue=s" => \$filterValue,
           "debug!" => \$debug,
           "help|h" => \$help,
          );

die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

# my $XMLBASE= "gbrowseImageUrls.xml";
my $xmlFile = "$ENV{GUS_HOME}/lib/xml/gbrowseImageUrls.xml";

# system("svn export --non-interactive --trust-server-cert https://cbilsvn.pmacs.upenn.edu/svn/apidb/ApiCommonModel/${svnBranch}/Model/lib/xml/${XMLBASE} $xmlFile");

&run();

sub run{
  unless(-e $xmlFile) {
    &usage("ERROR:  $xmlFile not found");
  }

  &usage() if($help);

  my @warningsAbbrev;
#creating a hash from apidb.organism to check public abbreviations
  my $abbrevSql = "select distinct public_abbrev from apidb.organism";
  my $abbrevStmt = $dbh->prepare($abbrevSql);
  $abbrevStmt->execute();
  my %pubAbbrevHash;
  while (my $pubAbbrev = $abbrevStmt->fetchrow_arrayref()) {
      $pubAbbrevHash{$pubAbbrev->[0]} = 1;
  }
 # foreach my $ab (keys %pubAbbrevHash) {
#      print $ab."\n";
 # }

  my $xml = XMLin($xmlFile, KeyAttr => [], ForceArray => 1, SuppressEmpty => undef);

  my $subtrackSets = {};

  foreach my $subtrackSet (@{$xml->{subtrackSet}}) {
    my $project = $subtrackSet->{project};
    my $name = $subtrackSet->{name};
    my $tracks = $subtrackSet->{track};
    my $suffixes = $subtrackSet->{suffixes};

    my @suffixes = split(';', $suffixes);

    my @expanded;
    foreach my $t (@$tracks) {
      foreach my $s (@suffixes) { 
        push @expanded, $t . $s;
      }
    }
    $subtrackSets->{$project}->{$name} = \@expanded;
  }

  my $insertStatement = "INSERT INTO GbrowseTracksOrganism$suffix (organism, type, gtracks) VALUES (?,?,?)";
  my $insertRow = $dbh->prepare($insertStatement);
  &createEmptyTable($dbh,$suffix);

  ## the synteny tracks defined in gbrewseImageUrls.xml are only from reference strains.  When the users
  ## is viewing a non-reference genome, we want to show that track at the top followed by the reference for that
  ## species followed by the rest of the subtracks.
  my $orgSql = "SELECT distinct ga.organism,o.IS_REFERENCE_STRAIN
FROM apidb.organism o, geneattributes ga
WHERE ga.taxon_id = o.taxon_id";
  my $orgStmt = $dbh->prepare($orgSql);
  $orgStmt->execute();
  my $orgRef; ##value is reference 0|1
  while (my $ref = $orgStmt->fetchrow_arrayref()) {
    $orgRef->{$ref->[0]} = $ref->[1];
#    print STDERR "$ref->[0] = $ref->[1]\n";
  }
  my $orgToRef = &getOrgToRef($orgRef);  ##value is hash {reference}=reference_org and {abbrev}
 ###next get list of all organisms used for gbrowse tracks and add abbrev.
  foreach my $urlSpec (@{$xml->{url}}) {
      my $organisms = $urlSpec->{org};
      foreach my $orgHash (@$organisms) {
	  my $organism = $orgHash->{organism};
	  next unless $orgToRef->{$organism};
	  $orgToRef->{$organism}->{abbrev} = $orgHash->{abbrev};
          $orgToRef->{$organism}->{type} = $orgHash->{type};
#####JP note: want to check that these abbrevs exist in the db as public abbrev. use sql query to make hash
      }
  }
  foreach my $org (keys%$orgToRef) {
#    print STDERR "$org: reference=$orgToRef->{$org}->{reference}, abbrev=$orgToRef->{$org}->{abbrev}\n";
      my $ab_to_check = $orgToRef->{$org}->{abbrev};
      my $type = $orgToRef->{$org}->{type};
      next if ($type ne "synteny");
      if (exists $pubAbbrevHash{$ab_to_check} ) {
	  #print "$org has the abbreviation $ab_to_check which is a public abbreviation in apidb.organism\n";
      }
      else {
	  #print "ERROR $org has the abbreviation \"$ab_to_check\" which is a not public abbreviation in apidb.organism please change this\n";
	  push @warningsAbbrev, $org;
      }
  }

  foreach my $urlSpec (@{$xml->{url}}) {
      my $organisms = $urlSpec->{org};
    my $tracks = $urlSpec->{track};
    my $project = $urlSpec->{project};
    my $type = $urlSpec->{type};

#    next unless($project eq $thisProject);

    foreach my $orgHash (@$organisms) {
      my $organism = $orgHash->{organism};
      my $abbrev = $orgHash->{abbrev};
      next unless $orgToRef->{$organism};


      my @fTracks;
      foreach my $track (@$tracks) {
        my $name = $track->{name};

        my $abbrevFirst = $track->{abbrevFirst};
        my $subtracks = $track->{subtrack};

        if($subtracks) {
          my %syntenyNames;
          my @subtracks;
          foreach my $subtrack (@$subtracks) {
            my $setName = $subtrack->{set};
            my $subtrackName = $subtrack->{name};

            if($setName) {
              my $names = $subtrackSets->{$project}->{$setName};
              die "Could not map subtrack set $subtrackName to a subtrackSet" unless($names);

              push @subtracks, @$names;
              foreach my $n (@$names){
                if($n =~ /(_gene|_span)$/){
                  $syntenyNames{$1} = 1;
                }
              }
            }
            else {
              push @subtracks, $subtrackName;
              if($subtrackName =~ /(_gene|_span)$/){
                $syntenyNames{$1} = 1;
              }
            }
          }
          ##need to change the abbrev to the reference strain for this organism then unshift the subtracks for this org to beginning of array

          if($name eq 'Synteny') {
          my $sabbrev = $orgRef->{$organism} == 1 ? $abbrev : $orgToRef->{$orgToRef->{$organism}->{reference}}->{abbrev};

          my @sortedSubtracks = sort {$b =~ /$sabbrev/ <=> $a =~ /$sabbrev/} @subtracks;
          if($orgRef->{$organism} == 0){
            foreach my $key (keys%syntenyNames){
              unshift(@sortedSubtracks,$abbrev.$key); 
            }
          }

          # remove "." and "-" from organism abbrev in subtrack key
            @sortedSubtracks = map { s/[\.-]//g; $_; } @sortedSubtracks;

          push @fTracks, $name . "/" . join('+', @sortedSubtracks);
        }
	else {
          push @fTracks, $name . "/" . join('+', @subtracks);
       	 }
	} 
	else {
          push @fTracks, $name;
        }
      }
      my $gtracks = join('%1E', @fTracks);
      $insertRow->execute($organism, $type, $gtracks);

      print "$organism:$type: $gtracks\n";
    }
  }

  if (@warningsAbbrev) {
      print "Error: the following organisms do not have the public abbreviation from apidb.organism as their abbrev in gbrowseImageUrls.xml please change these in the xml and re do\n";
      print join("\n", @warningsAbbrev);
      die;
  }
  else {

      &createIndex($dbh,$suffix);

      $dbh->commit();
      $dbh->disconnect();
  }
}
sub getOrgToRef{
  my $orgRef = shift;
  my %gs;
  foreach my $org (keys%{$orgRef}){
    next unless $orgRef->{$org} == 1;
    if($org =~ /^(\w+\s+\w+)/){
#      print STDERR "getOrgToRef: $org ==> $1 = $orgRef->{$org}\n";
      $gs{$1} = $org;
    }
  }
  my $orgToRef = {};
  foreach my $org (keys%{$orgRef}){
    if($org =~ /^(\w+\s+\w+)/){
      $orgToRef->{$org}->{reference} = $gs{$1};
#      print STDERR "  $org ==> reference:$gs{$1}\n";
    }
  }
  return $orgToRef;
}

sub createEmptyTable {
  my ($dbh, $suffix) = @_;

  $dbh->do(<<SQL) or die "creating table";
    CREATE TABLE GbrowseTracksOrganism$suffix (
	    organism     varchar(80),
      type         varchar(20),
	    gtracks      varchar(2000)
  )
SQL
  $dbh->{PrintError} = 0;
}

sub createIndex {
     my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "creating index";
     create index gto_ix$suffix on GbrowseTracksOrganism$suffix (organism, type, gtracks)
SQL
$dbh->{PrintError} = 0;

}

sub usage {
  my $e = shift;
  if($e) {
    print STDERR $e . "\n";
  }
  print STDERR "usage:  buildGbrowseImageUrlTT.pl --databaseInstance <instance> --userName <userName> --password <password>";
  exit;
}

1;

