#!/usr/bin/perl
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use DBI;
use DBD::Oracle;
use Data::Dumper;
use Getopt::Long qw(GetOptions);
use JSON;
use CBIL::Util::Utils;
use Time::HiRes qw ( time );
use File::Path;
use File::Copy;

my $outputGffFileName = "apollo.gff";

# dumpApolloGff --dbUser xxx --dbPasswd yyy --dbInstance dbname='UniDB_shu_A;host=ares12.penn.apidb.org' --apolloUser api@local.host --apolloPasswd zzz --webServicesDir /home/sfischer/websvc -- bioContainerName biocontainers/tabix:v1.9-11-deb_cv1
my ($dbUser, $dbPasswd, $dbInstance, $apolloPasswd, $apolloUser, $webServicesDir, $bioContainerName, $debug);
GetOptions("dbUser=s" => \$dbUser,
	   "dbPasswd=s" => \$dbPasswd,
           "dbInstance=s" => \$dbInstance,
	   "apolloUser=s" => \$apolloUser,
	   "apolloPasswd=s" => \$apolloPasswd,
           "webServicesDir=s" => \$webServicesDir,
           "bioContainerName=s" => \$bioContainerName,
           "debug!" => \$debug,
	  );
print STDERR "$bioContainerName\n";
die "required parameter missing" unless ($dbUser && $dbPasswd && $dbInstance && $apolloPasswd && $apolloUser && $webServicesDir && $bioContainerName);

#Extract all organisms in Apollo
my $organismsCmd = "curl -X POST -F 'username=".$apolloUser."' -F 'password=".$apolloPasswd."' -L https://apollo-api\.veupathdb\.org/organism/findAllOrganisms --silent --show-error";
print STDERR "running cmd: $organismsCmd\n";
my $organismJSONResponse = &runCmd($organismsCmd);
my $organismJSON = decode_json($organismJSONResponse);

my $dbh = DBI->connect("dbi:Pg:$dbInstance",$dbUser,$dbPasswd) or die DBI->errstr;

# Make a hash of the VEuPath organisms of the database instance we're updating
my %veupathOrganisms;
my $organismQ = $dbh->prepare(<<SQL) or die "parsing organism query";
  select distinct organism, name_for_filenames
  from webready.GenomicSeqAttributes_p 
SQL
$organismQ->execute() or die "running organism query";
while (my ($org, $nmForFiles) = $organismQ->fetchrow_array()) {
  $veupathOrganisms{$org} = $nmForFiles;
}
$organismQ->finish();
$dbh->disconnect();

my @filteredOrganisms;

foreach my $item( @$organismJSON){
    my $organism = $item->{commonName};
    print STDERR "Getting meta info for $organism\n" if $debug;
    my ($veupathId) = $organism =~ /(.*)\s+\[/;
    push (@filteredOrganisms, $organism) if $veupathOrganisms{$veupathId};
}

my $workingDir = "/tmp/agff-" . time;  # milliseconds
mkdir($workingDir) || die "Failed mkdir $workingDir\n";
print STDERR "Working dir: $workingDir\n";
my $sifFile = "$workingDir/biocontainer.sif";
my  $cmd = "singularity pull $sifFile docker://$bioContainerName";
system($cmd) && die "Failed running command: $cmd\n";

my $webServicesBuildDir = getWebServicesBuildDir($webServicesDir);

foreach(@filteredOrganisms){

  print STDERR "Processing organism $_\n" if $debug;
  my $organismName = $_;

  my ($org) = $organismName =~ /(.*)\s+\[/;

  #extract annotations
  my $getGFFCmd = "curl -X POST -H \"Content-Type: application/json\" --data '{'username':'".$apolloUser."','password':'".$apolloPasswd."','type':'GFF3','organism':\"".$organismName."\",'output':'text'}' https://apollo-api\.veupathdb\.org/IOService/write --silent --show-error";

  print STDERR "Fetching Apollo GFF from URL \"$getGFFCmd\"\n";

  open (APOLLOGFF, "$getGFFCmd|") or die "Can't open $getGFFCmd\n";

  open(OUTPUTGFF, '>', "$workingDir/unsorted.gff");

  while (<APOLLOGFF>) {
    my $line = $_;

    print OUTPUTGFF $line;
  }
 
  close APOLLOGFF;
  close OUTPUTGFF;
  zipAndIndexGff($workingDir, $webServicesBuildDir, $veupathOrganisms{$org}, $sifFile, $outputGffFileName);
}

print STDERR "Cleaning up $workingDir\n" if $debug;
unlink($sifFile) || die "Can't delete $sifFile";
rmdir("$workingDir");

sub getWebServicesBuildDir {
  my ($webServicesDir) = @_;

  my $modelFile =  "$ENV{GUS_HOME}/lib/wdk/apiCommonModel.xml";
  open(FH, '<', $modelFile) or die "Can't open file $modelFile: $!" ;

  my $buildNum;
  #   <constant name="buildNumber" includeProjects="EuPathDB,AmoebaDB,CryptoDB,GiardiaDB,HostDB,FungiDB,MicrosporidiaDB,TrichDB">69</constant>
  while(<FH>) {
    if (/constant\s+name=\s*"buildNumber.*includeProjects.*PlasmoDB.*>(\d+)</) { $buildNum = $1; }
  }
  die "Can't extract build number from $modelFile" unless $buildNum;

  return "$webServicesDir/$buildNum";

}

sub zipAndIndexGff {
  my ($workingDir, $webServicesBuildDir, $org, $sifFile, $outputGffFileName) = @_;

  mkdir("$webServicesBuildDir/$org/") || die "Failed mkdir($webServicesBuildDir/$org)" unless -e "$webServicesBuildDir/$org";
  mkdir("$webServicesBuildDir/$org/genomeAndProteome") || die "Failed mkdir($webServicesBuildDir/$org/genomeAndProteome)" unless -e "$webServicesBuildDir/$org/genomeAndProteome";
  mkdir("$webServicesBuildDir/$org/genomeAndProteome/gff") || die "Failed mkdir($webServicesBuildDir/$org/genomeAndProteome/gff)" unless -e "$webServicesBuildDir/$org/genomeAndProteome/gff";

  my $gffDir = "$webServicesBuildDir/$org/genomeAndProteome/gff";

  # sort by sequence, location, type
  my $cmd = "sort -k1,1 -k4,4n -k3,3r $workingDir/unsorted.gff > $workingDir/$outputGffFileName";
  system($cmd) && die "Failed running command: $cmd\n";

  unlink("$workingDir/unsorted.gff");

  $cmd = "singularity exec --bind $workingDir:/mnt $sifFile bgzip /mnt/$outputGffFileName";
  print STDERR "Running cmd: $cmd\n";
  system($cmd) && die "Failed running command: $cmd\n";

  $cmd = "singularity exec --bind $workingDir:/mnt $sifFile tabix -p gff /mnt/$outputGffFileName.gz";
  system($cmd) && die "Failed running command: $cmd\n";

  move("$workingDir/$outputGffFileName.gz", "$gffDir/$outputGffFileName.gz") || die "Can't rename $workingDir/$outputGffFileName.gz";
  move("$workingDir/$outputGffFileName.gz.tbi", "$gffDir/$outputGffFileName.gz.tbi") || die "Can't rename $workingDir/$outputGffFileName.gz.tbi";
}
