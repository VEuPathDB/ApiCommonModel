#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use Getopt::Long qw(GetOptions);
use Data::Dumper;
use EbrcModelCommon::Model::tmUtils;
use ApiCommonModel::Model::Pubmed;
use XML::Simple;

my ($help, $propfile, $instance, $schema, $suffix, $prefix, $filterValue, $debug);

Getopt::Long::Configure("pass_through");
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "prefix=s" => \$prefix,
           "filterValue=s" => \$filterValue,
           "debug!" => \$debug,
           "help|h" => \$help,
          );

usage() if ($help);

die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

my $xmlParser = new XML::Simple();
my $props = $xmlParser->XMLin($propfile);
my $apiKey = $props->{ncbiApiKey};



# create table
$dbh->do(<<SQL) or die "creating table";
   create table Pubmed$suffix (
      pubmed_id   numeric(10),
      title       varchar(400),
      authors     text,
      doi         varchar(100)
   )
SQL

$dbh->commit();
# try getting wanted references from an existing version of the table
$dbh->{PrintError} = 0;
$dbh->{RaiseError} = 0;
my $rtn = $dbh->do(<<SQL);
  insert into Pubmed$suffix (pubmed_id, title, authors, doi)
  select pubmed_id, title, authors, doi
  from Pubmed
SQL
$dbh->commit();
$dbh->{PrintError} = 1;
$dbh->{RaiseError} = 1;

my $recycled = ($rtn eq "0E0" || $rtn eq "") ? 0 : $rtn;
print STDERR "Already have citations for $recycled PMIDs\n";

# prepare insert
my $insertStmt = $dbh->prepare(<<SQL);
   insert into Pubmed$suffix
   (pubmed_id, doi, title, authors)
   values (?, ?, ?, ?)
SQL

# get PubMed IDs
my $stmt = $dbh->prepare(<<SQL) or print STDERR $dbh->errstr;
     select pubmed_id
     from (select distinct regexp_replace(primary_identifier, '[^0-9]', '') as pubmed_id
           from sres.DbRef
           where db_ref_id in (select db_ref_id from dots.DbRefNaFeature)
             and external_database_release_id
                 in (  select edd.external_database_release_id
                       from ExternalDbDatasetPresenter edd
                       where lower(edd.dataset_presenter_display_name) like '%pubmed%'
                     union
                       select edr.external_database_release_id
                       from sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
                       where ed.external_database_id = edr.external_database_id
                         and lower(ed.name) like '%pubmed%'
                    )
             and regexp_replace(primary_identifier, '[^0-9]', '') is not null
             and primary_identifier
                 not in (select dr.primary_identifier
                         from sres.DbRef dr,
                              sres.ExternalDatabase ed, sres.ExternalDatabaseRelease edr
                         where dr.external_database_release_id = edr.external_database_release_id
                           and ed.external_database_id = edr.external_database_id
                           and ed.name like '%DELETED_RSRC'
                        )
          ) t
     where pubmed_id not in (select pubmed_id::varchar from Pubmed$suffix)
     order by pubmed_id
SQL

$stmt->execute();
my @pmids;
my $pmidCount = 0;
while (my ($pmid) = $stmt->fetchrow_array()) {
  push(@pmids, $pmid);
  $pmidCount++;
}
$stmt->finish();

print STDERR "Need citations for $pmidCount PMIDs\n";

# process PMIDs in chunks, so resulting XML is wieldy
my $CHUNKSIZE = 100;
my $insertCount;

while (@pmids) {
  my @chunkOfPmids;
  for (my $i=0; ($i < $CHUNKSIZE) && @pmids; $i++) {
    push(@chunkOfPmids, pop(@pmids));
  }

  # create Pubmed object (and query NCBI for data)
  print STDERR "getting PubMed data from NCBI\n"
    if $debug;
  my $pubmed = ApiCommonModel::Model::Pubmed->new($apiKey, \@chunkOfPmids);

  print STDERR "processing PubMed data\n"
    if $debug;
  # iterate through list, match up PubMed data, and insert
  foreach my $pmid (@chunkOfPmids) {
    my $doi = $pubmed->getDoi($pmid);
    my $title = $pubmed->getTitle($pmid);
    my $authors = $pubmed->getAuthors($pmid);

    $insertStmt->execute($pmid, $doi, $title, $authors)
      or die "inserting record for PubMed ID \"$pmid\"";
    $insertCount++;
    print STDERR "Inserted $insertCount PubMed records\n"
      unless ($insertCount % 1000);
  }
}

print STDERR "Inserted $insertCount PubMed records\n"
  if $insertCount;

# create index
$dbh->do(<<SQL) or die "creating index";
   create index pmix$suffix
      on Pubmed$suffix (pubmed_id, title, doi)
SQL
$dbh->commit();
$dbh->disconnect();

sub usage {
  my $e = shift;
  if($e) {
    print STDERR $e . "\n";
  }
  print STDERR "
Build a table of PubMed records from PubMed IDs linked in the database.

usage:  buildPubmedTT -propfile prop_file -instance instance -schema schema -suffix suffix  [-debug] [-help]
";
  exit;
}

1;

