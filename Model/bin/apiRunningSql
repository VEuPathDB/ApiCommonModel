#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use IO::File;

my ($filter, @opts) = @ARGV;

usage() if scalar(@opts) > 2;

my ($includeInactive, $propfile);
if (scalar(@opts) == 2) {
  $includeInactive = shift(@opts);
  $propfile = shift(@opts);
} elsif (scalar(@opts) == 1 && $opts[0] eq '-i') {
  $includeInactive = '-i';
} elsif (scalar(@opts) == 1) {
  $propfile = $opts[0];
}

usage() unless $filter;
usage() if $includeInactive && $includeInactive != '-i';

$propfile = $ENV{GUS_HOME} . "/config/gus.config" unless($propfile);

open(F, $propfile) || die "Couldn't open prop file '$propfile'\n";
my ($login, $password);
while (<F>) {
  $login = $1 if (/^databaseLogin\=(\S+)/);
  $password = $1 if (/^databasePassword\=(\S+)/);
}
close(F);
die "Couldn't parse login and password from $propfile" unless $login && $password;

my $cmd = "sqlplus /nolog \@apiRunningSql_tmp.sql";

open(F, "apiTnsSummary -a|") || die "Couldn't run apiTnsSummary\n";

my $totalInactiveSessionsCount = 0;

#eupabl1n.pcbi.upenn.edu       ares1.pcbi.upenn.edu          eupaAn, eupabl1n
while(<F>) {
  my $inactiveSessionsCount;
  chomp;
  if (/$filter/) {
    /^(\w+)/ || die "Can't parse line: $_\n";  # get the service name
    my $instance = $1;

    # confirm the service name is an alias (will have a space char in front)
    # if not then use the last alias on the line (because it is easy to grab)
    if (!/ $instance$|$instance,/) {
      /(\S+)$/;
      $instance = $1;
    }
    open(C, ">apiRunningSql_tmp.sql");
    print C "
connect $login/$password\@$instance;
set serveroutput on size 1000000;
alter session set nls_date_format = 'yyyy-mm-dd hh24:mi:ss';
execute sys_shared.SHARED_USER.get_all_session_info_full;
exit;
";
    close(C);

    my $t = localtime();

    print
"
======================================================
==============  $instance $t
======================================================";

    my @lines = `$cmd`;
    unlink("apiRunningSql_tmp.sql");
    my $chunk;
    my $statusInactive = 0;
    foreach my $line (@lines) {
      chomp $line;
      next if $line =~ /^\s+$|SQL.Plus|Copyright|Connected|sql_text|PL\/SQL procedure|Disconnected|Partitioning/;
      next if $line =~ /^--------+$/;
      if ($line =~ /^p_sid\=/) {
	print $chunk unless $statusInactive && !$includeInactive;
	$chunk = "----------------------------------------\n$line";
	$statusInactive = 0;
      } else {
	if ($line =~ /status=INACTIVE/) {
	  $statusInactive = 1;
	  $inactiveSessionsCount += 1;
	  $totalInactiveSessionsCount += 1;
	}
	$chunk .= "$line\n";
      }
    }
    print $chunk unless $statusInactive && !$includeInactive; 
    print "\nInactive Sessions: $inactiveSessionsCount\n";

  }
}
  print "\nTotal Inactive Sessions: $totalInactiveSessionsCount\n\n";


sub usage {
  die "
Find all running SQL on a particular instance or on all instances on a server.

Usage:  apiRunningSql instance_filter [-i] [propfile]

Where:
  instance_filter:  a term to filter lines from apiTnsSummary, to find which instances to check
  -i:               a flag to include inactive sessions (excluded by default)
  propfile:         a propfile that has the databaseLogin= and databasePassword= properties set.  Defaults to \$GUS_HOME/config/gus.config

This program runs apiTnsSummary to get a list of all servers.  This is what apiTnsSummary output looks like:

apicommr.rcc.uga.edu          medlar.rcc.uga.edu            apicommdevs
cryp017n.pcbi.upenn.edu       ares3.pcbi.upenn.edu          cryp017n
cryp017s.rcc.uga.edu          medlar.rcc.uga.edu            cryp017s

It finds lines in that output that contain the supplied instance_filter term.  For each of those instances it runs the sys_shared.SHARED_USER.get_all_session_info_full stored procedure to find all running queries on that server.

";
}


