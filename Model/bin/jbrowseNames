#!/usr/bin/perl

use strict;

use lib $ENV{GUS_HOME} . "/lib/perl";

use JSON;
use DBI;
use DBD::Oracle;

use WDK::Model::ModelConfig;

use Data::Dumper;

# TODO: remove gusHome from command line arg
my ($gusHome, $projectId, $organismAbbrev, $type, $isPartial, $appVersion, $query) = @ARGV;


my $modelConfig = new WDK::Model::ModelConfig($projectId);

my $dbh = DBI->connect( $modelConfig->getAppDbDbiDsn(),
                        $modelConfig->getAppDbLogin(),
                        $modelConfig->getAppDbPassword()
    )
    || die "unable to open db handle to ", $modelConfig->getAppDbDbiDsn();


my $operator;
if($query && lc $isPartial eq "false") {
  $operator = "=";
}
elsif($query && lc $isPartial eq "true") {
  $query = "%" . $query . "%";
  $operator = "like";
}
else {
  die "Invalid sourceId [$query] when isPartial=$isPartial";
}


my $sql;

if($type eq 'genomic') {
  $sql = "select source_id
     , product
     , name
     , sequence_id
     , start_min
     , end_max
from webready.GeneAttributes ga
   , apidb.organism o
where case when name is null 
           then lower(source_id) || ' - ' || lower(product) 
           else lower(source_id) || ' - ' || lower(product) || ' (' || lower(name) || ')'
      end $operator lower('$query')
and ga.taxon_id = o.taxon_id
and o.abbrev = '$organismAbbrev'";
}
elsif($type eq 'protein') {
  $sql = "select pa.source_id
     , ga.product
     , ga.name
     , pa.source_id
     , 1
     , pa.protein_length
from webready.ProteinAttributes pa
   , webready.GeneAttributes ga
   , apidb.organism o
where case when ga.name is null 
           then lower(pa.source_id) || ' - ' || lower(ga.product) 
           else lower(pa.source_id) || ' - ' || lower(ga.product) || ' (' || lower(ga.name) || ')'
      end $operator lower('$query')
and pa.gene_source_id = ga.source_id
and ga.taxon_id = o.taxon_id
and o.abbrev = '$organismAbbrev'";
}
else {
  die "only genomic or protein are valid types: found $type";
}



my $sh = $dbh->prepare($sql);
$sh->execute();

my $result = [];
while(my ($id, $product, $name, $seqId, $start, $end) = $sh->fetchrow_array()) {

  my $objName = $name ? "$id - $product ($name)" : "$id - $product";

  my $hash =  {
    "name" => $objName,
    "location" => {
      "ref" => $seqId,
      "start" => $start + 0, #force numeric by adding zero
      "end" => $end + 0, #force numeric by adding zero
      "tracks" => ["gene:annotation" ],
    },
    "objectName" => $objName
  };


  push @$result, $hash;
#  push @$result, $product;
#  push @$result, $name if($name);
}

$dbh->disconnect();

print encode_json($result);


