#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use JSON;
use File::Basename;
use LWP::UserAgent;
use LWP::Simple;
use Tie::IxHash;
use Getopt::Long;
use Data::Dumper;
use URI::Escape;


# Tie a hash to Tie::IxHash to preserve insertion order
tie my %config, 'Tie::IxHash';

my ($projectName, $buildNumber) = @ARGV;
    unless($projectName && $buildNumber) {
        die "missing a required property projectName or buildNumber";
    }


my %websiteUrl = (AmoebaDB => 'https://amoebadb.org',
                CryptoDB => 'https://cryptodb.org',
                FungiDB => 'https://fungidb.org',
                GiardiaDB => 'https://giardiadb.org',
                MicrosporidiaDB => 'https://microsporidiadb.org',
                PiroplasmaDB => 'https://piroplasmadb.org',
                PlasmoDB => 'https://plasmodb.org',
                ToxoDB => 'https://toxodb.org',
                TrichDB => 'https://trichdb.org',
                TriTrypDB => 'https://tritrypdb.org',
                VectorBase => 'https://vectorbase.org');

my $site = $websiteUrl{$projectName};

my $organisms = &getOrganismListAndPrintJson($site);

foreach my $organism (@{$organisms->{organisms}}) {

    my $orgAbbrev = $organism->{ORGANISM_ABBREV};
    my $fullName = $organism->{NAME};
    my $organismNameForFiles = $organism->{NAME_FOR_FILENAMES};

my @directories = glob "$ENV{GUS_HOME}/lib/jbrowse/auto_generated/*";


foreach my $organismAbbrev (map { basename $_} @directories) {
  next unless($organismAbbrev =~ /$orgAbbrev$/);

  my $assembly = &makeAssembly($organismAbbrev, $buildNumber, $projectName, $organismNameForFiles);

  push @{$config{assemblies}}, $assembly;


  # TODO: annotated_genes.gff
  # TODO: dnaseq

  my $cmd = join(" ", "jbrowseRnaAndChipSeqTracks", $organismAbbrev, $projectName, $buildNumber, "/var/www/Common/apiSiteFilesMirror/webServices", "RNASeq", "jbrowse2");

  my $rnaseqTracksJson = `$cmd`;
  my $rnaseqTracks = decode_json($rnaseqTracksJson);

  push @{$config{tracks}}, @{$rnaseqTracks->{tracks}};

  my $chipSeqCmd = join(" ", "jbrowseRnaAndChipSeqTracks", $organismAbbrev, $projectName, $buildNumber, "/var/www/Common/apiSiteFilesMirror/webServices", "ChIPSeq", "jbrowse2");
  my $chipseqTracksJson = `$chipSeqCmd`;
  my $chipseqTracks = decode_json($chipseqTracksJson);

  push @{$config{tracks}}, @{$chipseqTracks->{tracks}};

  my $dnaSeqCmd = join(" ", "jbrowseDNASeqTracks", $organismAbbrev, $projectName, $buildNumber, "/var/www/Common/apiSiteFilesMirror/webServices", "jbrowse2");
  my $dnaseqTracksJson = `$dnaSeqCmd`;
  my $dnaseqTracks = decode_json($dnaseqTracksJson);

  push @{$config{tracks}}, @{$dnaseqTracks->{tracks}};

  my $orgSpecCmd = join(" ", "jbrowseOrganismSpecificTracks", $organismAbbrev, $projectName, "true", $buildNumber, "/var/www/Common/apiSiteFilesMirror/webServices", "jbrowse2");
  my $orgSpecTracksJson = `$orgSpecCmd`;
  my $orgSpecTracks = decode_json($orgSpecTracksJson);

  push @{$config{tracks}}, @{$orgSpecTracks->{tracks}};

  }
}
print encode_json(\%config);



sub makeAssembly {
  my ($organismAbbrev, $buildNumber, $projectName, $organismNameForFiles) = @_;

  tie my %assembly, 'Tie::IxHash';


  tie my %adapter, 'Tie::IxHash';

  tie my %sequence, 'Tie::IxHash';

  tie my %fastaLocation, 'Tie::IxHash';
  tie my %faiLocation, 'Tie::IxHash';

  $adapter{type} = "IndexedFastaAdapter";

  $fastaLocation{uri} = "$projectName/build-${buildNumber}/${organismNameForFiles}/fasta/genome.fasta";
  $fastaLocation{locationType} = "UriLocation";

  $faiLocation{uri} = "$projectName/build-${buildNumber}/${organismNameForFiles}/fasta/genome.fasta.fai";
  $faiLocation{locationType} = "UriLocation";

  $adapter{fastaLocation} = \%fastaLocation;
  $adapter{faiLocation} = \%faiLocation;

  $sequence{type} = "ReferenceSequenceTrack";
  $sequence{trackId} = $organismAbbrev;

  $sequence{adapter} = \%adapter;
  $sequence{rendering} = {
        type => "DivSequenceRenderer"
  };

  $assembly{name} = $organismAbbrev; #TODO:  change this one to something nicer "Plasmodium_falciparum_3D7" but all configs need to match

  $assembly{sequence} = \%sequence;



  return \%assembly;
}

sub getOrganismListAndPrintJson {
  my ($site) = @_;

  my $orgUrl = "$site/a/service/jbrowse/organismList";

  my $organisms = &getData($orgUrl);

  return $organisms;
}

sub getData {
  my ($url) = @_;

my $agent = LWP::UserAgent->new;
$agent->timeout(3600);
my $json = $agent->get($url);
$json->is_success or die $json->status_line;
my $decodedJson = decode_json($json->content);
return $decodedJson;
}


1;
