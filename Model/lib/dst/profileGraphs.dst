[templateStart]
name=transcriptionSummaryGraph
anchorFile=ApiCommonModel/Model/lib/xml/dataPlotter/queries.xml
prop=datasetName
prop=graphPriorityOrderGrouping
>templateTextStart<
	 UNION
	 select '${datasetName}' as dataset_name,
	       ${graphPriorityOrderGrouping} as order_num
>templateTextEnd<

[templateStart] 
name=genePageGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/geneTableQueries.xml
prop=datasetName
prop=datasetNamePattern
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
      select '${datasetName}' as dataset,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
>templateTextEnd<


[templateStart] 
name=antibodyArrayGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/geneTableQueries.xml
prop=datasetName
prop=datasetNamePattern
prop=datasetDisplayName 
prop=datasetDescrip
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphVisibleParts
prop=graphGenePageSection
prop=graphPriorityOrderGrouping
prop=isGraphCustom
prop=defaultGraphCategory
>templateTextStart<
      UNION
      select '${datasetName}' as dataset,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
>templateTextEnd<

[templateStart] 
name=pathwayGraphs
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/pathwayTableQueries.xml
prop=presenterId
prop=datasetDisplayName 
prop=graphModule
prop=projectName
prop=isGraphCustom
prop=graphXAxisSamplesDescription
>templateTextStart<
      UNION
      select '${datasetDisplayName}' as display_name,
                  'type=${graphModule}&project_id=${projectName}&datasetId=${presenterId}&default=1' as internal,
                  '${isGraphCustom}' as is_graph_custom,
                  '${graphXAxisSamplesDescription}' as xaxis_description,
                  '${projectName}' as project_id
>templateTextEnd<

[templateStart] 
name=microarrayGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/geneTableQueries.xml
prop=datasetName
prop=datasetNamePattern
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
      select '${datasetName}' as dataset,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
>templateTextEnd<


[templateStart] 
name=phenotypeGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/geneTableQueries.xml
prop=datasetName
prop=datasetNamePattern
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
      select '${datasetName}' as dataset,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
>templateTextEnd<




[templateStart] 
name=proteomicsGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/geneTableQueries.xml
prop=datasetName
prop=datasetNamePattern
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
select '${datasetName}'as dataset,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
>templateTextEnd<



[templateStart] 
name=compoundPageGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/compoundTableQueries.xml
prop=datasetName
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
      select '${datasetName}' as dataset_name
      , '${graphModule}' as module
      , '${graphXAxisSamplesDescription}' as x_axis
      , '${graphYAxisDescription}' as y_axis
      , '${isGraphCustom}' as is_graph_custom
      , ${graphPriorityOrderGrouping} as order_num
>templateTextEnd<

[templateStart] 
name=profileAttributeQueries
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptAttributeQueries.xml
prop=datasetName
prop=projectName
prop=includeProjectsExcludeEuPathDB
>templateTextStart<
        <sqlQuery name="ProfileSamples${datasetName}" doNotTest="true" attributeMetaQueryRef="TranscriptAttributes.MetaProfileSamples${datasetName}"  includeProjects="${includeProjectsExcludeEuPathDB}">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <sql>
              <![CDATA[
  SELECT ta.source_id, ta.project_id, ta.gene_source_id, p.*
  FROM apidbtuning.transcriptattributes ta,
    (SELect *
     FROM  crosstab ('SELECT  ga.source_id as profile_source_id,
                          ''pan_'' || nfe.protocol_app_node_id as protocol_app_node,
                          round(cast(nfe.value as numeric), 2) as value
                      FROM results.nafeatureexpression nfe, apidbtuning.profilesamples ps, apidbtuning.geneattributes ga
                      WHERE nfe.protocol_app_node_id = ps.protocol_app_node_id
                      AND ps.DATASET_NAME = ''${datasetName}''
                      AND ps.profile_type = ''values''
                      AND nfe.NA_FEATURE_ID = ga.NA_FEATURE_ID
                      ORDER BY protocol_app_node,value')
            as profileStr (profile_source_id varchar(20), pan1 numeric, pan2 numeric, pan3 numeric, pan4 numeric, pan5 numeric, pan6 numeric, pan7 numeric, pan8 numeric, pan9 numeric, pan11 numeric, pan12 numeric, pan13 numeric, pan14 numeric, pan15 numeric, pan16 numeric, pan17 numeric, pan18 numeric, pan19 numeric)
    ) p
    WHERE ta.gene_source_id = p.profile_source_id
              ]]>
            </sql>
        </sqlQuery>

       <sqlQuery name="MetaProfileSamples${datasetName}" includeProjects="${includeProjectsExcludeEuPathDB}">
          <column name="name" />
          <column name="display_name" />
          <column name="help" />
          <column name="reporter_name" />
          <column name="reporter_display" />
          <column name="reporter_description" />
          <column name="reporter_implementation" />
          <column name="reporter_properties" />

          <sql excludeProjects="EuPathDB">
            <![CDATA[
           select 'pan_' || ps.PROTOCOL_APP_NODE_ID as name
                , CASE WHEN ct.ct > 1
                        THEN COALESCE(ps.profile_set_suffix, REGEXP_REPLACE(ps.study_name, ' \[.+\]', '') ) || ' - ' || ps.protocol_app_node_name 
                       WHEN ct.ct = 1 and ps.profile_set_suffix is not null
                        THEN ps.profile_set_suffix || ' - ' || ps.protocol_app_node_name 
                       ELSE ps.protocol_app_node_name 
                  END  || 
                  CASE WHEN (ps.study_name LIKE '%nonunique]') THEN ' - nonunique'
                       WHEN (ps.study_name LIKE '%unique]') THEN  ' - unique'
                       ELSE '' 
                  END || ' (' || dp2.VALUE || ')' AS display_name,
                  dp.value || ' [Dataset: ' || dp3.value || ']'as help,
                            'histogram' as reporter_name,
                            'Histogram' as reporter_display,
                            'Display a histogram of the values' as reporter_description,
                            'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter'as reporter_implementation,
                            null as reporter_properties
                     from apidbtuning.profilesamples ps,
                      (select DATASET_NAME, count(*) as ct from apidbtuning.profiletype where profile_type = 'values' group by dataset_name) ct
                    , APIDBTUNING.DATASETPROPERTY dp 
                    , APIDBTUNING.DATASETPROPERTY dp2
                    , APIDBTUNING.DATASETPROPERTY dp3
                    , APIDBTUNING.datasetnametaxon dnt
                     where ps.DATASET_NAME = '${datasetName}'
                      and ps.profile_type = 'values'
                      and ps.dataset_name = ct.dataset_name
                      and ps.dataset_name = dnt.name
                      and dnt.dataset_presenter_id = dp.dataset_presenter_id
                      and dp.property = 'profileSamplesHelp'
                      and dnt.dataset_presenter_id = dp2.dataset_presenter_id
                      and dp2.property = 'datasetShortDisplayName'
                      and dnt.dataset_presenter_id = dp3.dataset_presenter_id
                      and dp3.property = 'datasetDisplayName'
                      ORDER BY ps.study_id, ps.NODE_ORDER_NUM
            ]]>
          </sql>  
          <sql includeProjects="EuPathDB">
            <![CDATA[
            select '${datasetName}' as name, '${datasetName}' 
            ]]>
          </sql>  

       </sqlQuery>
>templateTextEnd<



[templateStart] 
name=profileAttributeQueriesStrandSpecificRNASeq
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptAttributeQueries.xml
prop=datasetName
prop=projectName
prop=sense
prop=antisense
prop=includeProjectsExcludeEuPathDB
>templateTextStart<
        <sqlQuery name="ProfileSamples${datasetName}" doNotTest="true" attributeMetaQueryRef="TranscriptAttributes.MetaProfileSamples${datasetName}"  includeProjects="${includeProjectsExcludeEuPathDB}">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <sql>
              <![CDATA[
  SELECT ta.source_id, ta.project_id, ta.gene_source_id, p.*
  FROM apidbtuning.transcriptattributes ta,
    (SELECT *
     FROM  crosstab ('SELECT  ga.source_id as profile_source_id,
                          ''pan_'' || nfe.protocol_app_node_id as protocol_app_node,
                          round(cast(nfe.value as numeric), 2) as value
                      FROM results.nafeatureexpression nfe, apidbtuning.profilesamples ps, apidbtuning.geneattributes ga
                      WHERE nfe.protocol_app_node_id = ps.protocol_app_node_id
                      AND ps.DATASET_NAME = ''${datasetName}'' 
                      AND ps.profile_type = ''values''
                      AND nfe.NA_FEATURE_ID = ga.NA_FEATURE_ID
                      ORDER BY protocol_app_node,value')
            as profileStr (profile_source_id varchar(20), pan1 numeric, pan2 numeric, pan3 numeric, pan4 numeric, pan5 numeric, pan6 numeric, pan7 numeric, pan8 numeric, pan9 numeric, pan11 numeric, pan12 numeric, pan13 numeric, pan14 numeric, pan15 numeric, pan16 numeric, pan17 numeric, pan18 numeric, pan19 numeric)
    ) p
    WHERE ta.gene_source_id = p.profile_source_id
              ]]>
            </sql>
        </sqlQuery>

       <sqlQuery name="MetaProfileSamples${datasetName}" includeProjects="${includeProjectsExcludeEuPathDB}">
          <column name="name" />
          <column name="display_name" />
          <column name="help" />
          <column name="reporter_name" />
          <column name="reporter_display" />
          <column name="reporter_description" />
          <column name="reporter_implementation" />
          <column name="reporter_properties" />

          <sql excludeProjects="EuPathDB">
            <![CDATA[
SELECT 'pan_' || ps.PROTOCOL_APP_NODE_ID AS name, 
  CASE
    WHEN ps.profile_set_suffix IS NULL
    THEN ''
    ELSE ps.profile_set_suffix || ' '
  END ||
  CASE
    WHEN lower(ps.study_name) like '%${sense}%'
    THEN 'sense'
    WHEN lower(ps.study_name) like '%${antisense}%'
    THEN 'antisense'
    ELSE 'unstranded'
  END  || ' - ' || ps.protocol_app_node_name  ||
  CASE
    WHEN lower(ps.study_name) like '%unique%'
    THEN ' - unique only'
    ELSE ''
  END AS display_name,
  dp.value || ' [Dataset: ' || dp3.value || ']' as help,
                            'histogram' as reporter_name,
                            'Histogram' as reporter_display,
                            'Display a histogram of the values' as reporter_description,
                            'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter'as reporter_implementation,
                            null as reporter_properties

FROM apidbtuning.profilesamples ps
 , APIDBTUNING.DATASETPROPERTY dp 
 , APIDBTUNING.DATASETPROPERTY dp2
 , APIDBTUNING.DATASETPROPERTY dp3
 , APIDBTUNING.datasetnametaxon dnt
WHERE ps.DATASET_NAME = '${datasetName}'
AND ps.profile_type = 'values'
and ps.dataset_name = dnt.name
and dnt.dataset_presenter_id = dp.dataset_presenter_id
and dp.property = 'profileSamplesHelp'
and dnt.dataset_presenter_id = dp2.dataset_presenter_id
and dp2.property = 'datasetShortDisplayName'
and dnt.dataset_presenter_id = dp3.dataset_presenter_id
and dp3.property = 'datasetDisplayName'
ORDER BY ps.study_id, ps.NODE_ORDER_NUM
            ]]>
          </sql>  
          <sql includeProjects="EuPathDB">
            <![CDATA[
            select '${datasetName}' as name, '${datasetName}' 
            ]]>
          </sql>  
       </sqlQuery>
>templateTextEnd<



[templateStart] 
name=profileAttributeRef
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptRecord.xml
prop=datasetName
prop=presenterId
prop=includeProjectsExcludeEuPathDB
prop=projectName
>templateTextStart<
              <attributeQueryRef ref="TranscriptAttributes.ProfileSamples${datasetName}" attributeMetaQueryRef="TranscriptAttributes.MetaProfileSamples${datasetName}" includeProjects="${includeProjectsExcludeEuPathDB}">
              </attributeQueryRef>
>templateTextEnd<



[templateStart] 
name=profileMinMaxAttributeRef
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptRecord.xml
prop=presenterId
prop=datasetName
prop=projectName
prop=includeProjectsExcludeEuPathDB
>templateTextStart<
        <attributeQueryRef ref="TranscriptAttributes.ProfileMinMax${datasetName}" includeProjects="${includeProjectsExcludeEuPathDB}">
            <columnAttribute name="max_order_${presenterId}" internal="true"/>
            <columnAttribute name="min_order_${presenterId}" internal="true"/>
            <columnAttribute name="max_timepoint_${presenterId}" displayName="Max Expression Stage" />
            <columnAttribute name="min_timepoint_${presenterId}" displayName="Min Expression Stage" />
        </attributeQueryRef>
>templateTextEnd<


[templateStart] 
name=profileMinMaxAttributeQueries
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptAttributeQueries.xml
prop=presenterId
prop=datasetName
prop=projectName
prop=includeProjectsExcludeEuPathDB
>templateTextStart<
     <sqlQuery name="ProfileMinMax${datasetName}" doNotTest="true" includeProjects="${includeProjectsExcludeEuPathDB}">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="max_order_${presenterId}"/>
            <column name="min_order_${presenterId}"/>
            <column name="max_timepoint_${presenterId}" sortingColumn="max_order_${presenterId}" />
            <column name="min_timepoint_${presenterId}" sortingColumn="min_order_${presenterId}" />
            <sql>
              <![CDATA[
                   with sampleorder as
                   (select dataset_name , protocol_app_node_name, min(node_order_num) as node_order_num from 
                        (select dataset_name , protocol_app_node_name, node_order_num
                         from apidbtuning.profilesamples
                         where profile_type = 'values' )
                         group by dataset_name , protocol_app_node_name )
                       select ta.source_id, ta.project_id, ta.gene_source_id
                          , regexp_replace(regexp_replace (p.max_timepoint, ' \[.+\] \(.+\)', ''), ' \(.+\)', '') as max_timepoint_${presenterId}
                          , regexp_replace(regexp_replace(p.min_timepoint,  '\(.*\)', ''), '\[.*\] ','')  as min_timepoint_${presenterId}
                          , pmax.node_order_num as max_order_${presenterId}, pmin.node_order_num as min_order_${presenterId}
                       from apidbtuning.transcriptattributes ta, apidbtuning.profile p, sampleorder pmax, sampleorder pmin
                       where p.dataset_name =  '${datasetName}'
                       and p.dataset_type    = 'transcript_expression'
                       and p.dataset_subtype in ('array', 'rnaseq')
                       and profile_set_name not like '% nonunique]'
                       and p.profile_type = 'values'
                       and ta.gene_source_id = p.source_id
                       and pmax.dataset_name = p.dataset_name
                       and pmax.dataset_name = pmin.dataset_name
                       and pmax.protocol_app_node_name =  regexp_replace(regexp_replace (p.max_timepoint, ' \[.+\] \(.+\)', ''), ' \(.+\)', '') 
                       and pmin.protocol_app_node_name =  regexp_replace(regexp_replace (p.min_timepoint, ' \[.+\] \(.+\)', ''), ' \(.+\)', '') 
                       group by ta.source_id,ta.project_id,ta.gene_source_id,p.max_timepoint,p.min_timepoint, pmax.node_order_num, pmin.node_order_num
              ]]>
            </sql>
        </sqlQuery>


[templateStart] 
name=profileMinMaxAttributeRnaSenseRef
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptRecord.xml
prop=presenterId
prop=datasetName
prop=projectName
prop=includeProjectsExcludeEuPathDB
>templateTextStart<
        <attributeQueryRef ref="TranscriptAttributes.ProfileMinMaxRnaSense${datasetName}" includeProjects="${includeProjectsExcludeEuPathDB}">
            <columnAttribute name="max_order_sense_${presenterId}" internal="true"/>
            <columnAttribute name="min_order_sense_${presenterId}" internal="true"/>
            <columnAttribute name="max_sense_${presenterId}" displayName="Max Sense Expression Stage" />
            <columnAttribute name="min_sense_${presenterId}" displayName="Min Sense Expression Stage" />
        </attributeQueryRef>
>templateTextEnd<


[templateStart] 
name=profileMinMaxAttributeRnaAntisenseRef
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptRecord.xml
prop=presenterId
prop=datasetName
prop=projectName
prop=includeProjectsExcludeEuPathDB
>templateTextStart<
        <attributeQueryRef ref="TranscriptAttributes.ProfileMinMaxRnaAntisense${datasetName}" includeProjects="${includeProjectsExcludeEuPathDB}">
            <columnAttribute name="max_order_anti_${presenterId}" internal="true"/>
            <columnAttribute name="min_order_anti_${presenterId}" internal="true"/>
            <columnAttribute name="max_antisense_${presenterId}" displayName="Max Antisense Expression Stage" />
            <columnAttribute name="min_antisense_${presenterId}" displayName="Min Antisense Expression Stage" />
        </attributeQueryRef>
>templateTextEnd<



[templateStart] 
name=profileMinMaxAttributeRnaSenseQueries
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptAttributeQueries.xml
prop=presenterId
prop=datasetName
prop=projectName
prop=switchStrandsProfiles
prop=includeProjectsExcludeEuPathDB
>templateTextStart<
     <sqlQuery name="ProfileMinMaxRnaSense${datasetName}" doNotTest="true" includeProjects="${includeProjectsExcludeEuPathDB}">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="max_order_sense_${presenterId}"/>
            <column name="min_order_sense_${presenterId}"/>
            <column name="max_sense_${presenterId}" sortingColumn="max_order_sense_${presenterId}" />
            <column name="min_sense_${presenterId}" sortingColumn="min_order_sense_${presenterId}" />
            <sql>
              <![CDATA[
                   with sampleorder as
                   (select dataset_name , protocol_app_node_name, min(node_order_num) as node_order_num from 
                        (select dataset_name , protocol_app_node_name, node_order_num
                         from apidbtuning.profilesamples
                         where profile_type = 'values'
                         and study_name not like '% nonunique]'
                         and (('false'='${switchStrandsProfiles}' and study_name like '%firststrand%') or 
                              ('true'='${switchStrandsProfiles}' and study_name like '%secondstrand%')) )
                         group by dataset_name , protocol_app_node_name )
                       select ta.source_id, ta.project_id, ta.gene_source_id
                          , regexp_replace(regexp_replace (p.max_timepoint, ' \[.+\] \(.+\)', ''), ' \(.+\)', '') as max_sense_${presenterId}
                          , regexp_replace(regexp_replace(p.min_timepoint,  '\(.*\)', ''), '\[.*\] ','')  as min_sense_${presenterId}
                          , pmax.node_order_num as max_order_sense_${presenterId}, pmin.node_order_num as min_order_sense_${presenterId}
                       from apidbtuning.transcriptattributes ta, apidbtuning.profile p, sampleorder pmax, sampleorder pmin
                       where p.dataset_name =  '${datasetName}'
                       and p.dataset_type    = 'transcript_expression'
                       and p.dataset_subtype = 'rnaseq'
                       and p.profile_type    ='values'
                       and profile_set_name not like '% nonunique]'
                       and ta.gene_source_id = p.source_id
                       and (('false'='${switchStrandsProfiles}' and p.max_timepoint like '%firststrand%') or 
                            ('true'='${switchStrandsProfiles}' and p.max_timepoint like '%secondstrand%'))
                       and pmax.dataset_name = p.dataset_name
                       and pmax.dataset_name = pmin.dataset_name
                       and pmax.protocol_app_node_name =  regexp_replace(regexp_replace (p.max_timepoint, ' \[.+\] \(.+\)', ''), ' \(.+\)', '') 
                       and pmin.protocol_app_node_name =  regexp_replace(regexp_replace (p.min_timepoint, ' \[.+\] \(.+\)', ''), ' \(.+\)', '') 
                       group by ta.source_id,ta.project_id,ta.gene_source_id,p.max_timepoint,p.min_timepoint, pmax.node_order_num, pmin.node_order_num
              ]]>
            </sql>
        </sqlQuery>


[templateStart] 
name=profileMinMaxAttributeRnaAntisenseQueries
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptAttributeQueries.xml
prop=presenterId
prop=datasetName
prop=projectName
prop=switchStrandsProfiles
prop=includeProjectsExcludeEuPathDB
>templateTextStart<
     <sqlQuery name="ProfileMinMaxRnaAntisense${datasetName}" doNotTest="true" includeProjects="${includeProjectsExcludeEuPathDB}">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="max_order_anti_${presenterId}"/>
            <column name="min_order_anti_${presenterId}"/>
            <column name="max_antisense_${presenterId}" sortingColumn="max_order_anti_${presenterId}" />
            <column name="min_antisense_${presenterId}" sortingColumn="min_order_anti_${presenterId}" />
            <sql>
              <![CDATA[
                   with sampleorder as
                   (select dataset_name , protocol_app_node_name, min(node_order_num) as node_order_num from 
                        (select dataset_name , protocol_app_node_name, node_order_num
                         from apidbtuning.profilesamples
                         where profile_type = 'values'
                         and study_name not like '% nonunique]'
                         and (('true'='${switchStrandsProfiles}' and study_name like '%firststrand%') or 
                               ('false'='${switchStrandsProfiles}' and study_name like '%secondstrand%')) )
                         group by dataset_name , protocol_app_node_name )
                       select ta.source_id, ta.project_id, ta.gene_source_id
                          , regexp_replace(regexp_replace (p.max_timepoint, ' \[.+\] \(.+\)', ''), ' \(.+\)', '') as max_antisense_${presenterId}
                          , regexp_replace(regexp_replace(p.min_timepoint,  '\(.*\)', ''), '\[.*\] ','')  as min_antisense_${presenterId}
                          , pmax.node_order_num as max_order_anti_${presenterId}, pmin.node_order_num as min_order_anti_${presenterId}
                       from apidbtuning.transcriptattributes ta, apidbtuning.profile p, sampleorder pmax, sampleorder pmin
                       where p.dataset_name =  '${datasetName}'
                       and p.dataset_type    = 'transcript_expression'
                       and p.dataset_subtype = 'rnaseq'
                       and p.profile_type    ='values'
                       and profile_set_name not like '% nonunique]'
                       and ta.gene_source_id = p.source_id
                   and (('true'='${switchStrandsProfiles}' and p.max_timepoint like '%firststrand%') or 
                        ('false'='${switchStrandsProfiles}' and p.max_timepoint like '%secondstrand%'))
                       and pmax.dataset_name = p.dataset_name
                       and pmax.dataset_name = pmin.dataset_name
                       and pmax.protocol_app_node_name =  regexp_replace(regexp_replace (p.max_timepoint, ' \[.+\] \(.+\)', ''), ' \(.+\)', '') 
                       and pmin.protocol_app_node_name =  regexp_replace(regexp_replace (p.min_timepoint, ' \[.+\] \(.+\)', ''), ' \(.+\)', '') 
                       group by ta.source_id,ta.project_id,ta.gene_source_id,p.max_timepoint,p.min_timepoint, pmax.node_order_num, pmin.node_order_num
              ]]>
            </sql>
        </sqlQuery>
