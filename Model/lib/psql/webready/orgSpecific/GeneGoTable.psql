:CREATE_AND_POPULATE
        SELECT source_id,
              ':PROJECT_ID' as project_id,
              ':ORG_ABBREV' as org_abbrev,
              current_timestamp as modification_date,
              go_id,
              string_agg(transcript_source_id, ', ' order by transcript_source_id) as transcript_ids,
              is_not,
              max(go_term_name) as go_term_name, ontology, source, evidence_code,
              reference, evidence_code_parameter, sort_key
        FROM (SELECT DISTINCT ggt.gene_source_id as source_id, ga.project_id,
                              replace(ggt.go_id, 'GO_', 'GO:') as go_id,
                              ggt.transcript_source_id,
                              case when ggt.is_not = 'not' then 'Is not' else '' end AS is_not,
                              ggt.go_term_name, ggt.ontology, ggt.source, ggt.evidence_code,
                              ggt.reference, ggt.evidence_code_parameter,
                              substr(ggt.ontology, 1, 1) || replace(ggt.go_id, 'GO_', 'GO:') as sort_key
              FROM :SCHEMA.GeneGoTerms ggt, :SCHEMA.GeneAttributes ga
              WHERE ggt.gene_source_id = ga.source_id
              and ggt.org_abbrev = ':ORG_ABBREV'
              and ga.org_abbrev = ':ORG_ABBREV'              
        ) t
        GROUP BY source_id, project_id, go_id, is_not, ontology,
                 source, evidence_code, reference, evidence_code_parameter, sort_key
        ORDER BY source_id, ontology, go_id;
      
    
:DECLARE_PARTITION;

