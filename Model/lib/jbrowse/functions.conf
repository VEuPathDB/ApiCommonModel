haplotypeColorFxn = function( feature, variableName, glyphObject, track ) {
  var c = track.browser.config;
  return c.haplotypeColor(feature, track);
 }
snpColorFxn = function( feature, variableName, glyphObject, track ) {
  var c = track.browser.config;
  return c.snpBgFromIsCodingAndNonSyn(feature, track);
 }
colorSpliceSiteFxn = function(feature, variableName, glyphObject, track) {
  var c = track.browser.config;
  return c.colorSpliceSite(feature, track);
 }
interproColorFxn = function( feature, variableName, glyphObject, track ) {
  var c = track.browser.config;
  return c.interproColors(feature, variableName, glyphObject, track);
 }
gffColorFxn = function( feature, variableName, glyphObject, track ) {
  var c = track.browser.config;
  return c.gffColors(feature, variableName, glyphObject, track);
 }
chipColorFxn = function( feature, variableName, glyphObject, track ) {
  var c = track.browser.config;
  return c.chipColor(feature, variableName, glyphObject, track);
 }
colorSegmentByScoreFxn = function( feature, variableName, glyphObject, track ) {
  var c = track.browser.config;
  return c.colorSegmentByScore(feature, variableName, glyphObject, track);
 }
massSpecColor = function( feature, variableName, glyphObject, track ) {
  var color = feature.get("color");
  if(!color && feature.parent()) {
    color = feature.parent().get("color");
  }  
  if(color) {
    var colors = color.split(';');
    return colors[0];
  }
  return 'yellow';
 }
massSpecLabel = function(track, feature, featureDiv) {
  return(feature.get("sample"));
 }
processedTranscriptBorderColor = function( feature, variableName, glyphObject, track ) {
   return(feature.get("strand") == 1 ? "#000080" : "#aa3311" );
 }
processedTranscriptColor = function( feature, variableName, glyphObject, track ) {
   var c = track.browser.config;
   if(feature.parent()) {
     return(c.processedTranscriptColor(feature.parent(), variableName, glyphObject, track));
   }
   if(feature.get('soterm') === 'transposable_element_gene') {
     return(feature.get("strand") == 1 ? "#98AFC7" : "#C798AF" );
   }
   return(feature.get("strand") == 1 ? "#000080" : "#aa3311" );
 }
processedApolloTranscriptColor = function( feature, variableName, glyphObject, track ) {
   var type = feature.get("type");
   return(feature.get("strand") == 1 ? "#6666FF" : "#F18F74" );
 }
unprocessedApolloTranscriptColor = function( feature, variableName, glyphObject, track ) {
   var type = feature.get("type");
   return(feature.get("strand") == 1 ? "#6666FF" : "#F18F74" );
 }
processedGffColor = function( feature, variableName, glyphObject, track ) {
   if (feature.get("strand") == 1) {
     if(feature.get('soTerm') === 'exon') {
       return "lightgray";
     } else if(feature.get('soTerm') === 'CDS') {
       return "lightblue";
     } else {
       return "#000080";
     }
   } else {
     if(feature.get('soTerm') === 'exon') {
       return "#C798AA";
     } else if(feature.get('soTerm') === 'CDS') {
       return "pink";
     } else {
       return "#AA3311";
     }
   }
   return("black" );
 }
unprocessedTranscriptColor = function( feature, variableName, glyphObject, track ) {
   return("white");
 }
syntenyColorFxn = function( featureObject, variableName, glyphObject, track ) {
   var c = track.browser.config;
   return c.syntenyColor(featureObject, track);
 }
alternateTranscriptColor = function( featureObject, variableName, glyphObject, track ) {
   return(featureObject.get("strand") == 1 ? "dodgerblue" : "hotpink" )
 }
liftoffTranscriptColor = function( featureObject, variableName, glyphObject, track ) {
   var c = track.browser.config;
   if(featureObject.parent()) {
     return(c.liftoffTranscriptColor(featureObject.parent(), variableName, glyphObject, track));
   }
   if ( (featureObject.get('valid_transfer') === 'False') || (featureObject.get('has_internal_stops') === 'True') || (featureObject.get('missing_stop_codon') === 'True')){
      return "#EEEEDD";
   } else if(featureObject.get("proteins_match_source") === 'False') {
      return(featureObject.get("strand") == 1 ? "#B3D7F7" : "#F39BBA" );
   } else {
      return(featureObject.get("strand") == 1 ? "#1E88E5" : "#D81B60" );
   }
   return("#DDDDDD" )
 }
nrdbColor = function( featureObject, variableName, glyphObject, track ) {
   return(featureObject.get("strand") == 1 ? "mediumblue" :  "crimson")
 }
orfColor = function( featureObject, variableName, glyphObject, track ) {
   return(featureObject.get("strand") == 1 ? "dodgerblue" :  "mediumvioletred")
 }
piggyBacColor = function( featureObject, variableName, glyphObject, track ) {
   return(featureObject.get("strand") == 1 ? "dodgerblue" :  "mediumvioletred")
 }
estColor = function( featureObject, variableName, glyphObject, track ) {
   return(featureObject.get("strand") == 1 ? "deepskyblue" :  "pink")
 }
estBorderColor = function( featureObject, variableName, glyphObject, track ) {
   return(featureObject.get("strand") == 1 ? "darkslateblue" :  "deeppink")
 }
popsetColor = function( featureObject, variableName, glyphObject, track ) {
   return(featureObject.get("strand") == 1 ? "lightblue" :  "red")
 }
orfDetails = function(track, feature, featureDiv) {
    var c = track.browser.config;
    var rows = new Array();
    rows.push(c.twoColRow('Name:', feature.get("name")));
    rows.push(c.twoColRow('Position:', c.positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand"))));
    rows.push(c.twoColRow('Length:', feature.get("length") + "aa"));
    return c.table(rows);
 }
gffTssChabbertFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
    return c.gffTssChabbert(track, feature, featureDiv);
 }
interproTitleFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
    return c.interproTitle(track, feature, featureDiv);
 }
gffTitleFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
    return c.gffTitle(track, feature, featureDiv);
 }
exportPredTitleFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
    return c.exportPredTitle(track, feature);
 }
interproLinkFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
    return c.interproLink(track, feature, featDiv);
 }
lowcomplexitySegTitleFxn = function(track, feature, featureDiv) {
   var c = track.browser.config;
    return c.lowcomplexitySegTitle(track, feature, featureDiv);
 }
blastpTitleFxn = function(track, feature, featureDiv) {
   var c = track.browser.config;
    return c.blastpTitle(track, feature, featureDiv);
 }
tmhmmTitleFxn = function(track, feature, featureDiv) {
   var c = track.browser.config;
    return c.tmhmmTitle(track, feature, featureDiv);
 }
signalpTitleFxn = function(track, feature, featureDiv) {
   var c = track.browser.config;
    return c.signalpTitle(track, feature, featureDiv);
 }
piggyBacTitle = function(track, feature, featureDiv) {
   var c = track.browser.config;
    var rows = new Array();
    rows.push(c.twoColRow('Position:', c.positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand"))));
    return c.table(rows);
 }
positionTitle = function(track, feature, featureDiv) {
   var c = track.browser.config;
    var rows = new Array();
    rows.push(c.twoColRow('Position:', c.positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand"))));
    return c.table(rows);
 }
popsetDetails = function(track, feature, featureDiv) {
   var c = track.browser.config;
    var rows = new Array();
    rows.push(c.twoColRow('Name:', feature.get("name")));
    rows.push(c.twoColRow('Score:', feature.get("score")));
    rows.push(c.twoColRow('Expect:', feature.get("expect")));
    rows.push(c.twoColRow('Match:', feature.get("matchlen") + " nt"));
    rows.push(c.twoColRow('Note:', feature.get("note")));
    return c.table(rows);
 }
estDetails = function(track, feature, featureDiv) {
   var c = track.browser.config;
    var rows = new Array();
    var name  = feature.get("name"); 
    var start = feature.get("startm");
    var end = feature.get("end");
    var strand = feature.get("strand");
    var score = feature.get("score");
    var percent_identity = feature.get("percentidentity");
    var primer = feature.get("primer");
    var library = feature.get("library");
    var vector = feature.get("vector");
    var stage = feature.get("stage");
    rows.push(c.twoColRow('Name:', name));
    rows.push(c.twoColRow('Position:', c.positionString(track.refSeq.name, start, end, strand)));
    rows.push(c.twoColRow('Percent Identity:', percent_identity));
    rows.push(c.twoColRow('Length:', Math.abs(end-start) + " nt"));
    rows.push(c.twoColRow('Score:', score));
    rows.push(c.twoColRow('Library:', library));
    if(vector) c.rows.push(twoColRow('Vector:', vector));
    if(primer) c.rows.push(twoColRow('Primer:', primer));
    if(stage) c.rows.push(twoColRow('Stage:', stage));
    return c.table(rows);
 }
nrdbDetails = function(track, feature, featureDiv) {
    var c = track.browser.config;
    var rows = new Array();
    var name = feature.get("name");
    var score = feature.get("score");
    var pctI = feature.get("percentidentity");
    var desc = feature.get("defline");
    desc.replace("\001", "");
    rows.push(c.twoColRow('GI number:', name));
    rows.push(c.twoColRow('Score:', score));
    rows.push(c.twoColRow('Position:', c.positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand"))));
    rows.push(c.twoColRow('Identity:', c.round(pctI, 1)));
    if(desc) rows.push(c.twoColRow('Description:', desc));
    return c.table(rows);
 }
nrdbGffDetails = function(track, feature, featureDiv) {
    var c = track.browser.config;
    var rows = new Array();
    var name = feature.get("id");
    var score = feature.get("score");
    var url = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=protein&id=' + name + '&retmode=json&api_key=f2006d7a9fa4e92b2931d964bb75ada85a08';
    var cds = feature.get("subfeatures");
    cds = cds.sort(function(a,b){return a.get("start") - b.get("start")});
    var model = new Array();
    if (feature.get("strand") == '-1') {
      cds.reverse();
      model = cds.map(x => ('complement(' + x.get("end") + '..' + x.get("start") + ')'));
     } 
    else {
     model = cds.map(x => (x.get("start") + ".." + x.get("end")));
    }
    return fetch(url)
     .then(res => res.json())
    .then(obj => {
      var titles = obj.result.uids.map(x => (obj.result[x].title)).join("<br>");
      rows.push(c.twoColRow('Protein:', "<a target='_blank' href='https://www.ncbi.nlm.nih.gov/protein/" + name + "'>" + name + "</a>"));
      rows.push(c.twoColRow('Title(s):', titles));
      rows.push(c.twoColRow('Score:', score));
      rows.push(c.twoColRow('Position:', c.positionString(track.refSeq.name, feature.get("start"), feature.get("end"), feature.get("strand"))));
      rows.push(c.twoColRowVAlign("Alignments", model.join("<br>"), 'top'));
      return c.table(rows);
    }).catch(error => {
      rows.push(c.twoColRow('Protein:', "<a target='_blank' href='https://www.ncbi.nlm.nih.gov/protein/" + name + "'>" + name + "</a>"));
      rows.push(c.twoColRow('Score:', score));
      rows.push(c.twoColRow('Position:', c.positionString(track.refSeq.name, feature.get("start"), feature.get("end"), feature.get("strand"))));
      rows.push(c.twoColRowVAlign("Alignments", model.join("<br>"), 'top'));
      return c.table(rows);
    });
 }
geneTranscriptDetails = function(track, feature, featureDiv, coreDetails) {
    var c = track.browser.config;
    var fmt = dojo.hitch(track, 'renderDetailField', coreDetails);
    var transcriptName = track.getFeatureLabel( feature );
    coreDetails.innerHTML += '<h2 class="sectiontitle">' + transcriptName + '</h2>';
    var strand = feature.get("strand");
    var model = c.orientAndGetUtrsAndCDS(strand,feature.get("subfeatures"),track);
    fmt( 'Type', feature.get("soterm"), feature );
    var utrFive = model[0];
    var utrThree = model[2];
    var cds = model[1];
    var aaSeqId = feature.get("aaseqid");
    var exon_or_cds = 'Exon';
    if (aaSeqId) {
       exon_or_cds = 'CDS';
       var projectId = feature.get("projectid");
       var lowerCaseProjectId = projectId.toLowerCase();
       var baseUrl = "https://" + lowerCaseProjectId + ".org"; 
       var ignore_gene_alias = 0;
       if (projectId == 'ToxoDB') {
          ignore_gene_alias = 1;
       }
       var cdsLink = "<a target='_blank' href='" + baseUrl + "/cgi-bin/geneSrt?project_id=" + projectId + "&ids=" + transcriptName + "&ignore_gene_alias=" + ignore_gene_alias + "&type=CDS&upstreamAnchor=Start&upstreamOffset=0&downstreamAnchor=End&downstreamOffset=0&go=Get+Sequences' target='_blank'>CDS</a>";
       var proteinLink = "<a target='_blank' href='" + baseUrl + "/cgi-bin/geneSrt?project_id=" + projectId + "&ids=" + transcriptName + "&ignore_gene_alias=" + ignore_gene_alias + "&type=protein&upstreamAnchor=Start&upstreamOffset=0&downstreamAnchor=End&downstreamOffset=0&endAnchor3=End&go=Get+Sequences' target='_blank'>protein</a>";
      fmt("Download", cdsLink  + " | " + proteinLink, feature);
    }
    if (utrFive != null && utrFive != '') {
      fmt( '5\' UTR', utrFive, feature );
   }
   if (cds != null) {
     fmt( exon_or_cds, cds, feature );
   }
    if (utrThree != null && utrThree != '') {
      fmt( '3\' UTR', utrThree, feature );
   }
 }
geneTranscriptDetailsNew = function(track, feature, featureDiv, projectId, coreDetails) {
    var c = track.browser.config;
    var fmt = dojo.hitch(track, 'renderDetailField', coreDetails);
    var transcriptName = track.getFeatureLabel( feature );
    coreDetails.innerHTML += '<h2 class="sectiontitle">' + transcriptName + '</h2>';
    var strand = feature.get("strand");
    var model = c.orientAndGetUtrsAndCDSnew(strand,feature,track);
    fmt( 'Type', feature.get("type"), feature );
    var utrFive = model[0];
    var utrThree = model[2];
    var cds = model[1];
    var exon_or_cds = 'Exon';
    if (feature.get("type") == 'mRNA') {
       exon_or_cds = 'CDS';
       var lowerCaseProjectId = projectId.toLowerCase();
       var baseUrl = "https://" + lowerCaseProjectId + ".org"; 
       var cdsLink = "<a target='_blank' href='" + baseUrl + "/cgi-bin/geneSrt?project_id=" + projectId + "&ids=" + transcriptName + "&type=CDS&upstreamAnchor=Start&upstreamOffset=0&downstreamAnchor=End&downstreamOffset=0&go=Get+Sequences' target='_blank'>CDS</a>";
       var proteinLink = "<a target='_blank' href='" + baseUrl + "/cgi-bin/geneSrt?project_id=" + projectId + "&ids=" + transcriptName  + "&type=protein&upstreamAnchor=Start&upstreamOffset=0&downstreamAnchor=End&downstreamOffset=0&endAnchor3=End&go=Get+Sequences' target='_blank'>protein</a>";
       fmt("Download", cdsLink  + " | " + proteinLink, feature);
   }
    if (utrFive != null && utrFive != '') {
      fmt( '5\' UTR', utrFive, feature );
   }
   if (cds != null) {
     fmt( exon_or_cds, cds, feature );
   }
    if (utrThree != null && utrThree != '') {
      fmt( '3\' UTR', utrThree, feature );
   }
 }
geneDetailsNew = function(track, feature, featureDiv, projectId) {
    var c = track.browser.config;
    var projectId = track.project;
    var orgAbbrev = track.orgabbrev;
    container = dojo.create('div', {
      className: 'detail feature-detail feature-detail-' + track.name.replace(/\s+/g, '_').toLowerCase(),
      innerHTML: ''
    });
    var coreDetails = dojo.create('div', {
       className: 'core'
    }, container);
    var fmt = dojo.hitch(track, 'renderDetailField', coreDetails);
    coreDetails.innerHTML += '<h2 class="sectiontitle">Gene Details</h2>';
    fmt( 'Gene', feature.get("id"), feature );
    var geneName = feature.get("name");
    if (geneName !== null){
    fmt( 'Gene Name', geneName, feature );
    }
    fmt( 'Sequence Ontology', feature.get("type"), feature );
    var desc = feature.get("description").replace(/\+/g, ' ');
    fmt( 'Description', desc, feature );
    fmt( 'Position', c.positionString(track.refSeq.name, feature.get("start")+1, feature.get("end"), feature.get("strand")));
    var baseRecordUrl = "/a/app/record";
    var baseUrl = "/a/app/jbrowse";
    var gene_id = feature.get("id");
    var recordLink = '<a target="_blank" href="' + baseRecordUrl + '/gene/' + gene_id + '">Gene Page</a>';
    baseUrl = baseUrl.replace(/\/$/, '');
    var window = 500;
    var seqId = track.refSeq.name;
    var linkStart = feature.get("start") - window;
    var linkStop = feature.get("end") + window;
    var position = seqId + ":" + linkStart + ".." + linkStop;
    var gbLink = "<a target='_blank' href='" + baseUrl + "?loc=" + position + "&data=/a/service/jbrowse/tracks/" + orgAbbrev + "&tracks=gene,Community annotations from Apollo,RNA-Seq Evidence for Introns" + "'>JBrowse</a>";
    var apolloBaseUrl = "https://apollo.veupathdb.org/annotator/loadLink";
    apolloBaseUrl = apolloBaseUrl.replace(/\/$/, '');
    var contig = feature.get("seqid");
    var startpos = feature.get("start");
    var endpos = feature.get("end");
    var organismIdApollo = feature.get("seqid");
    if (organismIdApollo){
    var apolloPosition = contig + ":" + startpos + ".." + endpos;
    var apolloLink = "<a target='_blank' href='" + apolloBaseUrl + "?loc=" + apolloPosition  + "&organism=" + organismIdApollo + "&tracks=gene" + "'>Apollo</a>";
    fmt("Links", gbLink + " | " + recordLink + " | " + apolloLink, feature);
    }
    else{
    fmt("Links", gbLink + " | " + recordLink, feature);
    }
    var subfeatures = feature.get('subfeatures');
    var field_container = dojo.create('div', { className: 'field_container subfeatures' }, container );
    dojo.create( 'h2', { className: 'field subfeatures', innerHTML: 'Transcript Details' }, field_container );
    var subfeaturesContainer = dojo.create( 'div', { className: 'value subfeatures' }, field_container );
    subfeatures.forEach(function(subfeature) {
                    c.geneTranscriptDetailsNew(
                        track,
                        subfeature,
                        null,
                        projectId,
                         dojo.create('div', {
                                        className: 'detail feature-detail subfeature-detail feature-detail-'+track.name+' subfeature-detail-'+track.name,
                                        innerHTML: ''
                                    }, subfeaturesContainer )
                    );
            },track);
    var endDetails = dojo.create('div', {
             className: 'end'
          }, container);
   var hitchEnd = dojo.hitch(track, 'renderDetailField', endDetails);
   var pubmedRows = new Array();
   var goRows = new Array();
   pubmedRows.push(c.threeColHeaderRow("PubMed ID", "Title", "Authors", 1));
   goRows.push(c.fourColHeaderRow("GO ID", "GO Term", "Ontology", "TranscriptIds", 1));
   var data = {primaryKey: [{name: "source_id", value: gene_id}, {name: "project_id", value: projectId}], attributes: ["organism_full","orthomcl_name"], tables: ["PubMed","GOTerms"]};
   c.fetchWithPost("/a/service/record-types/gene/records", data)
    .then(obj => {
       obj.tables.PubMed.forEach(x => {
          var pubmedLink = x.pubmed_id;
          if(pubmedLink)
            pubmedLink = "<a href='" + x.pubmed_link.url + "'>" + x.pubmed_link.displayText + "</a>";
          pubmedRows.push(c.threeColRow(pubmedLink, x.title, x.authors, 1));
          });
       obj.tables.GOTerms.forEach(x => {
          var goLink = "<a href='" + x.go_id_link.url + "'>" + x.go_id_link.displayText + "</a>";
          goRows.push(c.fourColRow(goLink, x.go_term_name, x.ontology, x.transcript_ids, 1));
          });
    fmt("Taxon", obj.attributes.organism_full, feature);
    if (obj.attributes.orthomcl_name.startsWith("OG")) {
    	var orthoLink = "<a href='" + "https://orthomcl.org/orthomcl/app/record/group/" + obj.attributes.orthomcl_name + "'>" + obj.attributes.orthomcl_name + "</a>";
    	fmt("OrthoMCL", orthoLink, feature);
    }
    hitchEnd('PubMed', c.tableWithBorder(pubmedRows), feature);
    hitchEnd('GO annotations', c.tableWithBorder(goRows), feature);
    });
 return container;
 }
geneDetails = function(track, feature, featureDiv) {
    var c = track.browser.config;
    container = dojo.create('div', {
      className: 'detail feature-detail feature-detail-' + track.name.replace(/\s+/g, '_').toLowerCase(),
      innerHTML: ''
    });
    var coreDetails = dojo.create('div', {
       className: 'core'
    }, container);
    var fmt = dojo.hitch(track, 'renderDetailField', coreDetails);
    coreDetails.innerHTML += '<h2 class="sectiontitle">Gene Details</h2>';
    fmt( 'Gene', track.getFeatureLabel( feature ), feature );
    var geneName = feature.get("gene_name");
    if (geneName !== null){
    fmt( 'Gene Name', geneName, feature );
    }
    fmt( 'Taxon', feature.get('taxon'), feature );
    fmt( 'Sequence Ontology', feature.get('soterm'), feature );
    fmt( 'Biotype Classification', feature.get('biotype'), feature );
    fmt( 'Description', track.getFeatureDescription( feature ),feature );
    fmt( 'Position', c.positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand")));
    var orthomclName = feature.get("orthomcl_name");
    if (orthomclName && orthomclName.startsWith("OG")) {
        var orthomclLink = "<a target='_blank' href='https://orthomcl.org/orthomcl/app/record/group/" + orthomclName + "'>" + orthomclName + "</a>";
       fmt( 'OrthoMCL', orthomclLink, feature );
    }
    var baseRecordUrl = "/a/app/record";
    var baseUrl = "/a/app/jbrowse";
    var gene_id = feature.get("geneid");
    var projectId = feature.get("projectid");
    var recordLink = '<a target="_blank" href="' + baseRecordUrl + '/gene/' + gene_id + '">Gene Page</a>';
    baseUrl = baseUrl.replace(/\/$/, '');
    var window = 500;
    var seqId = feature.get("contig");
    var linkStart = feature.get("startm") - window;
    var linkStop = feature.get("end") + window;
    var position = seqId + ":" + linkStart + ".." + linkStop;
    var orgAbbrev = feature.get("orgabbrev");
    var gbLink = "<a target='_blank' href='" + baseUrl + "?loc=" + position + "&data=/a/service/jbrowse/tracks/" + orgAbbrev + "&tracks=gene,Community annotations from Apollo,RNA-Seq Evidence for Introns" + "'>JBrowse</a>";
    var apolloBaseUrl = "https://apollo.veupathdb.org/annotator/loadLink";
    apolloBaseUrl = apolloBaseUrl.replace(/\/$/, '');
    var contig = track.refSeq.name;
    var startpos = feature.get("startm");
    var endpos = feature.get("end");
    var organismIdApollo = feature.get("apolloid");
    if (organismIdApollo){
    var apolloPosition = contig + ":" + startpos + ".." + endpos;
    var apolloLink = "<a target='_blank' href='" + apolloBaseUrl + "?loc=" + apolloPosition  + "&organism=" + organismIdApollo + "&tracks=gene" + "'>Apollo</a>";
    fmt("Links", gbLink + " | " + recordLink + " | " + apolloLink, feature);
    }
    else{
    fmt("Links", gbLink + " | " + recordLink, feature);
    }
    var subfeatures = feature.get('subfeatures');
    var field_container = dojo.create('div', { className: 'field_container subfeatures' }, container );
    dojo.create( 'h2', { className: 'field subfeatures', innerHTML: 'Transcript Details' }, field_container );
    var subfeaturesContainer = dojo.create( 'div', { className: 'value subfeatures' }, field_container );
    subfeatures.forEach(function(subfeature) {
                    c.geneTranscriptDetails(
                        track,
                        subfeature,
                        null,
                         dojo.create('div', {
                                        className: 'detail feature-detail subfeature-detail feature-detail-'+track.name+' subfeature-detail-'+track.name,
                                        innerHTML: ''
                                    }, subfeaturesContainer )
                    );
            },track);
   var endDetails = dojo.create('div', {
             className: 'end'
          }, container);
   var hitchEnd = dojo.hitch(track, 'renderDetailField', endDetails);
   var pubmedRows = new Array();
   var goRows = new Array();
   pubmedRows.push(c.threeColHeaderRow("PubMed ID", "Title", "Authors", 1));
   goRows.push(c.fourColHeaderRow("GO ID", "GO Term", "Ontology", "TranscriptIds", 1));
   var data = {primaryKey: [{name: "source_id", value: gene_id}, {name: "project_id", value: projectId}], attributes: [], tables: ["PubMed","GOTerms"]};
   c.fetchWithPost("/a/service/record-types/gene/records", data)
    .then(obj => {
       obj.tables.PubMed.forEach(x => {
          var pubmedLink = x.pubmed_id;
          if(pubmedLink)
            pubmedLink = "<a href='" + x.pubmed_link.url + "'>" + x.pubmed_link.displayText + "</a>";
          pubmedRows.push(c.threeColRow(pubmedLink, x.title, x.authors, 1));
          });
       obj.tables.GOTerms.forEach(x => {
          var goLink = "<a href='" + x.go_id_link.url + "'>" + x.go_id_link.displayText + "</a>";
          goRows.push(c.fourColRow(goLink, x.go_term_name, x.ontology, x.transcript_ids, 1));
          });
    hitchEnd('PubMed', c.tableWithBorder(pubmedRows), feature);
    hitchEnd('GO annotations', c.tableWithBorder(goRows), feature);
    });
 return container;
 }
apolloGeneDetails = function(track, feature, featureDiv) {
    var c = track.browser.config;
    container = dojo.create('div', {
      className: 'detail feature-detail feature-detail-' + track.name.replace(/\s+/g, '_').toLowerCase(),
      innerHTML: ''
    });
    var coreDetails = dojo.create('div', {
       className: 'core'
    }, container);
    var fmt = dojo.hitch(track, 'renderDetailField', coreDetails);
    coreDetails.innerHTML += '<h2 class="sectiontitle">Apollo Gene Details</h2>';
    fmt( 'Gene', track.getFeatureLabel( feature ), feature );
    fmt( 'Position', c.positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand")));
    fmt( 'Apollo Gene Product', feature.get('apolloproduct'), feature);
    fmt( 'Apollo Evidence Code', feature.get('apolloevidencecode'), feature);
    fmt( 'Apollo Pubmed ID', feature.get('apollopmid'), feature);
    fmt( 'Status', feature.get('apolloobsolete'), feature);
    var baseUrl = "https://apollo.veupathdb.org/annotator/loadLink";
    baseUrl = baseUrl.replace(/\/$/, '');
    var contig = track.refSeq.name;
    var startpos = feature.get("startm");
    var endpos = feature.get("end");
    var position = contig + ":" + startpos + ".." + endpos;
    var apolloOrganismID = feature.get("apolloid");
    var apolloLink = "<a target='_blank' href='" + baseUrl + "?loc=" + position  + "&organism=" + apolloOrganismID + "&tracks=gene" + "'>Apollo</a>";
    fmt('Links', apolloLink, feature);
    var subfeatures = feature.get('subfeatures');
    var field_container = dojo.create('div', { className: 'field_container subfeatures' }, container );
    dojo.create( 'h2', { className: 'field subfeatures', innerHTML: 'Transcript Details' }, field_container );
    var subfeaturesContainer = dojo.create( 'div', { className: 'value subfeatures' }, field_container );
    subfeatures.forEach(function(subfeature) {
                    c.geneTranscriptDetails(
                        track,
                        subfeature,
                        null,
                         dojo.create('div', {
                                        className: 'detail feature-detail subfeature-detail feature-detail-'+track.name+' subfeature-detail-'+track.name,
                                        innerHTML: ''
                                    }, subfeaturesContainer )
                    );
            },track);
    return container;
 }
liftoffGeneDetails = function(track, feature, featureDiv) {
    var c = track.browser.config;
    container = dojo.create('div', {
      className: 'detail feature-detail feature-detail-' + track.name.replace(/\s+/g, '_').toLowerCase(),
      innerHTML: ''
    });
    var coreDetails = dojo.create('div', {
       className: 'core'
    }, container);
    var fmt = dojo.hitch(track, 'renderDetailField', coreDetails);
    coreDetails.innerHTML += '<h2 class="sectiontitle">Liftoff Gene Details</h2>';
    fmt( 'Gene', track.getFeatureLabel( feature ), feature );
    fmt( 'Description', track.getFeatureDescription( feature ),feature );
    fmt( 'Position', c.positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand")));
    var liftoffNote = "Gene models have been lifted from an older genome assembly of this organism to this one. This process sometimes results in imperfect transfers with errors on the new genome. A link to the original gene and its sequence in the old genome is listed below.<br><b>Color Key</b><br><img src='/a/images/vect_liftup_genes_key.jpg' width='300'/>";
    fmt('Note', liftoffNote, feature);
    var baseUrl = "/a/app/record/gene";
    baseUrl = baseUrl.replace(/\/$/, '');
    var geneId = track.getFeatureLabel( feature );
    var geneIdClipped = geneId.split('-')[0];
    var geneRecordLink = '<a target="_blank" href="' + baseUrl + '/' + geneIdClipped + '#category:gene-structure">Source Gene Record Page</a>';
    fmt('Links', geneRecordLink, feature);   
    var geneRecordProtSeqLink = '<a target="_blank" href="' + baseUrl + '/' + geneIdClipped + '#category:sequence">Source Gene Protein Sequence</a>';
    fmt('Sequence', geneRecordProtSeqLink, feature);
    return container;
 }
massSpecDetails = function(track, feature, featureDiv) {
  var c = track.browser.config;
  var rows = new Array();
  var count = feature.get("count");
  var seq =  feature.get("pepseq");
  var extdbname = feature.get("extdbname");
  var experiment = feature.get("experiment");
  var sample = feature.get("sample");
  var phospho_site = feature.get("modsite");
  var ontology_names = feature.get("ontology");
  var tb = "<table><tr><th>Location</th><th>Modified Residue</th><th>Modification Type</th></tr>";
  var start = feature.get("startm");
  if(phospho_site && phospho_site != 'NA') {
    var residue = feature.get("residue");
    var locs =  phospho_site.split(';');
    var term = ontology_names.split(';');
    var residues = residue.split(';');
    for (i = 0; i < locs.length; i++) { 
       tb = tb + "<tr><td>" + locs[i] + "</td><td>" + residues[i] + "</td><td>" + term[i] + "</td></tr>";
    }
  tb = tb + "</table>"; 
  }
  rows.push(c.twoColRow('Experiment:', experiment));
  rows.push(c.twoColRow('Sample:', sample));
  rows.push(c.twoColRow('Sequence:', seq));
  rows.push(c.twoColRow('Spectrum Count:', count));
  return c.table(rows);
 }
gsnapUnifiedIntronJunctionTitleFxn = function(track, feature, featureDiv) {
  var c = track.browser.config;
  return c.gsnapUnifiedIntronJunctionTitle(track, feature, featureDiv);
 }
gsnapUnifiedIntronJunctionHooksModify = function(track, feature, div) {
   var c = track.browser.config;
   var height = c.gsnapIntronHeightFromPercent(feature, track);
   var postHeight = c.gsnapIntronWidthFromScore(feature, track);
   var color = c.gsnapIntronColorFromStrandAndScore(feature, track);
   div.style.height = height + "px";
   div.style.borderRightColor = color;
   div.style.borderLeftColor = color;
   div.style.backgroundColor = color;
   div.style.borderTopWidth = postHeight + "px";
   div.style.borderBottomWidth = postHeight + "px";
   div.style.borderRightWidth = 1 + "px";
   div.style.borderLeftWidth = 1 + "px";
   div.style.boxSizing = "border-box";
   track.config.style.showLabels = false;
   track.showLabels = false;
 }
peakTitleChipSeqFxn = function(track, feature, featureDiv) {
  var c = track.browser.config;
  return c.peakTitleChipSeq(track, feature, featureDiv);
 }
sequenceTitleFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.sequenceTitle(track, feature, featureDiv);
 }
tandemRepeatDetailsFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.positionAndSequence(track, feature, featureDiv);
 }
positionAndSequenceFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.positionAndSequence(track, feature, featureDiv);
 }
lowComplexityDetailsFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.positionAndSequence(track, feature, featureDiv);
 }
snpTitleFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.snpTitle(track, feature, featureDiv);
 }
spliceSiteTitleFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.spliceSiteTitle(track, feature, featureDiv);
 }
gffKirklandFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.gffKirkland(track, feature, featureDiv)
 }
repeatFamilyFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.repeatFamily(track, feature, featureDiv)
 }
transposonFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.transposon(track, feature, featureDiv)
 }
bindingSitesFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.bindingSiteTitle(track, feature, featureDiv)
 }
unifiedPostTranslationalModColorFxn = function(feature, track) {
    var c = track.browser.config;
  return c.unifiedPostTranslationalModColor(feature, track);
 }
unifiedPostTranslationalModTitleFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
  return c.unifiedPostTranslationalModTitle(track, feature);
 }
colorForBindingSitesByPvalueFxn = function(feature, variableName, glyphObject, track) {
    var c = track.browser.config;
  return c.colorForBindingSitesByPvalue(feature, track)
 }
gffGeneFeatureTitleFxn = function(track, feature) {
    var c = track.browser.config;
  return c.gffGeneFeatureTitle(track,feature)
 }
microsatelliteTitleFxn = function(track, feature, featDiv) {
    var c = track.browser.config;
  return c.microsatelliteTitle(track, feature, featDiv);
 }
haplotypeTitleFxn = function(track, feature, featDiv) {
    var c = track.browser.config;
  return c.haplotypeTitle(track, feature, featDiv);
 }
jeffaresDescFxn = function() {
  return 'This diversity estimate is generated from thirteen low coverage strains as described in <a target="_blank" href="http://www.ncbi.nlm.nih.gov/pubmed/20838588">Nygaard et al. PLoS Genet (2010). PMID: 20838588</a> Estimates were calculated using Variscan 2.0 (Vilella 2005) over a 10 kb window, with a 100 bp step.  <br><br> The Variscan parameters used were runmode = 12, blockdatafile = none, slidingwindow = 1, windowtype = 3, widthsw = 10000, jumpsw = 100 fixnum = 1, numnuc = 4, startpos = first, endpos = last, refpos = 0, indivnames = REICH D10 D6 DD2 FCC_2 HB3 IT K1 PFCLIN R033 SANTA_LUCIA SEN3404 VS_1 i7G8 PFCLIN.2 IT.2, outgroup = first, refseq = 1, usemuts = 0, completedeletion = 0, useldsinglets = 1, seqchoice = all.';
 }
syntenyTitleFxn = function(track, feature, featDiv) {
    var c = track.browser.config;
  return c.syntenyTitle(track, feature, featDiv);
 }
table = function(rows) {
   return '<table border="0">' + rows.join('') + '</table>';
 }
tableWithBorder = function(rows) {
   return '<table style=\"border:1px solid darkgray;\">' + rows.join('') + '</table>';
 }
twoColRow = function(left, right) {
   return '<tr><td>' + left + '</td><td>' + right + '</td></tr>';
 }
twoColRowVAlign = function(left, right, valign) {
   return '<tr' + (valign != null ? ' valign=' + valign : '') + '><td>' + left + '</td><td>' + right + '</td></tr>';
 }
threeColRow = function(one, two, three, border) {
   return '<tr><td style="border:' + border + 'px solid darkgray;">' + one + '</td><td style="border:' + border + 'px solid darkgray;">' + two + '</td><td style="border:' + border + 'px solid darkgray;">' + three + '</td></tr>';
 }
threeColHeaderRow = function(one, two, three, border) {
   return '<tr><th style="border:' + border + 'px solid darkgray;">' + one + '</th><th style="border:' + border + 'px solid darkgray;">' + two + '</th><th style="border:' + border + 'px solid darkgray;">' + three + '</th></tr>';
 }
fourColRow = function(one, two, three, four, border) {
   return '<tr><td style="border:' + border + 'px solid darkgray;">' + one + '</td><td style="border:' + border + 'px solid darkgray;">' + two + '</td><td style="border:' + border + 'px solid darkgray;">' + three + '</td><td style="border:' + border + 'px solid darkgray;">' + four + '</td></tr>';
 }
fourColHeaderRow = function(one, two, three, four, border) {
   return '<tr><th style="border:' + border + 'px solid darkgray;">' + one + '</th><th style="border:' + border + 'px solid darkgray;">' + two + '</th><th style="border:' + border + 'px solid darkgray;">' + three + '</th><th style="border:' + border + 'px solid darkgray;">' + four + '</th></tr>';
 }
fiveColRow = function(one, two, three, four, five) {
   return '<tr><td>' + one + '</td><td>' + two + '</td><td>' + three + '</td><td>' + four + '</td><td>' + five + '</td></tr>';
 }
sixColRow = function(one, two, three, four, five, six) {
   return '<tr><td>' + one + '</td><td>' + two + '</td><td>' + three + '</td><td>' + four + '</td><td>' + five + '</td><td>' + six + '</td></tr>';
 }
sixColHeaderRow = function(one, two, three, four, five, six) {
   return '<tr><th>' + one + '</th><th>' + two + '</th><th>' + three + '</th><th>' + four + '</th><th>' + five + '</th><th>' + six + '</th></tr>';
 }
datasetLinkByDatasetName = function(name, display) {
   return "<a  target='_blank' href='/a/app/search/transcript/DatasetsByDatasetNames?param.dataset_name=" + name + "&autoRun=1'>" + display + "</a>";
 }
datasetLinkByDatasetId = function(datasetPresenterId, display) {
   return "<a  target='_blank' href='/a/app/record/dataset/" + datasetPresenterId + "'>" + display + "</a>";
 }
datasetDescription = function(summary, trackSpecificText) {
   return "<p>" + trackSpecificText + "</p><p>" + summary + "</p>";
 }
positionString = function(refseq, start, end, strand) {
   var strandString = strand == 1 ? "(+ strand)" : "(- strand)";
   return refseq + ":" + start + ".." + end + " " + strandString;
 }
positionNoStrandString = function(refseq, start, end) {
   return refseq + ":" + start + ".." + end;
 }
round = function(value, decimals) {
   return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
 }
titleCase = function(str) {
   var splitStr = str.toLowerCase().split(' ');
   for (var i = 0; i < splitStr.length; i++) {
      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);
   }
   return splitStr.join(' ');
 }
interproColors = function( feature, variableName, glyphObject, track ) {
    var c = track.browser.config;
   var dbToColor = {
      'PRINTS': 'red',
      'SUPERFAMILY': 'green',
      'PRODOM': 'yellow',
      'PFAM': 'blue',
      'PROSITEPROFILES': 'khaki',
      'INTERPRO': 'pink',
      'InterProScan': 'pink',
      'PIRSF': 'orange',
      'SMART': 'cyan',
      'GENE3D': 'purple',
      'TIGRFAM': 'black',
      'HAMAP': 'violet',
      'SFLD': 'mediumseagreen',
      'PROSITE patterns': 'khaki',
      'PANTHER': 'lightgrey',
      'CDD': 'dodgerblue'
   };
   return dbToColor[feature.get("db")];
 }
gffColors = function( feature, variableName, glyphObject, track ) {
   var c = track.browser.config;
   var dbToColor = {
      'm6A combined': 'grey',
      'm6A after 24h alkaline stress': 'purple',
      'm6A in tachyzoites': 'green'
   };
   return dbToColor[feature.get("source")];
 }
exportPredTitle = function(track, feature) {
   var c = track.browser.config;
   var rows = new Array();
   var name = feature.get("domainname");
   rows.push(c.twoColRow('Name:', name));
   rows.push(c.twoColRow('Coordinates:', feature.get("start") + " .. " + feature.get("end")));
   return c.table(rows);
 }
lowcomplexitySegTitle = function(track, feature, featDiv) {
   var c = track.browser.config;
   var rows = new Array();
   var sequence = feature.get("sequence");
   rows.push(c.twoColRow('Coordinates:', feature.get("start") + " .. " + feature.get("end")));
   rows.push(c.twoColRow('Sequence:', sequence));
   return c.table(rows);
 }
blastpTitle = function(track, feature, featDiv) {
   var c = track.browser.config;
   var name = feature.get("name");
   var desc = feature.get("note");
   if (!desc) {
      desc = "<i>unavailable</i>";
   }
   var rows = new Array();
   rows.push(c.twoColRow('Name:', name));
   rows.push(c.twoColRow('Description:', desc));
   rows.push(c.twoColRow('Expectation:', feature.get("expect")));
   rows.push(c.twoColRow('% Identical:', feature.get("percentidentity")));
   rows.push(c.twoColRow('% Positive:', feature.get("percentpositive")));
   rows.push(c.twoColRow('Coordinates:', feature.get("start") + " .. " + feature.get("end")));
   return c.table(rows);
 }
tmhmmTitle = function(track, feature, featDiv) {
   var c = track.browser.config;
   var desc = feature.get("topology");
   var rows = new Array();
   rows.push(c.twoColRow('Topology:', desc));
   rows.push(c.twoColRow('Coordinates:', feature.get("start") + " .. " + feature.get("end")));
   return c.table(rows);
 }
signalpTitle = function(track, feature, featDiv) {
   var c = track.browser.config;
   var rows = new Array();
   var d_score = feature.get("dscore");
   var signal_prob = feature.get("signalprob");
   var conclusion_score = feature.get("conclusionscore");
   var hasAdvancedParams = 1;
   if (!conclusion_score){
      hasAdvancedParams = 0;
   }
   var algorithm = feature.get("algorithm"); 
   algorithm = (algorithm == 'SignalPhmm') ? 'SP-HMM' : 'SP-NN';
   rows.push(c.twoColRow('Coordinates:', feature.get("start") + " .. " + feature.get("end")));
   if( hasAdvancedParams){
     rows.push(c.twoColRow('NN Conclusion Score:', conclusion_score));
     rows.push(c.twoColRow('NN D-Score:', d_score));
     rows.push(c.twoColRow('HMM Signal Probability:', signal_prob));
  }
   rows.push(c.twoColRow('Algorithm:', algorithm));
   return c.table(rows);
 }
interproTitle = function(track, feature, featDiv) {
    var c = track.browser.config;
   var name = feature.get("name");
   var desc = feature.get("note");
   var db = feature.get("db");
   var url = feature.get("url");
   var evalue = feature.get("evalue");
   var interproId = feature.get("interproid");
   var rows = new Array();
   rows.push(c.twoColRow('Accession:', name));
   rows.push(c.twoColRow('Description:', desc));
   rows.push(c.twoColRow('Database:', db));
   rows.push(c.twoColRow('Coordinates:', feature.get("start") + " .. " + feature.get("end")));
   rows.push(c.twoColRow('Evalue:', evalue));
   rows.push(c.twoColRow('Interpro:', interproId));
   return c.table(rows);
 }
interproLink = function(track, feature, featDiv) {
   var c = track.browser.config;
   var db = feature.get("db");
   var pi = feature.get("pi");
   var url;
   if (db == 'INTERPRO') {
      url = "http://www.ebi.ac.uk/interpro/DisplayIproEntry?ac=" + pi;
   } else if (db == 'PFAM') {
      url = "https://www.ebi.ac.uk/interpro/entry/pfam/" + pi;
   } else if (db == 'PRINTS') {
      url = "http://umber.sbs.man.ac.uk/cgi-bin/dbbrowser/sprint/searchprintss.cgi?prints_accn=" + pi + "&display_opts=Prints&category=None&queryform=false&regexpr=off";
   } else if (db == 'PRODOM') {
      url = "http://prodom.prabi.fr/prodom/current/cgi-bin/request.pl?question=DBEN&query=" + pi;
   } else if (db == 'PROFILE') {
      url = "http://www.expasy.org/prosite/" + pi;
   } else if (db == 'SMART') {
      url = "http://smart.embl-heidelberg.de/smart/do_annotation.pl?ACC=" + pi + "&BLAST=DUMMY";
   } else if (db == 'SUPERFAMILY') {
      url = "http://supfam.org/SUPERFAMILY/cgi-bin/scop.cgi?ipid=" + pi;
   } else {
      url = "http://www.ebi.ac.uk/interpro/ISearch?query=" + pi + "&mode=all";
   }
   return url;
 }
gffTitle = function(track, feature, featDiv) {
   var c = track.browser.config;
   var name = feature.get("name");
   var seq_id = name.replace(/_m6A/g, '');
   var start = feature.get("startm");
   var end = feature.get("end");
   var strand = strand = feature.get("strand") == 1 ? "+" : "-";
   var length = Math.abs(end - start) + 1;
   var rows = new Array();
   rows.push(c.twoColRow('Name:', name));
   rows.push(c.twoColRow('Type:', 'gff'));
   rows.push(c.twoColRow('Source:', feature.get("source")));
   rows.push(c.twoColRow('Position:', seq_id  + ":" + start  + ".." + end + " (" + strand + " strand)" ));
   rows.push(c.twoColRow('Length:', length + ' bp'));
   rows.push(c.twoColRow('SO Term:', feature.get("soTerm")));
   return c.table(rows);
 }
microsatelliteTitle = function(track, feature, featDiv) {
   var c = track.browser.config;
   var accessn = feature.get("name");
   var genbankLink = "<a target='_blank' href='http://www.ncbi.nlm.nih.gov/sites/entrez?db=unists&cmd=search&term=" + accessn + "'>" + accessn + "</a>";
   var start = feature.get("startm");
   var end = feature.get("end");
   var length = end - start + 1;
   var name = feature.get("name");
   var sequenceId = feature.get("sequenceid");
   container = dojo.create('div', {
      className: 'detail feature-detail feature-detail-' + track.name.replace(/\s+/g, '_').toLowerCase(),
      innerHTML: ''
   });
   var coreDetails = dojo.create('div', {
      className: 'core'
   }, container);
   var fmt = dojo.hitch(track, 'renderDetailField', coreDetails);
   coreDetails.innerHTML += '<h2 class="sectiontitle">Microsatellite</h2>';
   fmt('Name', name, feature);
   fmt('Genbank Accession', accessn, feature);
   fmt('Position', c.positionNoStrandString(track.refSeq.name, feature.get("startm"), feature.get("end")), feature);
   fmt('ePCR Product Size', length, feature);
   track._renderUnderlyingReferenceSequence(track, feature, featDiv, container);
   return container;
 }
gsnapUnifiedIntronJunctionTitle = function(track, feature, featureDiv) {
   var c = track.browser.config;
   container = dojo.create('div', {
       className: 'detail feature-detail feature-detail-' + track.name.replace(/\s+/g, '_').toLowerCase(),
            innerHTML: ''
          });
   var coreDetails = dojo.create('div', {
            className: 'core'
          }, container);
   var hitchCore = dojo.hitch(track, 'renderDetailField', coreDetails);
   coreDetails.innerHTML += '<h2 class="sectiontitle">Intron Junction Details</h2>';
   var isrpm = feature.get("isrpm");
   var score = feature.get("score");
   var intronPercent = feature.get("intronpercent");
   var matchesGeneStrand = feature.get("matchesgenestrand");
   var isReversed = feature.get("isreversed");
   var annotIntron = feature.get("annotatedintron");
   var gene_source_id = feature.get("genesourceid");
   var start = feature.get("startm");
   var end = feature.get("end");
   hitchCore('Intron Location', c.positionString(track.refSeq.name, start, end, feature.get("strand")), feature);
   hitchCore('Intron Spanning Reads (ISR)', score, feature);
   hitchCore( 'ISR per million (ISRPM)', isrpm, feature );
   if (intronPercent) {
     hitchCore("Gene assignment", gene_source_id + (annotIntron === "Yes" ? " - annotated intron" : ""), feature);
     hitchCore("% of Most Abundant Intron (MAI)", intronPercent, feature);
   }
   var endDetails = dojo.create('div', {
             className: 'end'
          }, container);
   var hitchEnd = dojo.hitch(track, 'renderDetailField', endDetails);
   var sampleRows = new Array();
   sampleRows.push(c.sixColHeaderRow("Experiment", "Sample", "Unique", "ISRPM", "ISR/Cov", "% MAI"));
   var data = {primaryKey: [{name: "intron_feature_id", value: feature.get("feature_id")}], attributes: [], tables: ["SampleInfo"]};
   c.fetchWithPost("/a/service/record-types/junction/records", data)
    .then(obj => {
       var prevExpt = "";
       obj.tables.SampleInfo.forEach(x => {
          var expName = x.exp_name;
          if(prevExpt === expName) {
            expName = "";
          }
          sampleRows.push(c.sixColRow(expName, x.sample_name, x.unique_reads, x.isrpm, x.isr_coverage_ratio, x.percent_max));
          prevExpt = x.exp_name;
          });
       hitchEnd('Sample Details', c.table(sampleRows), feature);
    });
   return container;
 }          
gsnapIntronWidthFromScore = function(feature, track) {
   var sum = feature.get("totalscore");
   if (sum <= 4096) return 2;
   if (sum <= 16000) return 3;
   return 4;
 }
gsnapIntronLineThickness = function(feature, track) {
   var sum = feature.get("totalscore");
   if (sum <= 4096) return 2;
   if (sum <= 16000) return 4;
   return 6;
 }
gsnapIntronPostHeight = function(feature, track) {
   var perc = feature.get("intronpercent");
   if (perc <= 5) return  2;
   if (perc <= 20) return  4;
   if (perc <= 60) return  6;
   if (perc <= 80) return  8;
   return 10;
 }
gsnapIntronHeightFromPercent = function(feature, track) {
   var c = track.browser.config;
   var goalHeight = c.gsnapIntronWidthFromScore(feature) * 2;
   var perc = feature.get("intronpercent");
   if (perc <= 5) return goalHeight + 2;
   if (perc <= 20) return goalHeight + 3;
   if (perc <= 60) return goalHeight + 4;
   if (perc <= 80) return goalHeight + 5;
   return goalHeight + 6;
 }
unifiedPostTranslationalModColor = function(feature, track) {
   var ontology = feature.get("modificationtype");
   if (/phosphorylation_site/i.test(ontology)) {
      return 'dodgerblue';
   } else if (/modified_L_cysteine/i.test(ontology)) {
      return 'deepskyblue';
   } else if (/iodoacetamide_derivatized_residue/i.test(ontology)) {
      return 'blueviolet';
   } else if (/modified_L_methionine/i.test(ontology)) {
      return 'steelblue';
   }
   return 'blue';
 }
unifiedPostTranslationalModTitle = function(track, feature) {
   var c = track.browser.config;
   var experiments = feature.get("experiments");
   var samples = feature.get("samples");
   var pepSeqs = feature.get("pepseqs");
   var pepNaFeatIds = feature.get("pepaafeatids");
   var mscounts = feature.get("mscounts");
   var residueLocations = feature.get("residuelocs");
   var ontologys = feature.get("ontologys");
   var aaStartMins = feature.get("aastartmins");
   var location = feature.get("end");
   var featureName = feature.get("name");
   var rows = new Array();
   var hash = {};
   var exps = experiments.split('|');
   var smpls = samples.split('|');
   var pepseqs = pepSeqs.split('|');
   var pepNaFeatIds = pepNaFeatIds.split('|');
   var mscts = mscounts.split('|');
   var onts = ontologys.split('|');
   var resLocs = residueLocations.split('|');
   var aaStartMins = aaStartMins.split('|');
   for (var i = 0; i < exps.length; i++) {
      var expt = exps[i];
      var sample = smpls[i];
      var pepSeq = pepseqs[i];
      var pepNaFeatId = pepNaFeatIds[i];
      var msct = mscts[i];
      var allAaMin = aaStartMins[i];
      var allOnt = onts[i];
      var allResidueLoc = resLocs[i];
      var resLocsArr = allResidueLoc.split(',');
      var ontArr = allOnt.split(',');
      var aaMinArr = allAaMin.split(',');
      var match = false;
      resLocsArr.forEach(function(e) {
         if (e == location) match = true;
      });
      if (match) {
         if (!hash[expt]) {
            hash[expt] = {};
         }
         if (!hash[expt][sample]) {
            hash[expt][sample] = {};
         }
         if (!hash[expt][sample][pepNaFeatId]) {
            hash[expt][sample][pepNaFeatId] = [];
         }
         hash[expt][sample][pepNaFeatId].push({
            'pepSeq': pepSeq,
            'mscount': msct,
            'residue_locations': resLocsArr,
            'ontology': ontArr,
            'aa_start': aaMinArr
         });
      }
   }
   rows.push(c.twoColRow('Residue: ', featureName));
   for (var e in hash) {
      rows.push(c.twoColRow('===========', "======================="));
      rows.push(c.twoColRow('Experiment: ', e));
      for (var s in hash[e]) {
         rows.push(c.twoColRow('Sample: ', s));
         for (var pi in hash[e][s]) {
            hash[e][s][pi].forEach(function(peps) {
               var pepSequence = peps['pepSeq'];
               var msCount = peps['mscount'];
               var residueLocations = peps['residue_locations'];
               var ontology = peps['ontology'];
               var aaStarts = peps['aa_start'];
               if (residueLocations) {
                  var offset = 1;
                  for (var i = 0; i < residueLocations.length; i++) {
                     var rl = residueLocations[i];
                     var type = ontology[i];
                     var aaStart = aaStarts[i];
                     var loc = rl - aaStart + 1 + offset;
                     if (/phosphorylation/i.test(type)) {
                        pepSequence = [pepSequence.slice(0, loc), '*', pepSequence.slice(loc)].join('');
                     }
                     if (/methionine/i.test(type)) {
                        pepSequence = [pepSequence.slice(0, loc), '#', pepSequence.slice(loc)].join('');
                     }
                     if (/cysteine/i.test(type)) {
                        pepSequence = [pepSequence.slice(0, loc), '^', pepSequence.slice(loc)].join('');
                     }
                     offset = offset + 1;
                  }
               }
               rows.push(c.twoColRow('Sequence: ', pepSequence + ' (' + msCount + ')'));
            });
         }
      }
   }
   return c.table(rows);
 }
syntenyColor = function(feature, track) {
   if (feature.get("syntype") == "span") {
      var chr = feature.get("chromosome");
      var col = feature.get("chrcolor");
      if (col) return col;
      if (feature.get("strand") == 1) return "orange";
      return "darkseagreen";
   }
   if (feature.get("type") == 'minispan') {
      if (feature.get("scale") > 1.5) {
         return "cyan";
      }
      if (feature.get("scale") < -1.5) {
         return "yellow";
      }
   }
   return feature.get("strand") == 1 ? "#000080" : "#aa3311"
 }
gsnapIntronColorFromStrandAndScore = function(feature, track) {
   var isReversed = feature.get("isreversed");
   var sum = feature.get("totalscore");
   if (isReversed == 1) {
      if (sum <= 4) return 'rgb(255,219,219)';
      if (sum <= 16) return 'rgb(255,182,182)';
      if (sum <= 64) return 'rgb(255,146,146)';
      if (sum <= 256) return 'rgb(255,109,109)';
      if (sum <= 1024) return 'rgb(255,73,73)';
      return 'rgb(255,36,36)';
   } else {
      if (sum <= 4) return 'rgb(219,219,255)';
      if (sum <= 16) return 'rgb(182,182,255)';
      if (sum <= 64) return 'rgb(146,146,255)';
      if (sum <= 256) return 'rgb(109,109,255)';
      if (sum <= 1024) return 'rgb(73,73,255)';
      return 'rgb(36,36,255)';
   }
 }
colorSegmentByScore = function(feature, variableName, glyphObject, track) {
   var score = feature.get("score");
   if (score > 60) return '#FF0000';
   if (score > 50) return '#FF8000';
   if (score > 40) return '#00FF00';
   if (score > 30) return '#0000FF';
   return '#000000';
 }
chipColor = function(feature, variableName, glyphObject, track) {
   var a = feature.get("antibody");
   var t = feature.get("compound");
   var r = feature.get("replicate");
   var g = feature.get("parasite genotype");
   var l = feature.get("parasite lifecycle stage");
   var anls = feature.get("sample_name");
   if (anls == 'H4_schizonti_smoothed (ChIP-chip)') return '#D80000';
   if (anls == 'H4_trophozoite_smoothed (ChIP-chip)') return '#006633';
   if (anls == 'H4_ring_smoothed (ChIP-chip)') return '#27408B';
   if (anls == 'H3K9ac_troph_smoothed (ChIP-chip)') return '#524818';
   if (/CenH3_H3K9me2/i.test(a)) return '#000080';
   if (/CenH3/i.test(a)) return '#B0E0E6';
   if (/Wild type/i.test(g) && (/H3K/i.test(a) || /H4K/i.test(a))) return '#0A7D8C';
   if (/sir2KO/i.test(g) && (/H3K/i.test(a) || /H4K/i.test(a))) return '#FF7C70';
   if (/H3K4me3/i.test(a) && r == 'Replicate 1') return '#00FF00';
   if (/H3K4me3/i.test(a) && r == 'Replicate 2') return '#00C896';
   if (/H3k4me1/i.test(a) && r == 'Replicate 1') return '#0033FF';
   if (/H3k4me1/i.test(a) && r == 'Replicate 2') return '#0066FF';
   if (/H3K9/i.test(a) && r == 'Replicate 1') return '#C86400';
   if (/H3K9/i.test(a) && r == 'Replicate 2') return '#FA9600';
   if (/DMSO/i.test(t)) return '#4B0082';
   if (/FR235222/i.test(t)) return '#F08080';
   if (r == 'Replicate 1') return '#00C800';
   if (r == 'Replicate 2') return '#FA9600';
   if (r == 'Replicate 3') return '#884C00';
   if (/early-log promastigotes/i.test(l)) return '#B22222';
   if (/stationary promastigotes/i.test(l)) return '#4682B4';
   if (/H3K4me3/i.test(a)) return '#00C800';
   if (/H3K9Ac/i.test(a)) return '#FA9600';
   if (/H3K9me3/i.test(a)) return '#57178F';
   if (/H3/i.test(a)) return '#E6E600';
   if (/H4K20me3/i.test(a)) return '#F00000';
   if (/SET8/i.test(a) && r == 'Replicate 1') return '#600000';
   if (/TBP1/i.test(a) && r == 'Replicate 1') return '#600000';
   if (/TBP2/i.test(a) && r == 'Replicate 1') return '#600000';
   if (/RPB9_RNA_pol_II/i.test(a) && r == 'Replicate 1') return '#600000';
   if (/SET8/i.test(a) && r == 'Replicate 2') return '#C00000';
   if (/TBP1/i.test(a) && r == 'Replicate 2') return '#C00000';
   if (/TBP2/i.test(a) && r == 'Replicate 2') return '#C00000';
   if (/RPB9_RNA_pol_II/i.test(a) && r == 'Replicate 2') return '#C00000';
   return '#B84C00';
 }
peakTitleChipSeq = function(track, feature, featureDiv) {
   var c = track.browser.config;
   var rows = new Array();
   var dataset = feature.get("data set");
   rows.push(c.twoColRow('Experiment:', dataset));
   var start = feature.get("startm");
   var end = feature.get("end");
   rows.push(c.twoColRow('Start:', start));
   rows.push(c.twoColRow('End:', end));
   var ontologyTermToDisplayName = {
      'antibody': 'Antibody',
      'parasite genotype': 'Genotype',
      'compound': 'Treatment',
      'replicate': 'Replicate',
      'parasite lifecycle stage': 'Lifecycle Stage',
      'parasite strain': 'Strain',
      'score': 'Score',
      'tag_count': 'Normalised Tag Count',
      'fold_change': 'Fold Change',
      'p_value': 'P Value'
   };
   for (var key in ontologyTermToDisplayName) {
      var value = feature.get(key);
      var displayName = ontologyTermToDisplayName[key];
      if (value) {
         rows.push(c.twoColRow(displayName + ':', value));
      }
   }
   return c.table(rows);
 }
positionAndSequence = function(track, f, featDiv) {
   container = dojo.create('div', {
      className: 'detail feature-detail feature-detail-' + track.name.replace(/\s+/g, '_').toLowerCase(),
      innerHTML: ''
   });
   track._renderCoreDetails(track, f, featDiv, container);
   track._renderUnderlyingReferenceSequence(track, f, featDiv, container);
   return container;
 }
snpBgFromIsCodingAndNonSyn = function(feature, track) {
   var isCoding = feature.get("iscoding");
   var color = '#ffe135';
   if (isCoding == 1 || /yes/i.test(isCoding)) {
      var nonSyn = feature.get("nonsyn");
      var nonsense = feature.get("nonsense");
      color = nonsense == 1 ? 'red' : nonSyn == 1 ? 'blue' : 'lightblue';
   }
   return color;
 }
snpTitle = function(track, feature, featureDiv) {
   var c = track.browser.config;
   var rows = new Array();
   var gene = feature.get("gene");
   var isCoding = feature.get("iscoding");
   var nonSyn = feature.get("nonsyn");
   var nonsense = feature.get("nonsense");
   var rend = feature.get("rend");
   var base_start = feature.get("base_start");
   zoom_level = rend - base_start;
   var position_in_CDS = feature.get("position_in_cds");
   var position_in_protein = feature.get("position_in_protein");
   var reference_strain = feature.get("reference_strain");
   var reference_aa = feature.get("reference_aa");
   var gene_strand = feature.get("gene_strand");
   var reference_na = feature.get("reference_na");
   var major_allele = feature.get("major_allele");
   var minor_allele = feature.get("minor_allele");
   var num_strains = feature.get("num_strains");
   var major_allele_freq = feature.get("major_allele_freq");
   var minor_allele_freq = feature.get("minor_allele_freq");
   var major_product = feature.get("major_product");
   var minor_product = feature.get("minor_product");
   var source_id = feature.get("source_id");
   var link_type = feature.get("type");
   var start = feature.get("startm");
   var end = feature.get("end");
   var revArray = {
      'A': 'T',
      'C': 'G',
      'T': 'A',
      'G': 'C'
   };
   var link = "<a target='_blank' href='/a/app/record/" + link_type + "/" + source_id + "'>" + source_id + "</a>";
   var type = 'Non-coding';
   var refNA = gene_strand == -1 ? revArray[reference_na] : reference_na;
   var testNA = reference_na;
   var refAAString = '';
   if (isCoding == 1 || /yes/i.test(isCoding)) {
      type = "Coding (" + (nonsense == 1 ? "nonsense)" : nonSyn == 1 ? "non-synonymous)" : "synonymous)");
      refAAString = "&nbsp;&nbsp;&nbsp;&nbsp;AA=" + reference_aa;
      minor_product = nonsense == 1 || nonSyn == 1 ? minor_product : major_product;
   } else {
      minor_product = '&nbsp';
   }
   rows.push(c.twoColRow("SNP:", link));
   rows.push(c.twoColRow("Location:", end));
   if (gene) rows.push(c.twoColRow("Gene:", gene));
   if (isCoding == 1 || /yes/i.test(isCoding)) {
      rows.push(c.twoColRow("Position&nbsp;in&nbsp;CDS", position_in_CDS));
      rows.push(c.twoColRow("Position&nbsp;in&nbsp;protein", position_in_protein));
   }
   rows.push(c.twoColRow("Type:", type));
   rows.push(c.twoColRow("Number of strains:", num_strains));
   rows.push(c.twoColRow(" ", 'NA&nbsp;&nbsp;&nbsp;' + (isCoding == 1 ? 'AA&nbsp;&nbsp;&nbsp;(frequency)' : '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(frequency)')));
   rows.push(c.twoColRow(reference_strain + "&nbsp;(reference):", "&nbsp;" + refNA + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp" + reference_aa));
   if (gene_strand == -1) major_allele = revArray[major_allele];
   if (gene_strand == -1) minor_allele = revArray[minor_allele];
   rows.push(c.twoColRow("Major Allele:", "&nbsp;" + major_allele + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + major_product + "&nbsp;&nbsp;&nbsp;&nbsp;(" + major_allele_freq + ")"));
   rows.push(c.twoColRow("Minor Allele:", "&nbsp;" + minor_allele + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + minor_product + "&nbsp;&nbsp;&nbsp;&nbsp;(" + minor_allele_freq + ")"));
   return c.table(rows);
 }
spliceSiteTitle = function(track, feature, featureDiv) {
   var c = track.browser.config;
   var rows = new Array();
   var start = feature.get("startm");
   var gene = feature.get("gene_id");
   var utr_len = feature.get("utr_length");
   if (!utr_len) {
      utr_len = "N/A (within CDS)";
   }
   var note = "The overall count is the sum of the count per million for each sample.";
   var samples = feature.get("sample_name");
   var ctpm = feature.get("count_per_mill");
   var isUniq = feature.get("is_unique");
   var mismatch = feature.get("avg_mismatches");
   var html = "<table><tr><th>Sample</th><th>Count per million</th></tr>";
   var count = 0;
   var samples_arr = samples.split(',');
   var ct_arr = ctpm.split(',');
   var arrSize = samples_arr.length;
   for (var i = 0; i < arrSize; i++) {
      html = html + "<tr><td>" + samples_arr[i] + "</td><td>" + ct_arr[i] + "</td></tr>";
      count = count + Number(ct_arr[i]);
   }
   html = html + "</table>";
   rows.push(c.twoColRow("Location:", start));
   if (gene) {
      rows.push(c.twoColRow("Gene ID:", gene))
   };
   rows.push(c.twoColRow("UTR Length:", utr_len));
   rows.push(c.twoColRow("Count:", count));
   rows.push(c.twoColRow("Note:", note));
   rows.push(c.twoColRow(" ", html));
   return c.table(rows);
 }
colorSpliceSite = function(feature, track) {
   var rows = new Array();
   var samples = feature.get("sample_name");
   var ctpm = feature.get("count_per_mill");
   var strand = feature.get("strand");
   var samples_arr = samples.split(',');
   var ct_arr = ctpm.split(',');
   var arrSize = samples_arr.length;
   var count = 0;
   for (var i = 0; i < arrSize; i++) {
      count = count + Number(ct_arr[i]);
   }
   if (strand == 1) {
      if (count < 2) return 'lightskyblue';
      if (count < 10) return 'cornflowerblue';
      if (count < 100) return 'blue';
      if (count < 1000) return 'navy';
      return 'black';
   }
   if (strand == 0) {
      if (count < 2) return '#FFCCCC';
      if (count < 10) return 'pink';
      if (count < 100) return 'orange';
      if (count < 1000) return 'tomato';
      return 'firebrick';
   }
 }
gffKirkland = function(track, feature, featureDiv) {
   var c = track.browser.config;
   var rows = new Array();
   var motif = feature.get("target");
   motif = motif.replace(/Motif:|,|[0-9*]/gi, "");
   rows.push(c.twoColRow('Motif: ', motif));
   rows.push(c.twoColRow('Score: ', feature.get("score")));
   return c.table(rows);
 }
repeatFamily = function(track, feature, featureDiv) {
   var c = track.browser.config;
   var rows = new Array();
   rows.push(c.twoColRow('Family:', feature.get("family")));
   rows.push(c.twoColRow('Position:', c.positionNoStrandString(track.refSeq.name, feature.get("startm"), feature.get("end"))));
   return c.table(rows);
 }
transposon = function(track, feature, featureDiv) {
   var c = track.browser.config;
   var rows = new Array();
   rows.push(c.twoColRow('Transposable Element:', feature.get("name")));
   rows.push(c.twoColRow('Name:', feature.get("te_name")));
   rows.push(c.twoColRow('Size:', feature.get("alignlength")));
   rows.push(c.twoColRow('Position:', c.positionNoStrandString(track.refSeq.name, feature.get("startm"), feature.get("end"))));
   return c.table(rows);
 }
bindingSiteTitle = function(track, feature, featureDiv) {
   var c = track.browser.config;
   var name = feature.get("name");
   var start = feature.get("startm");
   var end = feature.get("end");
   var strand = feature.get("strand");
   var score = feature.get("score");
   var sequence = feature.get("sequence");
   if (strand === '+1') {
      strand = 'FORWARD';
   } else {
      strand = 'REVERSE';
   }
   var link = "<a target='_blank' href='/a/images/pf_tfbs/" + name + ".png'><img src='/a/images/pf_tfbs/" + name + ".png'  height='140' width='224' align=left/></a>";
   var rows = new Array();
   rows.push(c.twoColRow('Name:', name));
   rows.push(c.twoColRow('Start:', start));
   rows.push(c.twoColRow('End:', end));
   rows.push(c.twoColRow('Strand:', strand));
   rows.push(c.twoColRow('Score:', score));
   rows.push(c.twoColRow('Sequence:', sequence));
   rows.push(c.twoColRow('Click logo for larger image:', link));
   return c.table(rows);
 }
colorForBindingSitesByPvalue = function(feature, track) {
   var strand = feature.get("strand");
   var pvalue = feature.get("score");
   if (strand == '+1') {
      if (pvalue <= 1e-5) return 'mediumblue';
      if (pvalue <= 5e-5) return 'royalblue';
      if (pvalue <= 1e-4) return 'dodgerblue';
      return 'skyblue';
   } else {
      if (pvalue <= 1e-5) return 'darkred';
      if (pvalue <= 5e-5) return 'crimson';
      if (pvalue <= 1e-4) return 'red';
      return 'tomato';
   }
 }
changeScaffoldType = function(feature) {
   return 'JBrowse/View/FeatureGlyph/Segments';
 }
scaffoldColor = function(feature, track) {
   var orient = feature.get("strand");
   if (orient == 1) {
      return "orange";
   }
   if (orient == -1) {
      return "darkseagreen";
   }
   return "red";
 }
scaffoldHeight = function(feature, track) {
   if (feature.get("type") == 'gap' || feature.get("type") == 'sgap') {
      return 25;
   }
   return 1;
 }
scaffoldDetails = function(track, feature) {
   var c = track.browser.config;
   var sourceId = feature.get("name");
   var ncbiLink = '<a target="_blank" href="https://www.ncbi.nlm.nih.gov/nuccore/' + sourceId + '">NCBI link</a>';
   var rows = new Array();
   if (feature.get("type") == 'sgap' || feature.get("type") == 'gap') {
      feature.get("subfeatures").forEach(function(element) {
         rows.push(c.twoColRow('Gap Position:', c.positionNoStrandString(track.refSeq.name, element.get("startm"), element.get("end"))));
      });
   } else {
      rows.push(c.twoColRow('Name:', sourceId));
      rows.push(c.twoColRow('Position:', c.positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand"))));
     rows.push(c.twoColRow('Link:', ncbiLink));
   }
   return c.table(rows);
 }
genericEndFeatureTitle = function(track, feature, trackType) {
   var c = track.browser.config;
   var start = feature.get("startm");
   var end = feature.get("end");
   var length = end - start + 1;
   var cname = feature.get("name");
   var rows = new Array();
   rows.push(c.twoColRow("End-Sequenced " + trackType + ":", cname));
   rows.push(c.twoColRow('Clone Size:', length));
   rows.push(c.twoColRow('Clone Location:', start + ".." + end));
   rows.push(c.twoColRow('<hr>', '<hr>'));
   var count = 0;
   feature.get("subfeatures").forEach(function(element) {
      count = count + 1;
      var name = element.get("name");
      var start = element.get("startm");
      var end = element.get("end");
      var pct = element.get("pct");
      var score = element.get("score");
      rows.push(c.twoColRow(trackType + ' End:', name));
      rows.push(c.twoColRow('Location:', start + ".." + end));
      rows.push(c.twoColRow('Percent Identity:', pct + " %"));
      rows.push(c.twoColRow('Score:', score));
      if (count % 2) rows.push(c.twoColRow('<hr>', '<hr>'));
   });
   return c.table(rows);
 }
arrayElementTitle = function(track, feature, type) {
   var c = track.browser.config;
   var rows = new Array();
   rows.push(c.twoColRow("Name:", feature.get("sourceid")));
   rows.push(c.twoColRow("Probe Type:", type));
   rows.push(c.twoColRow("Position:", c.positionNoStrandString(track.refSeq.name, feature.get("startm"), feature.get("end"))));
   return c.table(rows);
 }
gene_title_gff = function(tip, sourceId, fiveUtr, cdss, threeUtr, totScore, fiveSample, fiveScore, threeSample, threeScore, track) {
   var c = track.browser.config;
   var rows = new Array();
   if (sourceId != null) {
      rows.push(c.twoColRow('ID:', sourceId));
   };
   if (totScore != null && totScore != 'NaN') {
      rows.push(c.twoColRow('Score:', totScore));
   };
   if (fiveUtr != null && fiveUtr != '') {
      rows.push(c.twoColRowVAlign('5\' UTR:', fiveUtr, 'top'));
   }
   if (cdss != null) {
      rows.push(c.twoColRowVAlign('CDS:', cdss, 'top'));
   }
   if (threeUtr != null && threeUtr != '') {
      rows.push(c.twoColRowVAlign('3\' UTR:', threeUtr, 'top'));
   }
   if (fiveSample != null) {
      rows.push(c.twoColRow('5\' UTR Samples:', fiveSample));
   };
   if (fiveScore != null) {
      rows.push(c.twoColRow('5\' UTR Scores:', fiveScore));
   };
   if (threeSample != null) {
      rows.push(c.twoColRow('3\' UTR Samples:', threeSample));
   };
   if (threeScore != null) {
      rows.push(c.twoColRow('3\' UTR Scores:', threeScore));
   };
   return c.table(rows);
 }
gffGeneFeatureTitle = function(track, feature) {
   var c = track.browser.config;
   var sourceId = feature.get("name");
   var strand = feature.get("strand");
   var model = c.orientAndGetUtrsAndCDS(strand, feature.get("subfeatures"), track);
   var five_sample = feature.get("fiveutr_sample");
   var five_score = feature.get("fiveutr_score");
   var three_sample = feature.get("threeutr_sample");
   var three_score = feature.get("threeutr_score");
   var totScore = feature.get("score");
   return c.gene_title_gff(this, sourceId, model[0].join("<br>"), model[1].join("<br>"), model[2].join("<br>"), totScore, five_sample, five_score, three_sample, three_score, track);
 }
orientAndGetUtrsAndCDSnew = function(strand, feature, track) {
   var exons = feature.get("subfeatures");
   var c = track.browser.config;
   var utr = exons.filter(function(sf) {
      return sf.get("type") === "three_prime_UTR" || sf.get("type") === "five_prime_UTR";
   });
   var cdsOrExons = exons.filter(function(sf) {
      if (feature.get("type") == 'mRNA'){
        return sf.get("type") === "CDS";
      } else {
        return sf.get("type") === "exon";
      }
   });
   var ret = new Array(3);
   utr = utr.sort(function(a,b){return a.get("start") - b.get("start")});
   cdsOrExons = cdsOrExons.sort(function(a,b){return a.get("start") - b.get("start")});
   if (strand == '-1') {
      utr.reverse();
      cdsOrExons.reverse();
      ret[0] = c.getFiveUtrNew(strand, utr, cdsOrExons[0].get("end")).map(x => ('complement(' + x.get("end") + '..' + (x.get("start")+1) + ')'));
      ret[1] = cdsOrExons.map(x => ('complement(' + x.get("end") + '..' + (x.get("start")+1) + ')'));
      ret[2] = c.getThreeUtrNew(strand, utr, cdsOrExons[cdsOrExons.length - 1].get("start")+1).map(x => ('complement(' + x.get("end") + '..' + (x.get("start")+1) + ')'));
   } else {
      ret[0] = c.getFiveUtrNew(strand, utr, cdsOrExons[0].get("start")+1).map(x => ((x.get("start")+1) + ".." + x.get("end")));
      ret[1] = cdsOrExons.map(x => ((x.get("start")+1) + ".." + x.get("end")));
      ret[2] = c.getThreeUtrNew(strand, utr, cdsOrExons[cdsOrExons.length - 1].get("end")).map(x => ((x.get("start")+1) + ".." + x.get("end")));
   }
   return (ret);
 }
orientAndGetUtrsAndCDS = function(strand, exons, track) {
   var c = track.browser.config;
   var utr = exons.filter(function(sf) {
      return sf.get("type") === "three_prime_UTR" || sf.get("type") === "five_prime_UTR";
   });
   var cdsOrExons = exons.filter(function(sf) {
      return sf.get("type") === "CDS" || sf.get("type") === "nc_exon";
   });
   var ret = new Array(3);
   utr = utr.sort(function(a,b){return a.get("start") - b.get("start")});
   cdsOrExons = cdsOrExons.sort(function(a,b){return a.get("start") - b.get("start")});
   if (strand == '-1') {
      utr.reverse();
      cdsOrExons.reverse();
      ret[0] = c.getFiveUtr(strand, utr, cdsOrExons[0].get("end")).map(x => ('complement(' + x.get("end") + '..' + x.get("startm") + ')'));
      ret[1] = cdsOrExons.map(x => ('complement(' + x.get("end") + '..' + x.get("startm") + ')'));
      ret[2] = c.getThreeUtr(strand, utr, cdsOrExons[cdsOrExons.length - 1].get("startm")).map(x => ('complement(' + x.get("end") + '..' + x.get("startm") + ')'));
   } else {
      ret[0] = c.getFiveUtr(strand, utr, cdsOrExons[0].get("startm")).map(x => (x.get("startm") + ".." + x.get("end")));
      ret[1] = cdsOrExons.map(x => (x.get("startm") + ".." + x.get("end")));
      ret[2] = c.getThreeUtr(strand, utr, cdsOrExons[cdsOrExons.length - 1].get("end")).map(x => (x.get("startm") + ".." + x.get("end")));
   }
   return (ret);
 }
getFiveUtrNew = function(strand, utr, cdsStart) {
   var five = new Array();
   if (strand == '-1') {
      five = utr.filter(function(sf) {
         return sf.get("start") >= cdsStart;
      });
   } else {
      five = utr.filter(function(sf) {
         return sf.get("end") <= cdsStart;
      });
   }
   return (five);
 }
getThreeUtrNew = function(strand, utr, cdsEnd) {
   var three = new Array();
   if (strand == '-1') {
      three = utr.filter(function(sf) {
         return sf.get("end") <= cdsEnd;
      });
   } else {
      three = utr.filter(function(sf) {
         return sf.get("start") >= cdsEnd;
      });
   }
   return (three);
 }
getFiveUtr = function(strand, utr, cdsStart) {
   var five = new Array();
   if (strand == '-1') {
      five = utr.filter(function(sf) {
         return sf.get("startm") >= cdsStart;
      });
   } else {
      five = utr.filter(function(sf) {
         return sf.get("end") <= cdsStart;
      });
   }
   return (five);
 }
getThreeUtr = function(strand, utr, cdsEnd) {
   var three = new Array();
   if (strand == '-1') {
      three = utr.filter(function(sf) {
         return sf.get("end") <= cdsEnd;
      });
   } else {
      three = utr.filter(function(sf) {
         return sf.get("startm") >= cdsEnd;
      });
   }
   return (three);
 }
haplotypeColor = function(feature, track) {
   boundary = feature.get("boundary");
   if (boundary == 'Liberal') {
      return 'darkseagreen';
   }
   return 'darkgreen';
 }
haplotypeTitle = function(track, feature, featureDiv) {
   var c = track.browser.config;
   var accessn = feature.get("name");
   var start = feature.get("startm");
   var end = feature.get("end");
   var length = end - start + 1;
   var boundary = feature.get("boundary");
   var name = feature.get("name");
   var start_max = feature.get("start_max");
   var start_min = feature.get("start_min");
   var end_min = feature.get("end_min");
   var end_max = feature.get("end_max");
   var sequenceId = feature.get("sequenceid");
   var libContlink = "<a target='_blank' href='/a/showQuestion.do?questionFullName=GeneQuestions.GenesByLocation&value%28sequenceId%29=" + sequenceId + "&value%28organism%29=Plasmodium+falciparum&value%28end_point%29=" + end_max + "&value%28start_point%29=" + start_min + "&weight=10'>Contained Genes</a>";
   var consrvContlink = "<a target='_blank' href='/a/showQuestion.do?questionFullName=GeneQuestions.GenesByLocation&value%28sequenceId%29=" + sequenceId + "&value%28organism%29=Plasmodium+falciparum&value%28end_point%29=" + end_min + "&value%28start_point%29=" + start_max + "&weight=10'>Contained Genes</a>";
   var libAssoclink = "<a target='_blank' href='/a/showQuestion.do?questionFullName=GeneQuestions.GenesByEQTL_Segments&value%28lod_score%29=1.5&value%28end_point_segment%29=" + end_max + "&value%28pf_seqid%29=" + sequenceId + "&value%28liberal_conservative%29=Liberal+Locations&value%28start_point%29=" + start_min + "&weight=10'>Associated Genes</a>";
   var consrvAssoclink = "<a target='_blank' href='/a/showQuestion.do?questionFullName=GeneQuestions.GenesByEQTL_Segments&value%28lod_score%29=1.5&value%28end_point_segment%29=" + end_min + "&value%28pf_seqid%29=" + sequenceId + "&value%28liberal_conservative%29=Conservative+Locations&value%28start_point%29=" + start_max + "&weight=10'>Associated Genes</a>";
   var rows = new Array();
   rows.push(c.twoColRow('Name (Centimorgan value appended):', name));
   rows.push(c.twoColRow('Sequence Id:', sequenceId));
   rows.push(c.twoColRow('Liberal Start-End:', start_min + ".." + end_max + "  (" + libAssoclink + ", " + libContlink + ")"));
   rows.push(c.twoColRow('Conservative Start-End:', start_max + ".." + end_min + "   (" + consrvAssoclink + ", " + consrvContlink + ")"));
   rows.push(c.twoColRow('Liberal Length:', Math.abs(end_max - start_min)));
   rows.push(c.twoColRow('Conservative Length:', Math.abs(end_min - start_max)));
   return c.table(rows);
 }
syntenyTitle = function(track, feature, featureDiv) {
   var c = track.browser.config;
   var syntype = feature.get("syntype");
   if (syntype == 'span') {
      return c.synSpanTitle(track, feature);
   } else {
      return c.synGeneTitle(track, feature);
   }
 }
synGeneTitle = function(track, feature) {
   var c = track.browser.config;
   var sourceId = feature.get("name");
   var taxon = feature.get("taxon");
   var orgAbbrev = feature.get("orgabbrev");
   var desc = feature.get("note");
   var soTerm = feature.get("soterm");
   var orthomclName = feature.get("orthomcl_name");
   var isPseudo = feature.get("ispseudo");
   var isPseudoString = isPseudo == 1 ? "Pseudogenic " : "";
   soTerm = soTerm.replace(/\_/g, ' ').replace(/\b(\w)/g, function(x) {
      return x.toUpperCase();
   }) + isPseudoString;
   var seqId = feature.get("contig");
   var start = Number(feature.get("genestart"));
   var end = Number(feature.get("geneend"));
   var window = 500;
   var linkStart = start - window;
   var linkStop = end + window;
   var trunc = feature.get("truncated");
   var truncString = "";
   if (trunc) truncString = " (truncated by syntenic region to " + trunc + ")";
   var location = seqId + ": " + start + " - " + end + truncString;
   var linkPosition = seqId + ":" + linkStart + ".." + linkStop;
   var highlightPosition = seqId + ":" + start + ".." + end;
   var baseRecordUrl = "/a/app/record";
   var dataRoot = c.dataRoot;
   var baseUrl = "/a/app/jbrowse";
   baseUrl = baseUrl.replace(/\/$/, '');
   var recordLink = '<a target="_blank" href="' + baseRecordUrl + '/gene/' + sourceId + '">Gene Page</a>';
   var gbLink = "<a target='_blank' href='" + baseUrl + "?loc=" + linkPosition + "&data=/a/service/jbrowse/tracks/" + orgAbbrev + "&tracks=gene" + "&highlight=" + highlightPosition + "'>JBrowse</a>";
   var rows = new Array();
   rows.push(c.twoColRow('Gene:', sourceId));
   rows.push(c.twoColRow('Species:', taxon));
   rows.push(c.twoColRow('Gene Type:', soTerm));
   rows.push(c.twoColRow('Description:', desc));
   rows.push(c.twoColRow('Location:', location));
   rows.push(c.twoColRow('Links:', gbLink + ' | ' + recordLink));
   if (soTerm == 'Protein Coding') {
      rows.push(c.twoColRow('OrthoMCL', orthomclName));
   }
   return c.table(rows);
 }
synSpanTitle = function(track, feature) {
   var c = track.browser.config;
   var chr = track.refSeq.name;
   var strand = feature.get("strand") == 1 ? "no" : "yes";
   var refStart = feature.get("refstart");
   var refEnd = feature.get("refend");
   var refLength = refEnd - refStart;
   var synStart = feature.get("synstart");
   var synEnd = feature.get("synend");
   var synLength = synEnd - synStart;
   var contigLength = feature.get("contiglength");
   var refContigLength = feature.get("refcontiglength");
   var contigSourceId = feature.get("contig");
   var chromosome = feature.get("chromosome");
   var taxon = feature.get("taxon");
   var isRef = (chr == contigSourceId) ? 1 : 0;
   var rows = new Array();
   if (chromosome) rows.push(c.twoColRow('Chromosome:', chromosome));
   rows.push(c.twoColRow('Species:', taxon));
   if (!isRef) {
      rows.push(c.twoColRow('Syntenic Contig:', contigSourceId));
      rows.push(c.twoColRow('Ref location:', refStart + "&nbsp;-&nbsp;" + refEnd + " (" + refLength + "&nbsp;bp)"));
      rows.push(c.twoColRow('Syn location:', synStart + "&nbsp;-&nbsp;" + synEnd + " (" + synLength + "&nbsp;bp)"));
      rows.push(c.twoColRow('Reversed:', strand));
      rows.push(c.twoColRow('Total Syn Contig Length:', contigLength));
      rows.push(c.twoColRow('Total Ref Contig Length:', refContigLength));
   } else {
      rows.push(c.twoColRow('Contig:', contigSourceId));
      rows.push(c.twoColRow('Location:', refStart + "&nbsp;-&nbsp;" + refEnd + " (" + refLength + "&nbsp;bp)"));
      rows.push(c.twoColRow('Total Contig Length:', refContigLength));
   }
   return c.table(rows);
 }
gffTssChabbert = function(track, feature) {
   var c = track.browser.config;
   var rows = new Array();
   var start = feature.get("startm");
   var end = feature.get("end");
   var assignedFeat = feature.get("assignedfeat");
   var assignedFeature = feature.get("assignedfeature");
   if (assignedFeat == "NewTranscript" || assignedFeature == "NewTranscript") {
      rows.push(c.twoColRow('Assigned Feature:', "New Transcript"));
   } else {
      var gene = assignedFeature ? assignedFeature : assignedFeat;
      var link = "<a target='_blank' href='/a/app/record/gene/" + gene + "'>" + gene + "</a>";
      rows.push(c.twoColRow('Assigned Feature:', link));
   }
   rows.push(c.twoColRow('Start position:',start));
   rows.push(c.twoColRow('End position:',end));
   return c.table(rows);
 }
sequenceTitle = function(track, feature) {
   var c = track.browser.config;
   var rows = new Array();
   var sourceId = feature.get("name");
   rows.push(c.twoColRow('ID:', sourceId));
   rows.push(c.twoColRow("Position:", c.positionNoStrandString(track.refSeq.name, feature.get("startm"), feature.get("end"))));
   return c.table(rows);
 }
processedTranscriptDetails = function(track, feature, featureDiv) {
    var c = track.browser.config;
    var projectId = feature.get("projectid");                           
    var sourceId = feature.get("name");
    var chr = track.refSeq.name;
    var strand = feature.get("strand");
    var model = c.orientAndGetUtrsAndCDS(strand,feature.get("subfeatures"),track);
    var gene_id = feature.get("geneid");
    var soTerm = feature.get("soterm");
    var isPseudo = feature.get("ispseudo");
    var aaSeqId = feature.get("aaseqid");
    var orthomclName = feature.get("orthomcl_name");
    if(orthomclName === sourceId) orthomclName = "";
    soTerm = soTerm.replace(/_/g, " ");
    soTerm = c.titleCase(soTerm);
    if(isPseudo === 1) soTerm = soTerm + " (pseudogene)";
    var product = feature.get("product") ? feature.get("product") : feature.get("description");
    var taxon = feature.get("taxon");
    var window = 500;
    var linkStart = feature.get("startm") - window;
    var linkStop = feature.get("end") + window;
    var seqId = feature.get("contig");
    var loc = seqId + ":" + linkStart + ".." + linkStop;
    var baseRecordUrl = "/a/app/record";
    var dataRoot = c.dataRoot;
    var baseUrl = "/a/app/jbrowse";
    return c.gene_title(this, projectId, sourceId, chr, model[1].join("<br>"), soTerm, product, taxon, model[0].join("<br>"), model[2].join("<br>"), loc, orthomclName, gene_id, dataRoot, baseUrl, baseRecordUrl, aaSeqId, feature, track);
 }

gene_title = function(tip, projectId, sourceId, chr, cds, soTerm, product, taxon, utrFive, utrThree, position, orthomcl, geneId, dataRoot, baseUrl, baseRecordUrl, aaseqid, feature, track) {
   var c = track.browser.config;
   var ignore_gene_alias = 0;
   if (projectId == 'ToxoDB') {
      ignore_gene_alias = 1;
   }
   var orgAbbrev = feature.get("orgabbrev");
   var dataRootRegex = /\/jbrowse\/.+Tracks\//;
   dataRoot = dataRoot.replace(dataRootRegex, "/jbrowse/tracks/");
   var cdsLink = "<a target='_blank' href='/cgi-bin/geneSrt?project_id=" + projectId + "&ids=" + sourceId + "&ignore_gene_alias=" + ignore_gene_alias + "&type=CDS&upstreamAnchor=Start&upstreamOffset=0&downstreamAnchor=End&downstreamOffset=0&go=Get+Sequences' target='_blank'>CDS</a>";
   var proteinLink = "<a target='_blank' href='/cgi-bin/geneSrt?project_id=" + projectId + "&ids=" + sourceId + "&ignore_gene_alias=" + ignore_gene_alias + "&type=protein&upstreamAnchor=Start&upstreamOffset=0&downstreamAnchor=End&downstreamOffset=0&endAnchor3=End&go=Get+Sequences' target='_blank'>protein</a>";
   var recordLink = '<a target="_blank" href="' + baseRecordUrl + '/gene/' + geneId + '">Gene Page</a>';
   baseUrl = baseUrl.replace(/\/$/, '');
   var gbLink = "<a target='_blank' href='" + baseUrl + "?loc=" + position + "&data=/a/service/jbrowse/tracks/" + orgAbbrev + "&tracks=gene" + "'>JBrowse</a>";
   var orthomclLink = "<a target='_blank' href='https://orthomcl.org/orthomcl/app/record/group/" + orthomcl + "'>" + orthomcl + "</a>";
   var rows = new Array();
   if (taxon != null) {
      rows.push(c.twoColRow('Species:', taxon))
   };
   if (sourceId != null) {
      rows.push(c.twoColRow('ID:', sourceId));
   };
   if (geneId != null) {
      rows.push(c.twoColRow('Gene ID:', geneId));
   };
   if (soTerm != null) {
      rows.push(c.twoColRow('Gene Type:', soTerm));
   };
   if (product != null) {
      rows.push(c.twoColRow('Description:', product));
   };
   var exon_or_cds = 'Exon:';
   if (aaseqid) {
      exon_or_cds = 'CDS:';
   }
   if (utrFive != null && utrFive != '') {
      rows.push(c.twoColRowVAlign('5\' UTR:', utrFive, 'top'));
   }
   if (cds != null) {
      rows.push(c.twoColRowVAlign(exon_or_cds, cds, 'top'));
   }
   if (utrThree != null && utrThree != '') {
      rows.push(c.twoColRowVAlign('3\' UTR:', utrThree, 'top'));
   }
   if (aaseqid) {
      if (orthomcl.startsWith("OG")) {
         rows.push(c.twoColRow('OrthoMCL', orthomclLink));
      }
   }
   if (geneId != null) {
      rows.push(c.twoColRow('VEuPathDB:', recordLink));
   };
   return c.table(rows);
 }

processedTranscriptModify = function(track, feature, div) {
   var color = feature.get("strand") == 1 ? "#000080" : "#aa3311" ;
   div.style.borderRightColor = color;
   div.style.borderLeftColor = color;
   div.style.backgroundColor = color;
 }
pbrowseLegendFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
    return c.pbrowseLegend(track, feature, featDiv);
 }
pbrowseLegend = function(track, feature, featDiv) {
   var c = track.browser.config;
   var url;
   url = "http://www.ebi.ac.uk/interpro/DisplayIproEntry?ac=";
   return url;
 }
fetchWithPost = function(url = '', data = {}) {
  return fetch(url, {
    method: 'POST', 
    cache: 'no-cache', 
    headers: {
      'Content-Type': 'application/json'
    },
    referrerPolicy: 'no-referrer', 
    body: JSON.stringify(data) 
  }).then(res => res.json());
 }
apolloProductsFxn = function(track, feature, featureDiv) {
    var c = track.browser.config;
    var apolloProduct = feature.get("apolloproduct");
    var featureName = track.getFeatureLabel(feature);
    if (typeof apolloProduct !== 'undefined'){
    return featureName + ", " + apolloProduct;
    }
    else{
    return featureName;
    }
 }
longReadRnaSeqGffDetails = function(track, feature, featureDiv) {
   var c = track.browser.config;
   container = dojo.create('div', {
       className: 'detail feature-detail feature-detail-' + track.name.replace(/\s+/g, '_').toLowerCase(),
            innerHTML: ''
          });
   var coreDetails = dojo.create('div', {
            className: 'core'
          }, container);
   var fmt = dojo.hitch(track, 'renderDetailField', coreDetails);
   coreDetails.innerHTML += '<h2 class="sectiontitle">Long Read RNASeq Details</h2>';
   fmt('Transcript ID', feature.get("id"), feature);
   fmt('Transcript Status', feature.get("transcript_status"), feature);
   fmt('Position', c.positionString(track.refSeq.name, feature.get("start"), feature.get("end"), feature.get("strand")), feature);
   var subfeatures = feature.get('subfeatures');
   var field_container = dojo.create('div', { className: 'field_container subfeatures' }, container );
   dojo.create( 'h2', { className: 'field subfeatures', innerHTML: 'Transcript Details' }, field_container );
   var subfeaturesContainer = dojo.create( 'div', { className: 'value subfeatures' }, field_container );
   subfeatures.sort(function(a,b){return a.get("exon_number") - b.get("exon_number")}).forEach(function(subfeature) {
                    c.longReadExons(
                        track,
                        subfeature,
                        null,
                         dojo.create('div', {
                                        className: 'detail feature-detail subfeature-detail feature-detail-'+subfeature.get("id")+' subfeature-detail-'+subfeature.get("id"),
                                        innerHTML: ''
                                    }, subfeaturesContainer )
                    );
            },track);
  return container;
 }
longReadExons = function(track, feature, featureDiv, coreDetails) {
    var c = track.browser.config;
    var fmt = dojo.hitch(track, 'renderDetailField', coreDetails);
    fmt('Exon Number', feature.get("exon_number"), feature);
    fmt('Exon Status', feature.get("exon_status"), feature);
    fmt('Position', c.positionString(track.refSeq.name, feature.get("start"), feature.get("end"), feature.get("strand")), feature);
 }


antismashLabel = function(feature) {
   if(feature.get("type") === "cand_cluster") {
     return "Candidate Cluster:  " + feature.get("kind");
   }
   if(feature.get("type") === "region") {
     return "Region:  " + feature.get("region_number");
   }
   if(feature.get("type") === "protocluster") {
     return "Product:  " + feature.get("product");
   }
   return feature.get("gene_kind");
 }
antismashColor = function( feature, variableName, glyphObject, track ) {
   if(feature.get("type") === "cand_cluster") {
     return "#8680cc";
   }
   if(feature.get("type") === "region") {
     return "#665511";
   }
   if(feature.get("type") === "protocluster" || feature.get("type") === "proto_core") {
     if(feature.get("product") === "T1PKS") {
       return 'sandybrown';
     }
     if(feature.get("product") === "NRPS" || feature.get("product") === "NRPS-like") {
       return 'seagreen';
     }
     if(feature.get("product") === "terpene" || feature.get("product") === "betalactone") {
       return 'purple';
     }
     if(feature.get("product") === "indole") {
       return 'peachpuff';
     }
     if(feature.get("product") === "fungal-RiPP-like") {
       return 'royalblue';
     }
   }
   if(feature.get("type") === "CDS") {
     geneFeature = feature.parent().parent();
     if(geneFeature.get("gene_kind") === "biosynthetic") {
       return "#810e15";
     }
     if(geneFeature.get("gene_kind") === "biosynthetic-additional") {
       return "#f16d75";
     }
     if(geneFeature.get("gene_kind") === "transport") {
       return "cornflowerblue";
     }
     return "gray";
   }
   return "goldenrod";
 }

