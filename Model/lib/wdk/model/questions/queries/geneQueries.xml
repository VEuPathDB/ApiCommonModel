<?xml version="1.0" encoding="utf-8"?>
<wdkModel>

  <querySet name="GeneId" queryType="id" isCacheable="true">

    <postCacheUpdateSql excludeProjects="UniDB">
      <sql>
        <![CDATA[
          INSERT INTO ##WDK_CACHE_TABLE## -- per-queryset version
                     (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
          WITH MATCHES AS (
            SELECT *
            FROM ##WDK_CACHE_TABLE##
            WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
          ), row_offset AS (SELECT max(wdk_row_id) as the_max from matches)
          , mismatches AS (
              SELECT source_id, gene_source_id, project_id
              FROM apidbTuning.transcriptAttributes
              WHERE gene_source_id in (SELECT gene_source_id FROM matches)
            EXCEPT
              SELECT source_id, gene_source_id, project_id
              FROM matches
          )
          SELECT ##WDK_CACHE_INSTANCE_ID##,
                row_number() OVER () + the_max, 0, source_id, gene_source_id, project_id, 'n'
          FROM row_offset, mismatches
        ]]>
      </sql>
    </postCacheUpdateSql>

    <postCacheUpdateSql includeProjects="UniDB">
      <sql>
        <![CDATA[
          INSERT INTO ##WDK_CACHE_TABLE## -- per-queryset version
                     (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result)
          WITH MATCHES AS (
            select *
            from ##WDK_CACHE_TABLE##
            where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
          ), row_offset AS (select max(wdk_row_id) as the_max from matches)
          , mismatches AS (
              select source_id, gene_source_id
              from apidbTuning.transcriptAttributes
              where gene_source_id in (select gene_source_id from matches)
            except
              select source_id, gene_source_id
              from matches
          )
          SELECT ##WDK_CACHE_INSTANCE_ID##,
                row_number() OVER () + the_max, 0, source_id, gene_source_id, 'N'
          FROM row_offset, mismatches
        ]]>
      </sql>
    </postCacheUpdateSql>

    <!-- notes:

     * tmhmm ws needs to use new tm_max/min params

     * motif search new param names:
       - motif_organism
       - motif_expression

     * text search needs a clean up.  all four sites have differences.

     * assuming all sites have pathway info, which we should be getting from pathtools.

     * ortholog pattern query: lose api-specific "internal" params.  (why do we need these?)

     * does the GeneFeature table have an attribute we can use to mark annotated genes?  this
       will allow us to skip the join to GeneAttributes (so toxo can dodge gene predictions)

     * toxo has to use the GeneId table

    -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- temporary question for modified annotation -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- the workshop (re) annotations have become the official annotations and this section is obsolete

      <sqlQuery name="GenesWithModifiedAnnotation" includeProjects="PlasmoDB,ToxoDB">
          <paramRef ref="geneParams.plasmo_annot_status"/>
          <paramRef ref="geneParams.plasmo_new_product"/>
          <paramRef ref="geneParams.plasmo_new_model"/>
          <paramRef ref="geneParams.plasmo_new_go"/>
          <paramRef ref="geneParams.plasmo_new_ec"/>
          <paramRef ref="geneParams.plasmo_snapshot_changed"/>
          <column name="source_id"/>
          <column name="project_id"/>
          <column name="annot_status"/>
          <column name="new_product_desc"/>
         <sql>
               <![CDATA[
              SELECT DISTINCT na.source_id, '@PROJECT_ID@' as project_id,
                na.status as annot_status, na.product as new_product_desc
              FROM apidb.trackNewAnnotation na
              where na.new_product in ($$plasmo_new_product$$)
              and na.new_go in ($$plasmo_new_go$$)
              and na.new_ec in ($$plasmo_new_ec$$)
              and na.new_protein in ($$plasmo_new_model$$)
              and na.status in ($$plasmo_annot_status$$)
              and na.snapshot_changed in ($$plasmo_snapshot_changed$$)
             ]]>
         </sql>
      </sqlQuery>
  -->

    <!-- for testing purposes -->
    <sqlQuery name="GenesByUserDatasetGeneList" excludeProjects="EuPathDB">
      <paramRef ref="geneParams.geneListUserDataset"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="project_id"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT(source_id), t.gene_source_id, t.project_id, 'Y' as matched_result
          FROM @VDI_DATASETS_SCHEMA@.UD_GeneId g, apidbtuning.transcriptattributes t
          WHERE (g.gene_source_id = t.gene_source_id OR g.gene_source_id = t.source_id)
            AND g.user_dataset_id = '$$geneListUserDataset$$'
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Query for AllGenes Question (NEEDED for SiteSearch tests) -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="AllGenes">
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT t.source_id, t.gene_source_id, t.project_id, 'Y' as matched_result
          FROM apidbtuning.transcriptattributes t
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Question for GenesByLOPIT -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="GenesByLopit" includeProjects="ToxoDB,TriTrypDB,UniDB">
        <paramRef ref="organismParams.organismWithLopitData"/>
      <paramRef ref="geneParams.lopit_method"/>
      <paramRef ref="geneParams.lopit_filter"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <sql>
        <![CDATA[
          SELECT t.source_id, t.gene_source_id, t.project_id, 'Y' as matched_result
          FROM apidbtuning.transcriptattributes t
          WHERE t.gene_source_id in ($$lopit_filter$$)
        ]]>
      </sql>
    </sqlQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- EDA Study Filtering -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesByEdaSubset" processName="org.apidb.apicomplexa.wsfplugin.eda.GeneEdaSubsetPlugin">
      <paramRef ref="geneParams.eda_dataset_id"/>
      <paramRef ref="geneParams.eda_analysis_spec"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="project_id" width="20" wsName="project_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Question for GenesByMetaCycle -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByMetaCycle" includeProjects="FungiDB,TriTrypDB,VectorBase,UniDB">
      <paramRef ref="geneParams.metacycle_study_generic"/>
      <paramRef ref="geneParams.metacycle_protocol"/>
      <paramRef ref="geneParams.metacycle_period"/>
      <paramRef ref="geneParams.metacycle_amplitude"/>
      <paramRef ref="geneParams.metacycle_pvalue"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="matched_result"/>
      <column name="period"/>
      <column name="amplitude"/>
      <column name="pvalue"/>
      <column name="arser_pvalue"/>
      <column name="jtk_pvalue"/>
      <sql>
        <![CDATA[
            SELECT table1.*, table1.pvalue AS arser_pvalue, table2.pvalue AS jtk_pvalue
            FROM (
                WITH nn AS (
                  SELECT pan.name
                  FROM Study.ProtocolAppNode pan
                  WHERE name LIKE concat(
                   concat(
                     concat('$$metacycle_protocol$$', '%')
                     , (
                         SELECT DISTINCT regexp_replace(s.name, '[[:space:]]{1,}', '_') AS term
                         FROM study.study s, study.studyLink sl
                         WHERE s.name = '$$metacycle_study_generic$$'
                           AND s.investigation_id = sl.study_id
                       )
                     )
                    , '%'
                   )
                )
                SELECT t.source_id
                  , t.gene_source_id
                  , t.project_id
                  , 'Y' AS matched_result
                  , round(mc.period, 3) AS period
                  , round(mc.amplitude, 3) AS amplitude
                  , round(mc.pvalue, 3) AS pvalue
                FROM apidb.NaFeatureMetaCycle mc, Study.ProtocolAppNode pan, apidbtuning.transcriptattributes t, nn
                WHERE mc.protocol_app_node_id = pan.protocol_app_node_id
                  AND pan.name = ( SELECT name FROM nn )
                  AND mc.protocol_app_node_id IN (
                    SELECT DISTINCT protocol_app_node_id
                    FROM (
                      SELECT sl.*
                      FROM study.study s, study.studyLink sl
                      WHERE s.name = '$$metacycle_study_generic$$'
                        AND s.investigation_id = sl.study_id
                    ) t
                  )
                  AND t.GENE_NA_FEATURE_ID = mc.NA_FEATURE_ID
                  AND mc.pvalue <= $$metacycle_pvalue$$
                  AND mc.period >= $$metacycle_period_min$$
                  AND mc.period <= $$metacycle_period_max$$
                  AND mc.amplitude >= $$metacycle_amplitude$$
                  AND pan.name LIKE concat(
                    concat(
                      concat('ARSresult_', '%')
                      , (
                          SELECT DISTINCT regexp_replace(s.name, '[[:space:]]{1,}', '_') AS term
                          FROM study.study s, study.studyLink sl
                          WHERE s.name = '$$metacycle_study_generic$$'
                            AND s.investigation_id = sl.study_id
                        )
                      )
                    , '%'
                  )
              ) table1
              , (
                  SELECT t.source_id
                    , t.gene_source_id
                    , t.project_id
                    , 'Y' AS matched_result
                    , '' AS period
                    , '' AS amplitude
                    , round(mc.pvalue, 3) AS pvalue
                  FROM apidb.NaFeatureMetaCycle mc, Study.ProtocolAppNode pan, apidbtuning.transcriptattributes t
                  WHERE mc.protocol_app_node_id = pan.protocol_app_node_id
                    AND pan.name = (
                      SELECT name
                      FROM (
                         SELECT pan.name
                         FROM Study.ProtocolAppNode pan
                         WHERE name LIKE concat(
                           concat(
                             concat('JTKresult_', '%')
                             , (
                                 SELECT DISTINCT regexp_replace(s.name, '[[:space:]]{1,}', '_') AS term
                                 FROM study.study s, study.studyLink sl
                                 WHERE s.name = '$$metacycle_study_generic$$'
                                   AND s.investigation_id = sl.study_id
                               )
                             )
                           , '%')
                      ) t
                    )
                    AND mc.protocol_app_node_id IN (
                      SELECT DISTINCT protocol_app_node_id
                      FROM (
                        SELECT sl.*
                        FROM study.study s, study.studyLink sl
                        WHERE s.name = '$$metacycle_study_generic$$'
                          AND s.investigation_id = sl.study_id
                      ) t
                    )
                    AND t.GENE_NA_FEATURE_ID = mc.NA_FEATURE_ID
                ) table2
            WHERE table1.source_id = table2.source_id
          UNION
            SELECT table3.*, table4.arser_pvalue, table3.pvalue AS jtk_pvalue
            FROM
              (
                WITH nn AS (
                  SELECT pan.name
                  FROM Study.ProtocolAppNode pan
                  WHERE name LIKE concat(concat(concat('$$metacycle_protocol$$', '%'),
                                               (
                                                 SELECT DISTINCT regexp_replace(s.name, '[[:space:]]{1,}', '_') AS term
                                                 FROM study.study s, study.studyLink sl
                                                 WHERE s.name = '$$metacycle_study_generic$$'
                                                   AND s.investigation_id = sl.study_id
                                               )), '%')
                )
                SELECT t.source_id
                  , t.gene_source_id
                  , t.project_id
                  , 'Y' AS matched_result
                  , round(mc.period, 3) AS period
                  , round(mc.amplitude, 3) AS amplitude
                  , round(mc.pvalue, 3) AS pvalue
                FROM apidb.NaFeatureMetaCycle mc, Study.ProtocolAppNode pan, apidbtuning.transcriptattributes t, nn
                WHERE mc.protocol_app_node_id = pan.protocol_app_node_id
                  AND pan.name = (SELECT name FROM nn)
                  AND mc.protocol_app_node_id IN (
                    SELECT DISTINCT protocol_app_node_id
                    FROM (
                      SELECT sl.*
                      FROM study.study s, study.studyLink sl
                      WHERE s.name = '$$metacycle_study_generic$$'
                        AND s.investigation_id = sl.study_id
                    ) t
                  )
                  AND t.GENE_NA_FEATURE_ID = mc.NA_FEATURE_ID
                  AND mc.pvalue <= $$metacycle_pvalue$$
                  AND mc.period >= $$metacycle_period_min$$
                  AND mc.period <= $$metacycle_period_max$$
                  AND mc.amplitude >= $$metacycle_amplitude$$
                  AND pan.name LIKE concat(concat(concat('JTKresult_', '%'),
                                                  (
                                                    SELECT DISTINCT regexp_replace(s.name, '[[:space:]]{1,}', '_') AS term
                                                    FROM study.study s, study.studyLink sl
                                                    WHERE s.name = '$$metacycle_study_generic$$'
                                                      AND s.investigation_id = sl.study_id
                                                  )), '%')
              ) table3
              , (
                  SELECT t.source_id
                    , t.gene_source_id
                    , t.project_id
                    , 'Y' AS matched_result
                    , '' AS period
                    , '' AS amplitude
                    , round(mc.pvalue, 3) AS arser_pvalue
                  FROM apidb.NaFeatureMetaCycle mc, Study.ProtocolAppNode pan, apidbtuning.transcriptattributes t
                  WHERE mc.protocol_app_node_id = pan.protocol_app_node_id
                    AND pan.name = (
                       SELECT name
                       FROM
                         (
                           SELECT pan.name
                           FROM Study.ProtocolAppNode pan
                           WHERE name LIKE concat(concat(concat('ARSresult_', '%'),
                                                         (
                                                           SELECT DISTINCT regexp_replace(s.name, '[[:space:]]{1,}', '_') AS term
                                                           FROM study.study s, study.studyLink sl
                                                           WHERE s.name = '$$metacycle_study_generic$$'
                                                             AND s.investigation_id = sl.study_id
                                                         )), '%')
                         ) t
                    )
                    AND mc.protocol_app_node_id IN (
                       SELECT DISTINCT protocol_app_node_id
                       FROM
                         (
                           SELECT sl.*
                           FROM study.study s, study.studyLink sl
                           WHERE s.name = '$$metacycle_study_generic$$'
                             AND s.investigation_id = sl.study_id
                         ) t
                    )
                    AND t.GENE_NA_FEATURE_ID = mc.NA_FEATURE_ID
                ) table4
            WHERE table3.source_id = table4.source_id
        ]]>
      </sql>
    </sqlQuery>


    <processQuery name="GenesByMetaCycle" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.metacycle_study_generic"/>
      <paramRef ref="geneParams.metacycle_protocol"/>
      <paramRef ref="geneParams.metacycle_period"/>
      <paramRef ref="geneParams.metacycle_amplitude"/>
      <paramRef ref="geneParams.metacycle_pvalue"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20" wsName="project_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="period" width="50" wsName="period"/>
      <wsColumn name="amplitude" width="50" wsName="amplitude"/>
      <wsColumn name="pvalue" width="50" wsName="pvalue"/>
      <wsColumn name="arser_pvalue" width="50" wsName="arser_pvalue"/>
      <wsColumn name="jtk_pvalue" width="50" wsName="jtk_pvalue"/>
    
    </processQuery>    


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Question for GenesByWGCNA -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--
        <sqlQuery name="GenesByWGCNA" includeProjects="UniDB">
            <paramRef ref="geneParams.wgcna_profileGeneId"/>
            <paramRef ref="geneParams.wgcna_kME"/>
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="matched_result"/>
            <column name="kME"/>
            <column name="module_name"/>
           <sql>
                 <![CDATA[

    with genePick as (
      select  ta.gene_source_id,  pan.name
      from study.study s , study.studyLink sl, study.ProtocolAppNode pan, apidb.WGCNAResults res, apidbTuning.TranscriptAttributes ta
      where s.name = 'iterativeWGCNA Dual transcriptomes of malaria-infected Gambian children'
      and s.study_id = sl.study_id
      and sl.protocol_app_node_id = pan.protocol_app_node_id
      and pan.protocol_app_node_id = res.protocol_app_node_id
      and ta.gene_na_feature_id = res.na_feature_id
      and ta.gene_source_id = $$wgcna_profileGeneId$$
    )

    select ta.source_id, ta.gene_source_id, ta.project_id, REPLACE(pan.name,' (wgcna)','') as module_name, res.correlation_coefficient as kME, 'Y' as matched_result
    from study.study s , study.studyLink sl, study.ProtocolAppNode pan, apidb.WGCNAResults res, apidbTuning.TranscriptAttributes ta, genePick
    where s.name = 'iterativeWGCNA Dual transcriptomes of malaria-infected Gambian children'
    and s.study_id = sl.study_id
    and sl.protocol_app_node_id = pan.protocol_app_node_id
    and pan.protocol_app_node_id = res.protocol_app_node_id
    and ta.gene_na_feature_id = res.na_feature_id
    and pan.name  = genePick.name
    and res.correlation_coefficient >= $$wgcna_kME_min$$
    and res.correlation_coefficient <= $$wgcna_kME_max$$

                ]]>
           </sql>
        </sqlQuery>

    -->


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- question for old Plasmo annotations(v 8.2) -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByOldAnnotation" includeProjects="PlasmoDB,ToxoDB,UniDB">
      <paramRef ref="geneParams.plasmo_new_product"/>
      <paramRef ref="geneParams.plasmo_new_cds"/>
      <paramRef ref="geneParams.plasmo_new_go"/>
      <paramRef ref="geneParams.plasmo_new_ec"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="project_id"/>
      <column name="old_id"/>
      <column name="old_product"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT toa.new_source_id as source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
                  string_agg(toa.old_source_id, ', ') AS old_id,
                  string_agg(oa.value, ', ') AS old_product
          FROM apidbTuning.TrackOldAnnotation toa,APIDB.oldannotation oa
          WHERE (toa.altered_product $$plasmo_new_product$$ OR -1 $$plasmo_new_product$$)
            AND (toa.altered_go $$plasmo_new_go$$ OR -1 $$plasmo_new_go$$)
            AND (toa.altered_ec $$plasmo_new_ec$$ OR -1 $$plasmo_new_ec$$)
            AND (toa.altered_cds $$plasmo_new_cds$$ OR -1 $$plasmo_new_cds$$)
            AND oa.source_id =+ toa.old_source_id
            AND oa.type =+ 'product'
          GROUP BY toa.new_source_id
        ]]>
      </sql>
    </sqlQuery>
    <processQuery name="GenesByOldAnnotation" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.plasmo_new_product" quote="false"/>
      <paramRef ref="geneParams.plasmo_new_cds" quote="false"/>
      <paramRef ref="geneParams.plasmo_new_go" quote="false"/>
      <paramRef ref="geneParams.plasmo_new_ec" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="old_id" width="32"/>
      <wsColumn name="old_product" width="150"/>
    </processQuery>


    <sqlQuery name="GenesByRodentMalariaPhenotype" includeProjects="PlasmoDB,UniDB">
      <paramRef ref="geneParams.RodMalStage"/>
      <paramRef ref="geneParams.RodMalType"/>
      <paramRef ref="geneParams.RodMalSuccess"/>
      <paramRef ref="geneParams.RodMalPhenotype"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="project_id"/>
      <sql>
        <![CDATA[
          SELECT distinct ga.source_id,
                ga.project_id, 'Y' as matched_result
          FROM apidbtuning.geneattributes ga,
              APIDB.phenotypefeature pf,
              (SELECT pf2.phenotype_feature_id,
                      CASE WHEN (pf2.phenotype_$$RodMalStage$$ like 'Not tested' or pf2.phenotype_$$RodMalStage$$ is null) then 0
                           when (pf2.phenotype_$$RodMalStage$$ like 'Not different%') then 1
                           else 2 end as Phenotype
               FROM apidb.phenotypefeature pf2) ph
          WHERE pf.na_feature_id = ga.na_feature_id
            AND ph.phenotype_feature_id = pf.phenotype_feature_id
            AND pf.mod_type in ($$RodMalType$$)
            AND pf.suc_of_gen_mod = $$RodMalSuccess$$
            AND ph.phenotype = $$RodMalPhenotype$$
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByRodentMalariaPhenotype" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.RodMalStage" quote="false"/>
      <paramRef ref="geneParams.RodMalType" quote="false"/>
      <paramRef ref="geneParams.RodMalSuccess" quote="false"/>
      <paramRef ref="geneParams.RodMalPhenotype" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPhenotype" includeProjects="TriTrypDB,FungiDB,UniDB">
      <paramRef ref="organismParams.organismwithPhenotype"/>
      <paramRef ref="geneParams.phenotypeQualifier"/>
      <paramRef ref="geneParams.phenotype"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="pubmed_id"/>
      <column name="project_id"/>
      <column name="wdk_weight"/>
      <sql>
        <![CDATA[
          SELECT  source_id
            ,project_id
            ,gene_source_id
            ,matched_result
            ,10 as wdk_weight
            ,string_agg(pubmed_id,',' order by pubmed_id) as pubmed_id
          FROM (
            SELECT distinct  source_id
              ,project_id
              ,gene_source_id
              ,matched_result
              ,10 as wdk_weight
              ,pubmed_id
            FROM (
              SELECT distinct ta.source_id
                , ta.project_id
                , 'Y' as matched_result
                , ta.gene_source_id
                , oen.name as e_name
                , oqn.name as q_name
                , pm.pubmed_id
              FROM APIDB.PHENOTYPEMODEL pm
                INNER JOIN APIDB.NAFEATUREPHENOTYPEMODEL na ON pm.phenotype_model_id = na.phenotype_model_id
                INNER JOIN ApidbTuning.TranscriptAttributes ta ON ta.gene_na_feature_id = na.na_feature_id
                INNER JOIN APIDB.PHENOTYPERESULT pr ON pm.phenotype_model_id = pr.phenotype_model_id
                LEFT JOIN sres.ontologyterm oen ON pr.PHENOTYPE_ENTITY_TERM_ID = oen.ontology_term_id
                LEFT JOIN sres.ontologyterm oqn ON pr.phenotype_quality_term_id = oqn.ontology_term_id
              WHERE ta.organism = '$$organismwithPhenotype$$'
            ) t
            WHERE e_name = '$$phenotype$$'
              AND q_name = '$$phenotypeQualifier$$'
          ) t
          GROUP BY source_id,project_id,gene_source_id,matched_result
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByPhenotype" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organismwithPhenotype"/>
      <paramRef ref="geneParams.phenotypeQualifier"/>
      <paramRef ref="geneParams.phenotype"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20" wsName="project_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="pubmed_id" width="50" wsName="pubmed_id"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPhenotype_tgonGT1_crisprPhenotype_CrisprScreen_RSRC" includeProjects="ToxoDB,UniDB">
      <paramRef ref="geneParams.phenotype_score_gt"/>
      <paramRef ref="geneParams.phenotype_score_lt"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="phenotype_score"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id
               , ta.gene_source_id
               , 'Y' as matched_result
               , ta.project_id
               , cp.mean_phenotype as phenotype_score
          FROM apidb.crisprphenotype cp
             , apidbtuning.transcriptattributes ta
          WHERE cp.mean_phenotype >= $$phenotype_score_gt$$
            AND cp.mean_phenotype <= $$phenotype_score_lt$$
            AND ta.gene_na_feature_id = cp.na_feature_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByPhenotype_tgonGT1_crisprPhenotype_CrisprScreen_RSRC" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.phenotype_score_gt"/>
      <paramRef ref="geneParams.phenotype_score_lt"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="phenotype_score" width="32"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesByPhenotypeEdaGeneric" processName="org.apidb.apicomplexa.wsfplugin.eda.GeneEdaSubsetPlugin">
      <paramRef ref="geneParams.eda_dataset_id" visible="false"/>
      <paramRef ref="geneParams.eda_analysis_spec"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="project_id" width="20" wsName="project_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <sqlQuery name="GenesByPhenotypeScoreGeneric">
      <paramRef ref="geneParams.phenotypeScoreDataset"/>
      <paramRef ref="geneParams.phenotypeScoreFileterParam"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT distinct ta.source_id
               , ta.gene_source_id
               , 'Y' as matched_result
               , ta.project_id
          FROM apidbtuning.transcriptattributes ta, apidb.PhenotypeScore ps
          WHERE ta.gene_na_feature_id = ps.na_feature_id
            AND ps.na_feature_id in ($$phenotypeScoreFileterParam$$)
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPhenotype_ncraOR74A_phenotype_knockout_mutants_RSRC" includeProjects="FungiDB,UniDB">
      <paramRef ref="geneParams.phenoMutNAFeatureIds"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT distinct ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result
          FROM apidbtuning.transcriptattributes ta, apidb.phenotypemutants p
          WHERE p.na_feature_id = ta.gene_na_feature_id
            AND p.na_feature_id in ($$phenoMutNAFeatureIds$$)
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPhenotype_ncraOR74A_phenotype_GeneImage_NAFeaturePhenotypeImage_RSRC"
              includeProjects="FungiDB,UniDB">
      <paramRef ref="geneParams.phenoImageProtocolAppNodes"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT distinct ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result
          FROM apidbtuning.transcriptattributes ta, apidb.nafeaturephenotype p
          WHERE p.na_feature_id = ta.gene_na_feature_id
            AND p.protocol_app_node_id in ($$phenoImageProtocolAppNodes$$)
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPhenotype_PHI-base_curated_phenotype_NAFeaturePhenotypeGeneric_RSRC"
              includeProjects="FungiDB,UniDB">
      <paramRef ref="geneParams.phiBasedPhenotypeProtocolAppNodes"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT distinct ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result
          FROM apidbtuning.transcriptattributes ta, apidb.nafeaturephenotype p
          WHERE p.na_feature_id = ta.gene_na_feature_id
            AND p.protocol_app_node_id IN ($$phiBasedPhenotypeProtocolAppNodes$$)
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPhenotype_pberANKA_phenotype_Bushnell_functional_profiling_RSRC"
              includeProjects="PlasmoDB,UniDB">
      <paramRef ref="geneParams.phenoBushnellGrowthRatesNAFeatureIds"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT distinct ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result
          FROM apidbtuning.transcriptattributes ta, apidb.phenotypegrowthrate p
          WHERE p.na_feature_id = ta.gene_na_feature_id
            AND p.na_feature_id in ($$phenoBushnellGrowthRatesNAFeatureIds$$)
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Transcription Factor Binding Sites -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByBindingSites" includeProjects="PlasmoDB,UniDB">
      <paramRef ref="organismParams.organism" queryRef="organismVQ.tfBindingSite" multiPick="true" quote="true"/>
      <!-- TEMPLATE_ANCHOR geneTfbsOrganismOverride -->

      <paramRef ref="geneParams.tfbs_name">
        <visibleHelp><![CDATA[
            <img id="tfbs_image" src="" height="250px" width="400px">
            <br><br><i>Plasmodium falciparum</i> transcription-factor binding sites - Manuel Llinas<br><br>
          ]]></visibleHelp>
      </paramRef>
      <paramRef ref="geneParams.tfbs_distance"/>
      <paramRef ref="geneParams.tfbs_num_sites"/>
      <paramRef ref="geneParams.tfbs_pvalue"/>

      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="project_id"/>
      <column name="tfbs_distance"/>
      <column name="tfbs_count"/>
      <column name="organismAbbrev"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, bg.gene_source_id, 'Y' as matched_result,
                 ta.project_id,
                 min(bg.distance) as tfbs_distance,
                 count(*) as tfbs_count, org.public_abbrev as organismAbbrev
          FROM  ApidbTuning.TFBSGene bg, ApidbTuning.TranscriptAttributes ta, apidb.organism org
          WHERE bg.distance <= $$tfbs_distance$$
            AND bg.organism in ($$organism$$)
            AND bg.direction = '-'
            AND exp(bg.primary_score) <= $$tfbs_pvalue$$
            AND bg.name = $$tfbs_name$$
            AND bg.gene_source_id = ta.gene_source_id
            AND org.taxon_id = ta.taxon_id
          GROUP BY ta.project_id, ta.source_id, bg.gene_source_id, org.public_abbrev
          HAVING count(*) >= $$tfbs_num_sites$$
        ]]>
      </sql>
    </sqlQuery>


    <processQuery name="GenesByBindingSites" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism" queryRef="organismVQ.tfBindingSite"/>

      <paramRef ref="geneParams.tfbs_name" quote="false">
        <visibleHelp><![CDATA[
            <img id="tfbs_image" src="" height="250px" width="400px">
            <br><br><i>Plasmodium falciparum</i> transcription-factor binding sites - Manuel Llinas<br><br>
          ]]></visibleHelp>
      </paramRef>
      <paramRef ref="geneParams.tfbs_distance"/>
      <paramRef ref="geneParams.tfbs_num_sites"/>
      <paramRef ref="geneParams.tfbs_pvalue" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="tfbs_distance" width="32" wsName="tfbs_distance"/>
      <wsColumn name="tfbs_count" width="32" wsName="tfbs_count"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- ChIP chip chromatin marks -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByChIPchip" includeProjects="FungiDB,PlasmoDB,ToxoDB,TriTrypDB,UniDB">
      <testParamValues>
        <paramValue name="chip_antibody_plasmo">H3K9me3</paramValue>
        <paramValue name="chip_genotypes">sir2KO</paramValue>
        <paramValue name="chip_replicates_plasmo">1</paramValue>
      </testParamValues>

      <paramRef ref="sharedParams.metadata_datasets" quote="false"
                queryRef="SharedVQ.ChipchipDataset"/>

      <paramRef ref="sharedParams.chipchip_samples"/>
      <paramRef ref="geneParams.chip_distance"/>
      <paramRef ref="geneParams.chip_direction"/>
      <paramRef ref="geneParams.chip_score"/>

      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="project_id"/>
      <column name="chip_distance"/>
      <column name="chip_score"/>

      <sql>
        <![CDATA[
          SELECT 'Y' as matched_result, cct.source_id, cct.gene_source_id, cct.project_id,
                 min(cct.distance) as chip_distance, max(cct.score) as chip_score
          FROM apidbTuning.ChipChipTranscript cct, study.ProtocolAppNode pan
          WHERE cct.protocol_app_node_id = pan.protocol_app_node_id
            AND pan.name in ($$chipchip_samples$$)
            AND ($$chip_direction$$ = 'Either' OR direction = $$chip_direction$$)
            AND cct.distance <= $$chip_distance$$
            AND cct.score >= $$chip_score$$
          GROUP BY cct.project_id, cct.source_id, cct.gene_source_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByChIPchip" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

      <paramRef ref="sharedParams.metadata_datasets" quote="false"
                queryRef="SharedVQ.ChipchipDataset"/>
      <paramRef ref="sharedParams.chipchip_samples"/>
      <paramRef ref="geneParams.chip_distance"/>
      <paramRef ref="geneParams.chip_direction" quote="false"/>
      <paramRef ref="geneParams.chip_score"/>

      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="chip_distance" width="32"/>
      <!-- wsColumn name="chip_genotype" width="32"/ -->
      <!-- wsColumn name="chip_antibodies" width="32"/-->
      <wsColumn name="chip_score" width="32"/>

    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Locus Tag  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneByLocusTag" doNotTest="true" excludeProjects="EuPathDB2">
      <paramRef ref="sharedParams.ds_gene_ids"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="input_id"/>
      <column name="dataset_order"/>
      <sql>
        <![CDATA[
          SELECT gene_source_id, source_id, string_agg(input_id, ', ') AS input_id,
              'Y' AS matched_result, project_id, MIN(dataset_order) as dataset_order
          FROM (
              SELECT
                  ta.gene_source_id,
                  ta.source_id,
                  ta.project_id,
                  string_agg(t.gene_source_id, ', ') AS input_id,
                  MIN(t.dataset_value_order) as dataset_order
              FROM
                  ApidbTuning.TranscriptAttributes ta,
                  (
                    SELECT ds.gene_source_id, gi.gene, ds.dataset_value_order
                    FROM ApidbTuning.GeneId gi, ( $$ds_gene_ids$$ ) ds
                    --WHERE LOWER(gi.id) LIKE REGEXP_REPLACE(REPLACE(LOWER(ds.gene_source_id), '*', '%'), '[[:space:]]', '')
                    WHERE LOWER(gi.id) = LOWER(ds.gene_source_id)
                  ) t
              WHERE t.gene = ta.gene_source_id
              GROUP BY ta.gene_source_id, ta.source_id, ta.project_id
            UNION
              SELECT
                  ta.gene_source_id,
                  ta.source_id,
                  ta.project_id,
                  ta.source_id AS input_id,
                  MIN(ds.dataset_value_order) as dataset_order
              FROM ApidbTuning.TranscriptAttributes ta, ( $$ds_gene_ids$$ ) ds
              WHERE lower(transcript_source_id) = LOWER(ds.gene_source_id )
              GROUP BY ta.gene_source_id, ta.source_id, ta.project_id
          ) t
          GROUP BY source_id, gene_source_id, project_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GeneByLocusTag2" includeProjects="EuPathDB" doNotTest="true"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="sharedParams.ds_gene_ids" noTranslation="true"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="input_id" width="320"/>
      <wsColumn name="dataset_order" columnType="number" width="20"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- transcript ID  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneByTranscriptId" excludeProjects="EuPathDB" doNotTest="true">
      <paramRef ref="geneParams.single_gene_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="project_id"/>
      <!-- column name="input_id"/ -->

      <sql>
        <![CDATA[
          SELECT gene_source_id, source_id, 'Y' as matched_result, project_id
          FROM ApidbTuning.TranscriptAttributes
          WHERE lower(source_id) like regexp_replace(replace(replace(lower($$single_gene_id$$),
                                                             '*', '%'),
                                                     '_', '\_'),
                                             '[[:space:]]', '') escape '\'
        ]]>
      </sql>


    </sqlQuery>
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Single locus tag  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneBySingleLocusTag" excludeProjects="EuPathDB" doNotTest="true">
      <paramRef ref="geneParams.single_gene_id"/>

      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="project_id"/>
      <!-- column name="input_id"/ -->
      <sql>
        <![CDATA[
          SELECT gene_source_id, source_id, 'Y'AS matched_result,
                 project_id
          FROM (
            SELECT ta.gene_source_id,  ta.source_id, ta.project_id
            FROM ApidbTuning.TranscriptAttributes ta
            WHERE ta.source_id = $$single_gene_id$$
            UNION
            SELECT gi.gene AS gene_source_id, ta.source_id, ta.project_id
            FROM ApidbTuning.GeneId gi, ApidbTuning.TranscriptAttributes ta
            WHERE lower(gi.id) LIKE REGEXP_REPLACE(REPLACE(REPLACE(LOWER($$single_gene_id$$), '*', '%'), '_', '\_'), '[[:space:]]', '') ESCAPE '\'
              AND gi.gene  = ta.gene_source_id
          ) t
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GeneBySingleLocusTag" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.single_gene_id" noTranslation="true"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <!-- wsColumn name="input_id" width="32"/ -->
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- EC number -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByEcNumber" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism" queryRef="organismVQ.withEC"/>
      <!-- TEMPLATE_ANCHOR geneEcOrganismOverride -->
      <paramRef ref="geneParams.ec_source"/>
      <paramRef ref="geneParams.ec_number_pattern"/>
      <paramRef ref="geneParams.ec_wildcard"/>
      <column name="project_id"/>
      <column name="gene_source_id"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="source"/>
      <sql>
        <![CDATA[
          SELECT source_id
            , gene_source_id
            , matched_result
            , project_id
            , string_agg(source, ',' ORDER BY source) AS source
          FROM (
              SELECT ta.source_id
                , ta.gene_source_id
                , 'Y' AS matched_result
                , ta.project_id
                , string_agg(DISTINCT
                  CASE asec.evidence_code
                   WHEN 'OrthoMCLDerived' THEN 'computationally inferred from Orthology'
                   WHEN 'gb' THEN 'GenBank'
                   WHEN 'Hagai' THEN 'MPMP'
                   ELSE evidence_code
                  END
                  , ', '
                ) AS source
              FROM dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec, ApidbTuning.transcriptattributes ta
              WHERE ta.taxon_id IN ($$organism$$)
                AND ta.aa_sequence_id = asec.aa_sequence_id
                AND asec.enzyme_class_id = ec.enzyme_class_id
                AND (
                  ec.ec_number LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower($$ec_number_pattern$$), ' ', ''), '-', '%'), '*', '%'), 'any', '%')
                  OR
                  ec.ec_number LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower($$ec_wildcard$$), ' ', ''), '-', '%'), '*', '%'), 'any', '%')
                  OR
                  ec.description LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower($$ec_wildcard$$), ' ', ''), '-', '%'), '*', '%'), 'any', '%')
                )
                AND asec.evidence_code IN ($$ec_source$$)
              GROUP BY ta.source_id, ta.gene_source_id, ta.project_id, asec.evidence_code
            ) t
          GROUP BY source_id, gene_source_id, matched_result, project_id
          ORDER BY source_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByEcNumber"
                  includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism" queryRef="organismVQ.withEC"/>

      <paramRef ref="geneParams.ec_source" quote="false"/>
      <paramRef ref="geneParams.ec_number_pattern" quote="false"/>
      <paramRef ref="geneParams.ec_wildcard"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="source" width="300" wsName="source"/>
    </processQuery>


    <sqlQuery name="GenesByEcNumberDirect" excludeProjects="EuPathDB">
      <paramRef ref="geneParams.ec_wildcard"/>
      <column name="project_id"/>
      <column name="gene_source_id"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="source"/>
      <sql>
        <![CDATA[
          SELECT source_id
            , gene_source_id
            , matched_result
            , project_id
            , string_agg(source, ',' ORDER BY source) AS source
          FROM
            (
              SELECT ta.source_id
                , ta.gene_source_id
                , 'Y' AS matched_result
                , ta.project_id
                , string_agg(DISTINCT
                   CASE asec.evidence_code
                     WHEN 'OrthoMCLDerived' THEN 'computationally inferred from Orthology'
                     WHEN 'gb' THEN 'GenBank'
                     WHEN 'Hagai' THEN 'MPMP'
                     ELSE evidence_code
                   END
                  , ', '
                ) AS source
              FROM dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec, ApidbTuning.transcriptattributes ta
              WHERE ta.taxon_id IN (
                  -- Taxon_IDs sql
                  SELECT string_agg(internal::VARCHAR, ', ') AS internal
                  FROM
                    ApidbTuning.OrganismTree ot
                    , (
                       SELECT DISTINCT ta.organism
                       FROM ApidbTuning.TranscriptAttributes ta, apidb.organism o
                       WHERE (ta.ec_numbers IS NOT NULL OR ta.ec_numbers_derived IS NOT NULL)
                         AND (ta.project_id = '@PROJECT_ID@' OR 'UniDB' = '@PROJECT_ID@')
                         AND ta.taxon_id = o.taxon_id
                    ) fq
                  WHERE ot.organism = fq.organism
                  GROUP BY term, parentTerm
                )
                AND ta.aa_sequence_id = asec.aa_sequence_id
                AND asec.enzyme_class_id = ec.enzyme_class_id
                AND (
                    ec.ec_number LIKE
                    REPLACE(REPLACE(REPLACE(REPLACE(lower($$ec_wildcard$$), ' ', ''), '-', '%'), '*', '%'), 'any', '%')
                  OR
                    ec.description LIKE
                    REPLACE(REPLACE(REPLACE(REPLACE(lower($$ec_wildcard$$), ' ', ''), '-', '%'), '*', '%'), 'any', '%')
                )
              GROUP BY ta.source_id, ta.gene_source_id, ta.project_id, asec.evidence_code
            ) t
          GROUP BY source_id, gene_source_id, matched_result, project_id
          ORDER BY source_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByEcNumberDirect"
                  includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.ec_wildcard"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="source" width="50" wsName="source"/>
    </processQuery>
<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!--  			Talon Long Read				  -->
<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

   <sqlQuery name="GenesByISM" includeProjects="PlasmoDB,ToxoDB" >
	    <paramRef ref="geneParams.long_read_datasets"/>
        <paramRef ref="geneParams.ismTypes"/>
        <paramRef ref="sharedParams.supporting_read_count"/>
	    <paramRef ref="sharedParams.transcript_length"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="num_new_models"  />
        <column name="transcript_novelty"/>
        <column name="incomplete_splice_match_type"/>
	    <column name="matched_result"/>
        <!-- these used for JBrowse link -->
        <column name="min_start"/>
        <column name="max_end"/>
    	<column name="internal_abbrev"/>
	    <column name="all_datasets"/>
	    <column name="na_seq_source_id"/>
	    <column name="contextStart"/>
	    <column name="contextEnd"/>
        <sql>

        <![CDATA[
	    select distinct source_id
        , gene_source_id
        , count(source_id) as num_new_models
        , min(transcript_length) as min_new_transcript_length
        , max(transcript_length) as max_new_transcript_length
        , string_agg(distinct gene_novelty, ', ' order by gene_novelty) as gene_novelty
        , string_agg(distinct transcript_novelty, ', ' order by transcript_novelty) as transcript_novelty
        , string_agg(distinct incomplete_splice_match_type, ', ' order by incomplete_splice_match_type) as incomplete_splice_match_type
        , min(min_start) as min_start
	    , min(min_start) - 1000 as contextStart
        , max(max_end) as max_end
	    , max(max_end) + 1000 contextEnd
        , project_id
	    , string_agg(distinct dataset_name || '_high_confidence_models',',') as all_datasets
	    , na_seq_source_id
	    , internal_abbrev
        , 'Y' as matched_result
        from (
                select ed.name as dataset_name
		        , ab.internal_abbrev
                , lrt.gene_source_id
                , lrt.transcript_length
                , lrt.gene_novelty
                , lrt.transcript_novelty
                , lrt.incomplete_splice_match_type
                , lrt.min_start
                , lrt.max_end
                , lrt.na_seq_source_id
                , ta.project_id
                , ta.source_id
                , sum(count_table.reads) as totalReads
                from apidb.longreadtranscript lrt
                , JSON_TABLE(count_data, '$.*' COLUMNS (reads INTEGER PATH '$')) count_table
                , sres.externaldatabaserelease edr
                , sres.externaldatabase ed
                , apidbtuning.transcriptattributes ta
		        , apidbtuning.organismattributes ab
                , apidbtuning.datasetPresenter dp
                where edr.external_database_release_id = lrt.external_database_release_id
                and ed.external_database_id = edr.external_database_id
                and ta.gene_source_id = lrt.gene_source_id
		        and ab.organism_name = ta.organism
                and ed.name = dp.name
		        and lrt.transcript_length >= $$transcript_length$$
		        and (lrt.transcript_novelty in ($$ismTypes$$) or (lrt.transcript_novelty = 'ISM' and lrt.incomplete_splice_match_type in ($$ismTypes$$)))
                GROUP BY ed.name, ab.internal_abbrev, lrt.gene_source_id, lrt.transcript_length, lrt.gene_novelty, lrt.transcript_novelty
                , lrt.incomplete_splice_match_type, lrt.min_start, lrt.max_end, lrt.na_seq_source_id, ta.project_id, ta.source_id
        )
        where dataset_name = '$$long_read_datasets$$'
        AND totalReads >= $$supporting_read_count$$
        group by source_id, gene_source_id, project_id, na_seq_source_id,internal_abbrev
        ]]>
	</sql>
    </sqlQuery>


    <processQuery name="GenesByISM"
             includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
	    <paramRef ref="geneParams.long_read_datasets"/>
        <paramRef ref="geneParams.ismTypes"/>
        <paramRef ref="sharedParams.supporting_read_count"/>
        <paramRef ref="sharedParams.transcript_length"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" />
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="num_new_models" width="50" wsName="num_new_models"/>
        <wsColumn name="transcript_novelty" width="50" wsName="transcript_novelty"/>
        <wsColumn name="incomplete_splice_match_type" width="50" wsName="incomplete_splice_match_type"/>

    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Transmembrane domains -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByTransmembraneDomains" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.min_tm"/>
      <paramRef ref="geneParams.max_tm"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT source_id, gene_source_id, 'Y' as matched_result, project_id
          FROM ApidbTuning.TranscriptAttributes
          WHERE tm_count >= $$min_tm$$
            AND tm_count <= $$max_tm$$
            AND taxon_id IN ($$organism$$)
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByTransmembraneDomains" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.min_tm"/>
      <paramRef ref="geneParams.max_tm"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Gene type -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByGeneModelChars">
      <paramRef ref="organismParams.organism_select_all" visible="true"/>
      <paramRef ref="geneParams.gene_or_transcript"/>
      <paramRef ref="geneParams.gene_model_char"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT source_id, gene_source_id, 'Y' as matched_result, project_id
          FROM ApidbTuning.TranscriptAttributes
          WHERE source_id in ($$gene_model_char$$)
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GenesByGeneType" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.geneType"/>
      <paramRef ref="geneParams.includePseudogenes"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT source_id, gene_source_id, 'Y' as matched_result, project_id
          FROM ApidbTuning.TranscriptAttributes
          WHERE gene_type IN ($$geneType$$)
            AND is_pseudo in ($$includePseudogenes$$)
            AND taxon_id IN ($$organism$$)
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByGeneType" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.includePseudogenes"/>
      <paramRef ref="geneParams.geneType" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <!--       <wsColumn name="is_pseudo" width="32" wsName="is_pseudo"/> -->
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- BLAST   when apidb using apifed (instead of wu-blast), remember to set useTermOnly in the organism param, in similarityParams.xml   -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesBySimilarity"
                  processName="org.apidb.apicomplexa.wsfplugin.blast.GeneBlastPlugin">

      <postCacheUpdateSql>
        <sql>
          <![CDATA[
            -- map any protein IDs to their transcript ID
            UPDATE ##WDK_CACHE_TABLE## qr
            set source_id = (SELECT transcript_source_id
                             FROM ApidbTuning.ProteinAttributes
                             WHERE source_id = qr.source_id)
            where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
              and source_id in (SELECT source_id
                                FROM ApidbTuning.ProteinAttributes)
              and source_id not in (SELECT source_id
                                    FROM ApidbTuning.TranscriptAttributes)
          ]]>
        </sql>
      </postCacheUpdateSql>
      <postCacheUpdateSql excludeProjects="UniDB">
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
                        (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (select max(wdk_row_id) as the_max from matches)
            , mismatches AS (
                SELECT source_id, gene_source_id, project_id
                FROM apidbTuning.transcriptAttributes
                WHERE gene_source_id in (select gene_source_id from matches)
                  AND 1=0
              EXCEPT
                SELECT source_id, gene_source_id, project_id
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##,
                   row_number() OVER () + the_max, 0, source_id, gene_source_id,  project_id, 'N'
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>
      <postCacheUpdateSql includeProjects="UniDB">
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
                        (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result)
            WITH matches as (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (select max(wdk_row_id) as the_max from matches)
            , mismatches AS (
                SELECT source_id, gene_source_id
                FROM apidbTuning.transcriptAttributes
                WHERE gene_source_id in (select gene_source_id from matches)
                  AND 1=0
              EXCEPT
                SELECT source_id, gene_source_id
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##,
                   row_number() OVER () + the_max, 0, source_id, gene_source_id, 'N'
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>

      <testParamValues includeProjects="CryptoDB">
        <paramValue name="BlastQuerySequence">AACCCTAATCATTCCAACTTTGTTTCCAATTCCA</paramValue>
      </testParamValues>
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="BlastQuerySequence">
          CTGCAAATCGTCAATGTCTTGTCTGCACAAGCAAACAGCCTCGGAGGCGGCGAAACACTCCGGGGCGAGCGCCTTGTTGACGCTAGCACCTTTCTGGTGATGGCGATCGGCATTCGCGGC
        </paramValue>
        <paramValue name="BlastDatabaseOrganism">Toxoplasma gondii ME49</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="BlastQuerySequence">
          GCAGGAAATATGATTCCAGATAATGATAAAAATTCAAATTATAAATATCCAGCTGTTTATGATGACAAAGATAAAAAGTGTCATATATTATATATTGCAGCTCAAGAAAATAATGGTCCT
        </paramValue>
        <paramValue name="BlastDatabaseOrganism">Plasmodium falciparum 3D7</paramValue>
      </testParamValues>
      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="BlastQuerySequence">
          CTTAGAGACAAGTATGGCAGTATAGAAGGTCTAGCAAAAGAATTGGGGTCTGACCCTGCCACAGGCCTTTTGAAACCTACCGTTTTGCTCCATCGAAAAACCTATGGTAGCAATACAATG
        </paramValue>
      </testParamValues>
      <testParamValues includeProjects="TrichDB">
        <paramValue name="BlastQuerySequence">
          AAGACACTCGCTGAATTAAGAAAGCGCAAATTAGAGGGTGTTGTTCTCATCTACGGCTTCCCAGAGCCAACACGCGCCCACTGCGACTTCGAACCAGTCTTCCGCCAGGAATCCTGCTTC
        </paramValue>
        <paramValue name="BlastDatabaseOrganism">Trichomonas vaginalis G3</paramValue>
      </testParamValues>
      <!--TODO revisit the BLAST sequence..it was picked from Sanger-->
      <testParamValues includeProjects="TriTrypDB,EuPathDB">
        <paramValue name="BlastQuerySequence">ATGCAACTCCAAAGGTTGGGTGCTCCACTACTTAAAAGGCTTGTGGGGGGATGCATACGC</paramValue>
        <paramValue name="BlastDatabaseOrganism">Trypanosoma brucei TREU927</paramValue>
      </testParamValues>
      <testParamValues includeProjects="AmoebaDB">
        <paramValue name="BlastQuerySequence">
          ACCGATAGTATTTATTCCAGGGATTCTTGCGTCTATGTTAGAAGGGGATATTAATATAAAAGATATCAGTAAAACACCACTTCCAGAGAAATGTGATACACAAGTAGAATATGAAAGACTTTGGG
        </paramValue>
        <paramValue name="BlastDatabaseOrganism">Entamoeba dispar SAW760</paramValue>
      </testParamValues>
      <testParamValues includeProjects="MicrosporidiaDB">
        <paramValue name="BlastQuerySequence">
          GTTTTGGCAGACGGTATGTTTAACAGGAAAATCTCCCATGAATCTGACGGGAATATTCATAGTATTGATTTCCATGGCCTAACCATGTGTGATATTCCGGTGATAAAAAGAGACAGATATAC
        </paramValue>
        <paramValue name="BlastDatabaseOrganism">Encephalitozoon cuniculi GB-M1</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PiroplasmaDB">
        <paramValue name="BlastQuerySequence">
          TATGCAATCAGGTATCTATCTCATCAATCCTTACGCTCAGCGCTGCCCAATTGGGAAGAGCAAATGTGGACCTGAGCATGATTCCACCCTAGGAAAGTGTGCCATGTACTCTGGTTG
        </paramValue>
        <paramValue name="BlastDatabaseOrganism">Babesia bovis T2Bo</paramValue>
      </testParamValues>
      <testParamValues includeProjects="FungiDB,HostDB,SchistoDB,UniDB,VectorBase,InitDB">
        <paramValue name="BlastQuerySequence"></paramValue>
        <paramValue name="BlastDatabaseOrganism"></paramValue>
      </testParamValues>

      <paramRef ref="sharedParams.BlastDatabaseType" quote="false" noTranslation="false" default="Transcripts"/>
      <paramRef ref="sharedParams.BlastAlgorithm" quote="false" noTranslation="false"/>
      <paramRef ref="sharedParams.BlastDatabaseOrganism" quote="false" noTranslation="false"
                default="%%primaryOrthoOrganism%%"/>
      <paramRef ref="sharedParams.BlastQuerySequence"/>
      <paramRef ref="sharedParams.BlastRecordClass" default="TranscriptRecordClasses.TranscriptRecordClass"/>
      <paramRef ref="sharedParams.-e"/>
      <!--     <paramRef ref="sharedParams.-v"/> -->
      <paramRef ref="sharedParams.-b"/>
      <paramRef ref="sharedParams.-filter" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="identifier"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="summary" width="3000"/>
      <wsColumn name="alignment" columnType="clob"/>
      <wsColumn name="evalue_mant" columnType="float"/>
      <wsColumn name="evalue_exp" columnType="number"/>
      <wsColumn name="score" columnType="float"/>
    </processQuery>


    <processQuery name="GenesByMultiBlast"
                  processName="org.apidb.apicomplexa.wsfplugin.blast.GeneMultiBlastServicePlugin">

      <postCacheUpdateSql>
        <sql>
          <![CDATA[
            -- map any protein IDs to their transcript ID
            UPDATE ##WDK_CACHE_TABLE## qr
            SET source_id = (SELECT transcript_source_id
                             FROM ApidbTuning.ProteinAttributes
                             WHERE source_id = qr.source_id)
            WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
              AND source_id in (SELECT source_id
                                FROM ApidbTuning.ProteinAttributes)
              AND source_id not in (SELECT source_id
                                    FROM ApidbTuning.TranscriptAttributes)
          ]]>
        </sql>
      </postCacheUpdateSql>
      <postCacheUpdateSql excludeProjects="UniDB">
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
                        (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (SELECT max(wdk_row_id) as the_max FROM matches)
            , mismatches AS (
                SELECT source_id, gene_source_id, project_id
                FROM apidbTuning.transcriptAttributes
                WHERE gene_source_id in (SELECT gene_source_id FROM matches)
                  AND 1=0
              EXCEPT
                SELECT source_id, gene_source_id, project_id
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##,
                   row_number() OVER () + the_max, 0, source_id, gene_source_id,  project_id, 'N'
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>
      <postCacheUpdateSql includeProjects="UniDB">
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
                        (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (select max(wdk_row_id) as the_max from matches)
            , mismatches AS (
                SELECT source_id, gene_source_id
                FROM apidbTuning.transcriptAttributes
                WHERE gene_source_id in (select gene_source_id from matches)
                  AND 1=0
              EXCEPT
                SELECT source_id, gene_source_id
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##,
                   row_number() OVER () + the_max, 0, source_id, gene_source_id, 'N'
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>

      <testParamValues includeProjects="CryptoDB">
        <paramValue name="BlastQuerySequence">AACCCTAATCATTCCAACTTTGTTTCCAATTCCA</paramValue>
      </testParamValues>
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="BlastQuerySequence">
          CTGCAAATCGTCAATGTCTTGTCTGCACAAGCAAACAGCCTCGGAGGCGGCGAAACACTCCGGGGCGAGCGCCTTGTTGACGCTAGCACCTTTCTGGTGATGGCGATCGGCATTCGCGGC
        </paramValue>
        <paramValue name="MultiBlastDatabaseOrganism">Toxoplasma gondii ME49</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="BlastQuerySequence">
          GCAGGAAATATGATTCCAGATAATGATAAAAATTCAAATTATAAATATCCAGCTGTTTATGATGACAAAGATAAAAAGTGTCATATATTATATATTGCAGCTCAAGAAAATAATGGTCCT
        </paramValue>
        <paramValue name="MultiBlastDatabaseOrganism">Plasmodium falciparum 3D7</paramValue>
      </testParamValues>
      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="BlastQuerySequence">
          CTTAGAGACAAGTATGGCAGTATAGAAGGTCTAGCAAAAGAATTGGGGTCTGACCCTGCCACAGGCCTTTTGAAACCTACCGTTTTGCTCCATCGAAAAACCTATGGTAGCAATACAATG
        </paramValue>
      </testParamValues>
      <testParamValues includeProjects="TrichDB">
        <paramValue name="BlastQuerySequence">
          AAGACACTCGCTGAATTAAGAAAGCGCAAATTAGAGGGTGTTGTTCTCATCTACGGCTTCCCAGAGCCAACACGCGCCCACTGCGACTTCGAACCAGTCTTCCGCCAGGAATCCTGCTTC
        </paramValue>
        <paramValue name="MultiBlastDatabaseOrganism">Trichomonas vaginalis G3</paramValue>
      </testParamValues>
      <!--TODO revisit the BLAST sequence..it was picked from Sanger-->
      <testParamValues includeProjects="TriTrypDB,EuPathDB">
        <paramValue name="BlastQuerySequence">ATGCAACTCCAAAGGTTGGGTGCTCCACTACTTAAAAGGCTTGTGGGGGGATGCATACGC</paramValue>
        <paramValue name="MultiBlastDatabaseOrganism">Trypanosoma brucei TREU927</paramValue>
      </testParamValues>
      <testParamValues includeProjects="AmoebaDB">
        <paramValue name="BlastQuerySequence">
          ACCGATAGTATTTATTCCAGGGATTCTTGCGTCTATGTTAGAAGGGGATATTAATATAAAAGATATCAGTAAAACACCACTTCCAGAGAAATGTGATACACAAGTAGAATATGAAAGACTTTGGG
        </paramValue>
        <paramValue name="MultiBlastDatabaseOrganism">Entamoeba dispar SAW760</paramValue>
      </testParamValues>
      <testParamValues includeProjects="MicrosporidiaDB">
        <paramValue name="BlastQuerySequence">
          GTTTTGGCAGACGGTATGTTTAACAGGAAAATCTCCCATGAATCTGACGGGAATATTCATAGTATTGATTTCCATGGCCTAACCATGTGTGATATTCCGGTGATAAAAAGAGACAGATATAC
        </paramValue>
        <paramValue name="MultiBlastDatabaseOrganism">Encephalitozoon cuniculi GB-M1</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PiroplasmaDB">
        <paramValue name="BlastQuerySequence">
          TATGCAATCAGGTATCTATCTCATCAATCCTTACGCTCAGCGCTGCCCAATTGGGAAGAGCAAATGTGGACCTGAGCATGATTCCACCCTAGGAAAGTGTGCCATGTACTCTGGTTG
        </paramValue>
        <paramValue name="MultiBlastDatabaseOrganism">Babesia bovis T2Bo</paramValue>
      </testParamValues>
      <testParamValues includeProjects="FungiDB,HostDB,SchistoDB,UniDB,VectorBase,InitDB">
        <paramValue name="BlastQuerySequence"></paramValue>
        <paramValue name="MultiBlastDatabaseOrganism"></paramValue>
      </testParamValues>


      <!--The order of these params has changed for multi-blast. Thus the param query refs need to change accordingly-->
      <paramRef ref="sharedParams.MultiBlastDatabaseType" quote="false" noTranslation="false"
                default="AnnotatedTranscripts"/>
      <paramRef ref="sharedParams.BlastAlgorithm" quote="false" noTranslation="false"/>
      <paramRef ref="sharedParams.BlastDatabaseOrganism" quote="false" noTranslation="false"
                default="%%primaryOrthoOrganism%%"
                queryRef="SharedVQ.MultiBlastOrganismFiles"
                dependedParamRef="sharedParams.MultiBlastDatabaseType"/>
      <paramRef ref="sharedParams.BlastQuerySequence"/>
      <paramRef ref="sharedParams.BlastJobDescription"/>

      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.ExpectationValue"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.NumQueryResults"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.MaxMatchesQueryRange"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.WordSize"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.ScoringMatrix"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.MatchMismatchScore"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.GapCosts"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.CompAdjust"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.FilterLowComplex"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.SoftMask"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="sharedParams.LowerCaseMask"/>

      <wsColumn name="source_id" width="50" wsName="identifier"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="summary" width="3000"/>
      <wsColumn name="alignment" columnType="clob"/>
      <wsColumn name="evalue_mant" columnType="float"/>
      <wsColumn name="evalue_exp" columnType="number"/>
      <wsColumn name="score" columnType="float"/>
    </processQuery>


    <!--

        <processQuery name="GenesBySimilarity" includeProjects="EuPathDB"
              processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
           <paramRef ref="geneParams.BlastDatabaseType"/>
           <paramRef ref="geneSimilarityParams.BlastDatabaseOrganism"/>
           <paramRef ref="sharedParams.BlastAlgorithm"/>
           <paramRef ref="sharedParams.BlastQuerySequence"/>
           <paramRef ref="sharedParams.-e"/>
           <paramRef ref="sharedParams.-v"/>
           <paramRef ref="sharedParams.-b"/>
           <paramRef ref="sharedParams.-filter"/>
            <wsColumn name="source_id" width="50" wsName="source_id"/>
            <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
            <wsColumn name="project_id" width="20" />
            <wsColumn name="matched_result" width="1" wsName="matched_result"/>
            <wsColumn name="TabularRow" width="3000"/>
            <wsColumn name="Alignment" width="4000"/>
            <wsColumn name="Header" width="3000"/>
            <wsColumn name="Footer" width="3000"/>
        </processQuery>
    -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Motif search -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesByMotifSearch" excludeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.motifsearch.ProteinMotifPlugin">
      <postCacheUpdateSql>
        <sql>
          <![CDATA[
            -- set gene_source_id
            UPDATE ##WDK_CACHE_TABLE##
            SET gene_source_id = (SELECT gene_source_id
                                  FROM apidbTuning.transcriptAttributes
                                  WHERE source_id = ##WDK_CACHE_TABLE##.source_id)
            WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
              AND gene_source_id is null
          ]]>
        </sql>
      </postCacheUpdateSql>
      <postCacheUpdateSql excludeProjects="UniDB">
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
                        (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (SELECT max(wdk_row_id) as the_max FROM matches)
            ,  mismatches AS (
                SELECT source_id, gene_source_id, project_id
                FROM apidbTuning.transcriptAttributes
                WHERE gene_source_id in (select gene_source_id from matches)
              EXCEPT
                SELECT source_id, gene_source_id, project_id
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##,
                   row_number() OVER () + the_max, 0, source_id, gene_source_id,  project_id, 'N'
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>
      <postCacheUpdateSql includeProjects="UniDB">
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
                        (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (SELECT max(wdk_row_id) as the_max FROM matches)
            , mismatches AS (
                SELECT source_id, gene_source_id
                FROM apidbTuning.transcriptAttributes
                WHERE gene_source_id in (select gene_source_id from matches)
              EXCEPT
                SELECT source_id, gene_source_id
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##,
                   row_number() OVER () + the_max, 0, source_id, gene_source_id, 'n'
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>
      <testParamValues includeProjects="PiroplasmaDB">
        <paramValue name="motif_organism">Theileria parva strain Muguga</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="motif_organism">Plasmodium berghei ANKA</paramValue>
      </testParamValues>
      <testParamValues includeProjects="MicrosporidiaDB">
        <paramValue name="motif_organism">Encephalitozoon cuniculi EC1</paramValue>
      </testParamValues>


      <paramRef ref="sharedParams.motif_expression" noTranslation="true"/>
      <paramRef ref="geneSimilarityParams.motif_organism" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="SourceID"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20" wsName="ProjectId"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="Locations" columnType="clob"/>
      <wsColumn name="MatchCount" width="10"/>
      <wsColumn name="Sequence" columnType="clob"/>
      <wsColumn name="MatchSequences" columnType="clob"/>
    </processQuery>

    <processQuery name="GenesByMotifSearch" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneSimilarityParams.motif_organism" quote="false"/>
      <paramRef ref="sharedParams.motif_expression" noTranslation="true"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="Locations" columnType="clob"/>
      <wsColumn name="MatchCount" width="10"/>
      <wsColumn name="Sequence" columnType="clob"/>
      <wsColumn name="MatchSequences" columnType="clob"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- text search -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesByText"
                  processName="org.apidb.apicomplexa.wsfplugin.solrsearch.SiteSearchPlugin">
      <postCacheUpdateSql>
        <sql>
          <![CDATA[
            UPDATE ##WDK_CACHE_TABLE##
            SET source_id = (SELECT min(source_id)
                             FROM apidbTuning.transcriptAttributes
                             WHERE gene_source_id = ##WDK_CACHE_TABLE##.gene_source_id)
            WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
              AND source_id is null
          ]]>
        </sql>
      </postCacheUpdateSql>

      <postCacheUpdateSql excludeProjects="UniDB">
        <sql>
          <![CDATA[
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
              (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result, max_score)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (SELECT max(wdk_row_id) as the_max FROM matches)
            , mismatches AS (
                SELECT ta.source_id, ta.gene_source_id, max_score, ta.project_id
                FROM apidbTuning.transcriptAttributes ta, matches
                WHERE ta.gene_source_id = matches.gene_source_id
              EXCEPT
                SELECT source_id, gene_source_id, max_score, project_id
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##,
              row_number() OVER () + the_max, 0, source_id, gene_source_id,  project_id, 'Y', max_score
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>

      <postCacheUpdateSql includeProjects="UniDB">
        <sql>
          <![CDATA[
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
              (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result, max_score)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (select max(wdk_row_id) as the_max from matches)
            , mismatches AS (
                SELECT ta.source_id, ta.gene_source_id, max_score
                FROM apidbTuning.transcriptAttributes ta, matches
                WHERE ta.gene_source_id = matches.gene_source_id
              EXCEPT
                SELECT source_id, gene_source_id, max_score
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##,
              row_number() OVER () + the_max, 0, source_id, gene_source_id, 'Y', max_score
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>

      <postCacheUpdateSql excludeProjects="UniDB">
        <sql>
          <![CDATA[
            DELETE from ##WDK_CACHE_TABLE##
            WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
              AND project_id = 'EuPathDB'
          ]]>
        </sql>
      </postCacheUpdateSql>

      <paramRef ref="organismParams.text_search_organism" queryRef="organismVQ.forGeneTextSearch"/>
      <paramRef ref="sharedParams.text_expression"/>
      <paramRef ref="sharedParams.document_type" default="gene"/>
      <paramRef ref="sharedParams.text_fields"/>
      <!-- the parameter below caches the results for 30 minutes -->
      <paramRef ref="sharedParams.timestamp" interval="1800"/>
      <wsColumn name="gene_source_id" width="50"/>
      <wsColumn name="source_id" width="50"/>
      <wsColumn name="project_id" width="20" excludeProjects="UniDB"/>
      <wsColumn name="matched_result" width="1"/>
      <wsColumn name="max_score" width="10" columnType="float"/>
    </processQuery>

    <processQuery name="GenesByPhenotypeText" includeProjects="PlasmoDB,FungiDB,UniDB,TriTrypDB"
                  processName="org.apidb.apicomplexa.wsfplugin.solrsearch.SiteSearchPlugin">
      <postCacheUpdateSql>
        <sql>
          <![CDATA[
            UPDATE ##WDK_CACHE_TABLE##
            SET source_id = (SELECT min(source_id)
                             FROM apidbTuning.transcriptAttributes
                             WHERE gene_source_id = ##WDK_CACHE_TABLE##.gene_source_id)
            WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
              AND source_id is null
          ]]>
        </sql>
      </postCacheUpdateSql>

      <postCacheUpdateSql excludeProjects="UniDB">
        <sql>
          <![CDATA[
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
              (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result, max_score)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset as (SELECT max(wdk_row_id) as the_max FROM matches)
            , mismatches as (
                SELECT ta.source_id, ta.gene_source_id, max_score, ta.project_id
                FROM apidbTuning.transcriptAttributes ta, matches
                WHERE ta.gene_source_id = matches.gene_source_id
              EXCEPT
                SELECT source_id, gene_source_id, max_score, project_id
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##,
              row_number() OVER () + the_max, 0, source_id, gene_source_id,  project_id, 'Y', max_score
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>

      <postCacheUpdateSql includeProjects="UniDB">
        <sql>
          <![CDATA[
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
              (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result, max_score)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (SELECT max(wdk_row_id) as the_max from matches)
            , mismatches AS (
                SELECT ta.source_id, ta.gene_source_id, max_score
                FROM apidbTuning.transcriptAttributes ta, matches
                WHERE ta.gene_source_id = matches.gene_source_id
              EXCEPT
                SELECT source_id, gene_source_id, max_score
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##,
              row_number() OVER () + the_max, 0, source_id, gene_source_id, 'Y', max_score
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>

      <paramRef ref="organismParams.text_search_organism" queryRef="organismVQ.forGeneTextSearch"/>
      <paramRef ref="sharedParams.text_expression"/>
      <paramRef ref="sharedParams.document_type" default="gene"/>
      <paramRef ref="genePhenotypeParams.text_fields"/>
      <!-- the parameter below caches the results for 30 minutes -->
      <paramRef ref="sharedParams.timestamp" interval="1800"/>
      <wsColumn name="gene_source_id" width="50"/>
      <wsColumn name="source_id" width="50"/>
      <wsColumn name="project_id" width="20" excludeProjects="UniDB"/>
      <wsColumn name="matched_result" width="1"/>
      <wsColumn name="max_score" width="10" columnType="float"/>
    </processQuery>


    <processQuery name="GenesByPhenotypeText" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.text_search_organism" quote="false"/>
      <paramRef ref="sharedParams.text_expression" noTranslation="true"/>
      <paramRef ref="geneParams.text_fields" quote="false"/>
      <paramRef ref="sharedParams.timestamp"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="max_score" width="10" columnType="float"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Orthologs -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByOrthologs" doNotTest="true">
      <paramRef ref="geneParams.gene_result"/>
      <paramRef ref="organismParams.organism" excludeProjects="EuPathDB"/>
      <paramRef ref="organismParams.organism" includeProjects="EuPathDB" noTranslation="true" quote="true"/>
      <paramRef ref="geneParams.isSyntenic" excludeProjects="EuPathDB"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="project_id"/>
      <column name="wdk_weight"/>
      <column name="orthologs"/>

      <sql excludeProjects="EuPathDB">
        <![CDATA[
          WITH inputs AS (
            SELECT gene_source_id, max(wdk_weight) AS wdk_weight
            FROM $$gene_result$$
            GROUP BY gene_source_id
          )
          select otx.ortho_gene_source_id as gene_source_id,
                 otx.ortho_source_id as source_id,
                 'Y' AS matched_result,
                 max(otx.ortho_project_id) as project_id,
                 substr(string_agg(otx.source_id, ','  ORDER BY otx.source_id) , 1, 4000) AS orthologs,
                 max(inputs.wdk_weight) AS wdk_weight
          from inputs, apidbTuning.OrthologousTranscripts otx
          where inputs.gene_source_id = otx.source_id
             and (otx.is_syntenic = 1 OR $$isSyntenic$$ = 'no')
             and otx.ortho_taxon_id IN ($$organism$$)
          group by otx.ortho_source_id, otx.ortho_gene_source_id

        ]]>
      </sql>


      <!-- NOTE: the following works on component sites too if we get rid of the "syntenic" -->
      <sql includeProjects="EuPathDB">
        <![CDATA[
          SELECT gb.gene_source_id, gb.source_id, gb.project_id as project_id, 'Y' as matched_result, groups.wdk_weight,
                 groups.orthologs
          FROM ApidbTuning.TranscriptAttributes gb,
               (SELECT ga.orthomcl_name,
                       string_agg(DISTINCT ga.gene_source_id ,', ') as orthologs,
                       max(gr.wdk_weight) as wdk_weight
                FROM ApidbTuning.TranscriptAttributes ga,
                     $$gene_result$$ gr
                WHERE ga.gene_source_id = gr.gene_source_id
                GROUP BY ga.orthomcl_name) groups
          WHERE gb.orthomcl_name = groups.orthomcl_name
            AND gb.organism IN ($$organism$$)
        ]]>
      </sql>

    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Go Term -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByGoTerm" excludeProjects="EuPathDB">

      <testParamValues>
        <paramValue name="go_typeahead">N/A</paramValue>
        <paramValue name="go_term">binding</paramValue>
      </testParamValues>

      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.go_term_evidence"/>
      <paramRef ref="geneParams.go_term_slim"/>
      <paramRef ref="geneParams.go_typeahead"/>
      <paramRef ref="geneParams.go_term"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="evidence_code"/>

      <sql>
        <![CDATA[
          SELECT distinct gs.transcript_source_id AS source_id, gs.gene_source_id, ta.project_id,
            'Y' as matched_result,
            string_agg(distinct gs.evidence_code, ', ') as evidence_code,
            -- listagg(gs.is_go_slim, ',')WITHIN GROUP (ORDER BY gs.is_go_slim) as is_go_slim
            string_agg(distinct gs.is_go_slim::varchar, ', ')  as is_go_slim
          FROM ApidbTuning.TranscriptAttributes ta, ApidbTuning.GoTermSummary gs
          WHERE ta.taxon_id IN ($$organism$$)
            AND ta.aa_sequence_id = gs.aa_sequence_id
            AND CASE WHEN gs.evidence_code = 'IEA' THEN 'Computed' ELSE 'Curated' END in ($$go_term_evidence$$)
            --   and case when $$go_term_slim$$ = 'Yes' and gs.is_go_slim = '1' then 1
            --           when ($$go_term_slim$$ = 'No' and (gs.is_go_slim = '1' or gs.is_go_slim = '0')) then 1
            --           else 0
            --     end = 1
                AND (
                  gs.go_id IN ($$go_typeahead$$) OR (
                    $$go_term$$ != 'N/A' AND (
                      lower(gs.go_term_name) like lower(REPLACE($$go_term$$, '*', '%')) OR
                      gs.go_id = upper($$go_term$$)
                    )
                  )
                )
          GROUP BY gs.transcript_source_id, gs.gene_source_id, ta.project_id
          ORDER BY gs.transcript_source_id
        ]]>
      </sql>
    </sqlQuery>


    <processQuery name="GenesByGoTerm" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.go_term_evidence"/>
      <paramRef ref="geneParams.go_term_slim" quote="false"/>
      <paramRef ref="geneParams.go_typeahead"/>
      <paramRef ref="geneParams.go_term"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="evidence_code" width="50" wsName="evidence_code"/>
      <wsColumn name="is_go_slim" width="20" wsName="is_go_slim"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Go Term  CL-->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByGoTermCL" includeProjects="GiardiaDB,TriTrypDB,UniDB">
      <postCacheUpdateSql>
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
            (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ) , row_offset AS (
              SELECT max(wdk_row_id) AS the_max
              FROM matches
             ) , mismatches AS (
              SELECT source_id, gene_source_id, project_id
              FROM apidbTuning.transcriptAttributes
              WHERE gene_source_id IN ( SELECT gene_source_id FROM matches )
                AND 1 = 0
              EXCEPT
              SELECT source_id, gene_source_id, project_id
              FROM matches
             )
            SELECT ##WDK_CACHE_INSTANCE_ID##
              , row_number() OVER () + the_max
              , 0
              , source_id
              , gene_source_id
              , project_id
              , 'N'
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>

      <testParamValues>
        <paramValue name="go_typeahead_cl">N/A</paramValue>
        <paramValue name="go_term">binding</paramValue>
      </testParamValues>

      <paramRef ref="organismParams.organismWithCellularLocImages"/>
      <paramRef ref="geneParams.tagType" includeProjects="TriTrypDB,UniDB"/>
      <paramRef ref="geneParams.go_typeahead_cl"/>
      <paramRef ref="geneParams.go_term"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="evidence_code"/>
      <column name="note"/>
      <column name="image"/>
      <sql>
        <![CDATA[
          SELECT gs.transcript_source_id AS source_id
            , gs.gene_source_id
            , ta.project_id
            , 'Y' AS matched_result
            , string_agg(DISTINCT gs.evidence_code, ', ') AS evidence_code
            , string_agg(regexp_replace(fi.note, ' <a href.+$', NULL), '; ') AS note
            , max(fi.image_uri) AS image
          FROM apidbtuning.transcriptattributes ta, apidbtuning.gotermsummary gs, apidb.nafeatureimage fi
          WHERE ta.taxon_id IN ($$organismWithCellularLocImages$$)
            -- Cellular loc datasets
            AND gs.source IN ('TrypTag', 'DawsonLab')
            AND ta.aa_sequence_id = gs.aa_sequence_id
            AND (
              gs.go_id IN ($$go_typeahead_cl$$)
              OR (
                gs.go_term_name LIKE REPLACE($$go_term$$, '*', '%')
                OR gs.go_id LIKE REPLACE($$go_term$$, '*', '%')
                OR gs.go_id || ' : ' || gs.go_term_name LIKE REPLACE($$go_term$$, '*', '%')
              )
            )
            AND ((fi.image_type = 'GFP' AND ta.project_id = 'GiardiaDB') OR
                 (fi.image_type = '$$tagType$$' AND ta.project_id = 'TriTrypDB'))
            AND (fi.na_feature_id = ta.gene_na_feature_id OR fi.na_feature_id = ta.na_feature_id)
          GROUP BY gs.transcript_source_id, gs.gene_source_id, ta.project_id
        ]]>
      </sql>
    </sqlQuery>


    <processQuery name="GenesByGoTermCL" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organismWithCellularLocImages"/>
      <paramRef ref="geneParams.go_typeahead_cl"/>
      <paramRef ref="geneParams.go_term"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="evidence_code" width="20" wsName="evidence_code"/>
      <wsColumn name="note" width="20" wsName="note"/>
    </processQuery>

    <!--- GO TERM CL TriTrypSpec-->

    <sqlQuery name="GenesByGoTermCLTriTryp" includeProjects="TriTrypDB,UniDB">
      <postCacheUpdateSql>
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
            (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ) , row_offset AS (
              SELECT max(wdk_row_id) AS the_max
              FROM matches
            ) , mismatches AS (
                SELECT source_id, gene_source_id, project_id
                FROM apidbTuning.transcriptAttributes
                WHERE gene_source_id IN ( SELECT gene_source_id FROM matches )
                  AND 1 = 0
              EXCEPT
                SELECT source_id, gene_source_id, project_id
                FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##
              , row_number() OVER () + the_max
              , 0
              , source_id
              , gene_source_id
              , project_id
              , 'N'
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>

      <testParamValues>
        <paramValue name="go_typeahead_cl">N/A</paramValue>
        <paramValue name="go_term">binding</paramValue>
      </testParamValues>

      <paramRef ref="organismParams.organismWithCellularLocImages"/>
      <paramRef ref="geneParams.tagType"/>
      <paramRef ref="geneParams.go_typeahead_cl"/>
      <paramRef ref="geneParams.go_term"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="evidence_code"/>
      <column name="note"/>
      <column name="image"/>
      <sql>
        <![CDATA[
          SELECT gs.transcript_source_id AS source_id
            , gs.gene_source_id
            , ta.project_id
            , 'Y' AS matched_result
            , string_agg(DISTINCT gs.evidence_code, ', ') AS evidence_code
            , string_agg(regexp_replace(fi.note, ' <a href.+$', NULL), '; ') AS note
            , fi.image_uri AS image
          FROM apidbtuning.transcriptattributes ta, apidbtuning.gotermsummary gs, apidb.nafeatureimage fi
          WHERE ta.taxon_id IN ($$organismWithCellularLocImages$$)
            -- Cellular loc datasets
            AND gs.source IN ('TrypTag', 'DawsonLab')
            AND ta.aa_sequence_id = gs.aa_sequence_id
            AND (
              gs.go_id IN ($$go_typeahead_cl$$)
              OR (
                gs.go_term_name LIKE REPLACE($$go_term$$, '*', '%')
                OR gs.go_id LIKE REPLACE($$go_term$$, '*', '%')
                OR gs.go_id || ' : ' || gs.go_term_name LIKE REPLACE($$go_term$$, '*', '%')
              )
            )
            AND fi.image_type = $$tagType$$
            AND (fi.na_feature_id = ta.gene_na_feature_id OR fi.na_feature_id = ta.na_feature_id)
          GROUP BY gs.transcript_source_id, gs.gene_source_id, fi.image_uri, fi.image_type, ta.project_id
        ]]>
      </sql>
    </sqlQuery>


    <processQuery name="GenesByGoTermCLTriTryp" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organismWithCellularLocImages"/>
      <paramRef ref="geneParams.go_typeahead_cl"/>
      <paramRef ref="geneParams.go_term"/>
      <paramRef ref="geneParams.tagType"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="evidence_code" width="20" wsName="evidence_code"/>
      <wsColumn name="note" width="20" wsName="note"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Signal Peptide -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesWithSignalPeptide" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.signalp_version"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="sigp_sum_score"/>
      <column name="nn_d_score"/>
      <column name="hmm_signal_probability"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT ta.source_id
            , ta.gene_source_id
            , 'Y' as matched_result
            , ta.project_id
            , -1 as sigp_sum_score
            , -1 as nn_d_score
            , -1 as  hmm_signal_probability
          FROM apidbtuning.transcriptAttributes ta, apidbtuning.signalPeptideDomains spd
          WHERE ta.taxon_id in ($$organism$$)
            AND ta.aa_sequence_id = spd.aa_sequence_id
            AND spd.algorithm_name = $$signalp_version$$
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesWithSignalPeptide" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="sigp_sum_score" width="32" wsName="sigp_sum_score"/>
      <wsColumn name="nn_d_score" width="32" wsName="nn_d_score"/>
      <wsColumn name="hmm_signal_probability" width="32" wsName="hmm_signal_probability"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- IsoElectric Point -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByIsoelectricPoint" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.min_isoelectric_point"/>
      <paramRef ref="geneParams.max_isoelectric_point"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="isoelectric_point"/>
      <sql>
        <![CDATA[
          SELECT isoelectric_point, source_id, gene_source_id, 'Y' as matched_result, project_id
          FROM ApidbTuning.TranscriptAttributes
          WHERE isoelectric_point BETWEEN $$min_isoelectric_point$$
            AND $$max_isoelectric_point$$
            AND taxon_id in ($$organism$$)
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByIsoelectricPoint"
                  includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.min_isoelectric_point"/>
      <paramRef ref="geneParams.max_isoelectric_point"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Molecular Weight -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByMolecularWeight" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.min_molecular_weight"/>
      <paramRef ref="geneParams.max_molecular_weight"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT source_id, gene_source_id, 'Y' as matched_result, project_id
          FROM ApidbTuning.TranscriptAttributes
          WHERE molecular_weight <= $$max_molecular_weight$$
            AND molecular_weight >= $$min_molecular_weight$$
            AND taxon_id in ($$organism$$)
        ]]>
      </sql>
    </sqlQuery>


    <processQuery name="GenesByMolecularWeight" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.min_molecular_weight"/>
      <paramRef ref="geneParams.max_molecular_weight"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- IntronJunctions-->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByIntronJunctions" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism" queryRef="organismVQ.withIntronJunctions" quote="false">
        <visibleHelp><![CDATA[
          Note that this search is only available for genomes to which RNA sequencing reads have been mapped. 
          ]]></visibleHelp>
      </paramRef>
      <paramRef ref="geneParams.min_total_unique"/>
      <paramRef ref="geneParams.percent_max"/>
      <paramRef ref="geneParams.max_flanking_bp" excludeProjects="NotVectorBase"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="num_novel"/>
      <column name="max_percent_max"/>
      <column name="max_total_unique"/>
      <column name="max_total_isrpm"/>
      <sql excludeProjects="NotVectorBase">
        <![CDATA[
          WITH core AS (
            SELECT ga.gene_source_id
            , ga.source_id
            , ga.project_id
            , gij.total_unique
            , gij.total_isrpm
            , gij.annotated_intron
            FROM apidbtuning.geneintronjunction gij, apidbtuning.transcriptattributes ga
            WHERE ga.na_sequence_id = gij.na_sequence_id
              AND (
                gij.segment_end BETWEEN ga.start_min - $$max_flanking_bp$$ AND ga.end_max + $$max_flanking_bp$$
                OR gij.segment_start BETWEEN ga.start_min - $$max_flanking_bp$$ AND ga.end_max + $$max_flanking_bp$$
              )
              AND gij.is_reversed = ga.is_reversed
              AND gij.total_unique >= $$min_total_unique$$
              AND gij.taxon_id IN ($$organism$$)
          ) , gmi AS (
            SELECT gene_source_id, source_id, max(total_unique) AS max_unique, max(total_isrpm) AS max_isrpm
            FROM core
            GROUP BY gene_source_id, source_id
          )
          SELECT core.gene_source_id
            , core.source_id
            , 'Y' AS matched_result
            , core.project_id
            , round((max(core.total_unique) / gmi.max_unique) * 100, 1) AS max_percent_max
            , max(total_unique) AS max_total_unique
            , max(core.total_isrpm) AS max_total_isrpm
            , count(*) AS num_novel
          FROM core, gmi
          WHERE core.source_id = gmi.source_id
            AND core.annotated_intron = 'No'
            AND (core.total_unique / gmi.max_unique) * 100 BETWEEN $$percent_max.min$$ AND $$percent_max.max$$
          GROUP BY core.gene_source_id, core.source_id, core.project_id, gmi.max_unique, gmi.max_isrpm
        ]]>
      </sql>
      <sql includeProjects="NotVectorBase">
        <![CDATA[
          SELECT ga.gene_source_id, ga.source_id, ga.project_id, 'Y' as matched_result, max(gij.total_unique) as max_total_unique,
              max(gij.total_isrpm) as max_total_isrpm, max(gij.percent_max) as max_percent_max, count(*) as num_novel
          FROM apidbtuning.geneintronjunction gij, apidbtuning.transcriptattributes ga
          where ga.gene_source_id = gij.gene_source_id
            AND gij.total_isrpm >= $$min_total_unique$$
            AND gij.annotated_intron = 'No'
            AND gij.percent_max between $$percent_max.min$$ and $$percent_max.max$$
            AND gij.taxon_id in ($$organism$$)
          GROUP BY ga.gene_source_id, ga.source_id, ga.project_id
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- ExonCount -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByExonCount" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.scope"/>
      <paramRef ref="geneParams.num_exons_gte"/>
      <paramRef ref="geneParams.num_exons_lte"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
           SELECT distinct source_id, gene_source_id, 'Y' as matched_result, project_id
           FROM ApidbTuning.TranscriptAttributes
           WHERE taxon_id IN ($$organism$$)
             AND $$scope$$  >= $$num_exons_gte$$
             AND $$scope$$ <= $$num_exons_lte$$
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByExonCount"
                  includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.scope"/>
      <paramRef ref="geneParams.num_exons_gte"/>
      <paramRef ref="geneParams.num_exons_lte"/>

      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- ParalogCount -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByParalogCount" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.num_paralogs"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT distinct source_id, gene_source_id, 'Y' as matched_result, project_id
          FROM ApidbTuning.TranscriptAttributes
          WHERE taxon_id IN ($$organism$$)
           AND gene_paralog_number >= $$num_paralogs.min$$
           AND gene_paralog_number <= $$num_paralogs.max$$
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByParalogCount"
                  includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.num_paralogs"/>

      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Ortholog pattern -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByOrthologPattern" excludeProjects="EuPathDB">

      <testParamValues includeProjects="FungiDB,HostDB,SchistoDB,UniDB,VectorBase,InitDB">
        <paramValue name="included_species">FILL</paramValue>
        <paramValue name="excluded_species">FILL</paramValue>
        <paramValue name="organism">FILL</paramValue>
      </testParamValues>

      <testParamValues includeProjects="PiroplasmaDB">
        <paramValue name="included_species">Eukaryota</paramValue>
        <paramValue name="excluded_species">Bacteria</paramValue>
        <paramValue name="organism">Babesia bovis</paramValue>
        <paramValue name="phyletic_indent_map">ARCH</paramValue>
        <paramValue name="phyletic_term_map">rnor</paramValue>
      </testParamValues>

      <testParamValues includeProjects="AmoebaDB">
        <paramValue name="included_species">Eukaryota</paramValue>
        <paramValue name="excluded_species">Bacteria</paramValue>
        <paramValue name="organism">Entamoeba dispar</paramValue>
        <paramValue name="phyletic_indent_map">ARCH</paramValue>
        <paramValue name="phyletic_term_map">rnor</paramValue>
      </testParamValues>

      <testParamValues includeProjects="MicrosporidiaDB">
        <paramValue name="included_species">Fungi</paramValue>
        <paramValue name="excluded_species">Bacteria</paramValue>
        <paramValue name="organism">Encephalitozoon cuniculi</paramValue>
        <paramValue name="phyletic_indent_map">ARCH</paramValue>
        <paramValue name="phyletic_term_map">rnor</paramValue>
      </testParamValues>

      <testParamValues includeProjects="CryptoDB">
        <paramValue name="included_species">Alveolates</paramValue>
        <paramValue name="excluded_species">Bacteria</paramValue>
        <paramValue name="phyletic_indent_map">ARCH</paramValue>
        <paramValue name="phyletic_term_map">rnor</paramValue>
      </testParamValues>

      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="included_species">fru</paramValue>
        <paramValue name="excluded_species">Fungi</paramValue>
        <paramValue name="organism">Plasmodium falciparum</paramValue>
        <paramValue name="phyletic_indent_map">ARCH</paramValue>
        <paramValue name="phyletic_term_map">rnor</paramValue>
      </testParamValues>

      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="included_species">fru</paramValue>
        <paramValue name="excluded_species">Fungi</paramValue>
        <paramValue name="organism">Giardia Assemblage A isolate WB</paramValue>
        <paramValue name="phyletic_indent_map">ARCH</paramValue>
        <paramValue name="phyletic_term_map">rnor</paramValue>
      </testParamValues>

      <testParamValues includeProjects="TriTrypDB">
        <paramValue name="included_species">fru</paramValue>
        <paramValue name="excluded_species">Fungi</paramValue>
        <paramValue name="organism">Leishmania major</paramValue>
        <paramValue name="phyletic_indent_map">ARCH</paramValue>
        <paramValue name="phyletic_term_map">rnor</paramValue>
      </testParamValues>

      <testParamValues includeProjects="ToxoDB">
        <paramValue name="included_species">fru</paramValue>
        <paramValue name="excluded_species">Fungi</paramValue>
        <paramValue name="organism">Toxoplasma gondii</paramValue>
        <paramValue name="phyletic_indent_map">ARCH</paramValue>
        <paramValue name="phyletic_term_map">rnor</paramValue>
      </testParamValues>

      <testParamValues includeProjects="TrichDB">
        <paramValue name="included_species">fru</paramValue>
        <paramValue name="excluded_species">Fungi</paramValue>
        <paramValue name="organism">Trichomonas vaginalis</paramValue>
        <paramValue name="phyletic_indent_map">ARCH</paramValue>
        <paramValue name="phyletic_term_map">rnor</paramValue>
      </testParamValues>

      <paramRef ref="geneParams.profile_pattern"/>
      <paramRef ref="geneParams.included_species"/>
      <paramRef ref="geneParams.excluded_species"/>
      <paramRef ref="geneParams.phyletic_indent_map"/>
      <paramRef ref="geneParams.phyletic_term_map"/>
      <paramRef ref="organismParams.organism"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT * FROM (
              SELECT DISTINCT ta.source_id, ta.gene_source_id, 'Y' as matched_result,
                   ta.project_id, ta.taxon_id
              FROM ApidbTuning.TranscriptAttributes ta
              WHERE ta.orthomcl_name IS NULL
                AND (ta.gene_type = 'protein coding' OR ta.gene_type = 'protein coding gene')
                AND ta.taxon_id in ($$organism$$)
                AND $$profile_pattern$$ not like '%:Y%'
             UNION
              SELECT DISTINCT ta.source_id, ta.gene_source_id, 'Y' as matched_result,
                    ta.project_id, ta.taxon_id
              FROM apidbTuning.GroupPhylogeneticProfile gpp, ApidbTuning.TranscriptAttributes ta
              WHERE gpp.profile_string LIKE $$profile_pattern$$
                AND gpp.orthomcl_name = ta.orthomcl_name
                AND ta.taxon_id in ($$organism$$)
          ) t
          ORDER BY taxon_id,source_id
        ]]>
      </sql>
    </sqlQuery>

    <!--
     phlyetic_indent_map and phylectic_term_map are not used by the query.  They are for display purposes only.  Thus, the process query has trouble with these parameters and forces us to hard code default values into the WdkQueryPlugin.java file.
    Currently :
      phyletic_indent_map = ARCH
      phyletic_term_map = rnor

    if these values change, then they must be updated in the WdkQueryPlugin.java file (search for "workaround" to find the lines)
    -->
    <processQuery name="GenesByOrthologPattern" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <testParamValues>
        <paramValue name="included_species">Alveolates</paramValue>
        <paramValue name="excluded_species">Bacteria</paramValue>
        <paramValue name="phyletic_indent_map">ARCH</paramValue>
        <paramValue name="phyletic_term_map">rnor</paramValue>
      </testParamValues>

      <paramRef ref="geneParams.profile_pattern" noTranslation="true"/>
      <paramRef ref="geneParams.included_species" noTranslation="true"/>
      <paramRef ref="geneParams.excluded_species" noTranslation="true"/>
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.phyletic_indent_map" noTranslation="false" quote="false"/>
      <paramRef ref="geneParams.phyletic_term_map" noTranslation="false" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Metabolic Pathway -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByMetabolicPathwayHagai" includeProjects="ToxoDB,PlasmoDB,UniDB">
      <paramRef ref="organismParams.org_with_Hagai_pathways"/>
      <paramRef ref="geneParams.metabolic_pathway"/>
      <column name="project_id"/>
      <column name="gene_source_id"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, ta.gene_source_id, 'Y' as matched_result, ta.project_id
          FROM ApidbTuning.TranscriptAttributes ta, dots.DbRefNaFeature drnf, sres.DbRef dr,
              (SELECT idrnf.na_feature_id
               FROM dots.DbRefNaFeature idrnf, sres.DbRef idr
               WHERE idr.lowercase_secondary_identifier = $$metabolic_pathway$$
                 AND idrnf.db_ref_id = idr.db_ref_id) internal
          WHERE internal.na_feature_id = drnf.na_feature_id
            AND ta.gene_na_feature_id = drnf.na_feature_id
            AND drnf.db_ref_id = dr.db_ref_id
	        AND ta.organism = $$org_with_Hagai_pathways$$
          GROUP BY ta.project_id,ta.source_id,ta.gene_source_id
        ]]>
      </sql>
    </sqlQuery>
    <!--
        <processQuery name="GenesByMetabolicPathwayHagai" includeProjects="EuPathDB"
                      processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
            <paramRef ref="organismParams.org_with_Hagai_pathways"  quote="false" />

            <paramRef ref="geneParams.metabolic_pathway" quote="false"/>
            <wsColumn name="source_id" width="50" wsName="source_id"/>
            <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
            <wsColumn name="project_id" width="20" />
            <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        </processQuery>
    -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Taxon (Species) -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByTaxon" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, ta.gene_source_id, 'Y' as matched_result, ta.project_id
          FROM ApidbTuning.TranscriptAttributes ta
          WHERE ta.taxon_id in ($$organism$$)
          ORDER BY ta.source_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByTaxon" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Genes by wgcna module -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByWGCNAModule" excludeProjects="EuPathDB">
        <paramRef ref="geneParams.wgcnaParam"/>
      <paramRef ref="geneParams.wgcnaDataset"/>
      <paramRef ref="geneParams.wgcna_correlation_cutoff"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="correlation_coefficient"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id
            , ta.gene_source_id
            , 'Y' as matched_result
            , nfw.correlation_coefficient
            , ta.project_id
          FROM ApidbTuning.TranscriptAttributes ta, apidb.nafeaturewgcnaresults nfw
          WHERE ta.gene_na_feature_id = nfw.na_feature_id
            AND nfw.protocol_app_node_id = $$wgcnaParam$$
            AND nfw.correlation_coefficient >= $$wgcna_correlation_cutoff$$
          ORDER by nfw.correlation_coefficient desc
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByWGCNAModule" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.wgcnaParam" />
        <paramRef ref="geneParams.wgcnaDataset" />
        <paramRef ref="geneParams.wgcna_correlation_cutoff"/>
      <wsColumn name="correlation_coefficient" width="20"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Genes by functional gene list -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByGeneList" excludeProjects="EuPathDB" >
      <paramRef ref="geneParams.geneListParam"/>
      <paramRef ref="geneParams.geneListDataset"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, ta.gene_source_id, 'Y' as matched_result, ta.project_id
          FROM ApidbTuning.TranscriptAttributes ta, apidb.nafeaturelist nfl
          WHERE ta.gene_na_feature_id = nfl.na_feature_id
            AND nfl.protocol_app_node_id = $$geneListParam$$
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByGeneList" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.geneListParam"/>
      <paramRef ref="geneParams.geneListDataset"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Epitopes -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesWithEpitopes"
              includeProjects="AmoebaDB,CryptoDB,ToxoDB,PlasmoDB,GiardiaDB,TrichDB,TriTrypDB,PiroplasmaDB,FungiDB,VectorBase,MicrosporidiaDB,UniDB">
      <paramRef ref="organismParams.organism" queryRef="organismVQ.withEpitopes"/>
      <!-- TEMPLATE_ANCHOR geneEpitopeOrganismOverride -->

      <paramRef ref="geneParams.peptide_mismatch"/>
      <paramRef ref="geneParams.taxon_match"/>
      <paramRef ref="geneParams.protein_match"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="peptide_count"/>
      <sql>
        <![CDATA[
        SELECT
		ta.project_id
		,'Y' as matched_result
		,ta.gene_source_id
		,ta.source_id
		,count(*) as "peptide_count"
	FROM
		apidbtuning.transcriptattributes ta
		,apidb.aasequenceepitope ae
	WHERE ae.aa_sequence_id = ta.aa_sequence_id
	AND ta.taxon_id in ($$organism$$)

	AND ae.taxon_match <= $$taxon_match$$
        AND ae.mismatches <= $$peptide_mismatch$$
        AND ae.protein_match <= $$protein_match$$

        AND (ta.project_id = 'PlasmoDB'  OR 'UniDB' = 'PlasmoDB')
	GROUP BY ta.project_id, ta.gene_source_id, ta.source_id

	 ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesWithEpitopes" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin"
                  includeProjects="EuPathDB">
      <paramRef ref="organismParams.organism" queryRef="organismVQ.withEpitopes" quote="false"/>


      <paramRef ref="geneParams.epitope_confidence" quote="false"/>
      <wsColumn name="source_id" width="50"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="mismatches" width="50" wsName="mismatches"/>
      <wsColumn name="protein_match" width="50" wsName="protein_match"/>
      <wsColumn name="taxon_match" width="50" wsName="taxon_match"/>
   </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Mass Spec -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByMassSpec" excludeProjects="EuPathDB">

      <paramRef ref="geneParams.ms_assay"/>
      <paramRef ref="sharedParams.min_sequence_count"/>
      <paramRef ref="sharedParams.sample_vs_all"/>
      <paramRef ref="sharedParams.min_spectrum_count" groupRef="paramGroups.advancedParams"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="project_id"/>
      <column name="sum_sequence_count"/>
      <column name="unique_sequence_count"/>
      <column name="sample_count"/>
      <column name="sum_spectrum_count" columnType="number" width="12"/>
      <sql>
        <![CDATA[
          select project_id, 'Y' as matched_result, source_id, gene_source_id,
                sum_sequence_count, unique_sequence_count, sum_spectrum_count, sample_count
          from (with genesample
                     as (select source_id,gene_source_id, project_id, aa_sequence_id,
                                count(*) as peptide_count, count(distinct peptide_sequence) as unique_peptide_count,
                                sum(Spectrum_Count) as spectrum_count
                         from apidbTuning.MsPeptideSummary
                         where sample in ( $$ms_assay$$ )
                         group by source_id,gene_source_id, project_id, aa_sequence_id
                         having sum(spectrum_count) >= $$min_spectrum_count$$
                                and ('all' = $$sample_vs_all$$
                                     or count(distinct peptide_sequence) >= $$min_sequence_count$$ )
                        )
                select gs.source_id, gs.gene_source_id,  gs.project_id, count(*) as sum_sequence_count,
                       count(distinct mps.peptide_sequence) as unique_sequence_count,
                       sum(mps.spectrum_count) as sum_spectrum_count,
                       count(distinct mps.sample) as sample_count
                from genesample gs, apidbTuning.MsPeptideSummary mps
                where mps.aa_sequence_id = gs.aa_sequence_id
                and mps.source_id = gs.source_id
                group by gs.source_id,gs.gene_source_id, gs.project_id
                having 'sample' = $$sample_vs_all$$ OR count(distinct mps.peptide_sequence) >= $$min_sequence_count$$
          ) t
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByMassSpec" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin"
                  includeProjects="EuPathDB">
      <testParamValues>
        <paramValue name="ms_assay">purified rhoptries</paramValue>
      </testParamValues>
      <paramRef ref="geneParams.ms_assay" quote="false"/>
      <paramRef ref="sharedParams.min_spectrum_count" number="true"/>
      <paramRef ref="sharedParams.min_sequence_count" number="true"/>
      <paramRef ref="sharedParams.sample_vs_all"/>
      <wsColumn name="source_id" width="50"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="sample_count" width="10"/>
      <wsColumn name="sum_sequence_count" width="10"/>
      <wsColumn name="unique_sequence_count" width="10"/>
      <wsColumn name="sum_spectrum_count" width="10"/>
    </processQuery>

    <sqlQuery name="GenesByPTM" includeProjects="PlasmoDB,ToxoDB,TriTrypDB,FungiDB,HostDB,UniDB,PiroplasmaDB">
      <paramRef ref="geneParams.ptm_type"/>
      <paramRef ref="geneParams.ptm_assay"/>
      <paramRef ref="geneParams.ptm_operator" quote="false"/>
      <paramRef ref="geneParams.ptm_count"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="wdk_weight"/>
      <column name="matched_result"/>
      <column name="project_id"/>
      <column name="residues"/>
      <column name="count"/>
      <column name="modCounts"/>

      <sql>
        <![CDATA[
          WITH PTM AS(
              SELECT DISTINCT ta.source_id, ta.project_id
              , ta.gene_source_id
              , ms.modification_type
              , ms.residue
              , 1 + ms.residue_location AS residue_location
              FROM apidbtuning.msmodifiedpeptidesummary ms
              , apidbtuning.transcriptattributes ta
              WHERE ta.source_id = ms.source_id
              AND ms.sample_display_name in ($$ptm_assay$$)
              AND (ms.modification_type in ($$ptm_type$$) OR $$ptm_type$$ = 'any')
              AND (ta.project_id = '@PROJECT_ID@' OR 'UniDB' = '@PROJECT_ID@')
          )
          , mod_counts AS (
              SELECT DISTINCT source_id
              , modification_type
              , COUNT (*) AS count
              FROM (
                  SELECT DISTINCT ms.source_id
                    , ms.modification_type
                    , ms.residue
                    , ms.residue_location
                  FROM apidbtuning.msmodifiedpeptidesummary ms
                  WHERE (ms.modification_type in ($$ptm_type$$) OR $$ptm_type$$ = 'any')
                  GROUP BY source_id, modification_type, residue, residue_location
              ) t
              GROUP BY source_id, modification_type
          )
          , results AS (
              SELECT ptm.source_id
              , ptm.project_id
              , ptm.gene_source_id
              , string_agg(ptm.residue || ':' || ptm.residue_location, ', ' ORDER BY ptm.residue_location) AS residues
              , COUNT(ptm.residue) AS count
              FROM PTM
              GROUP BY ptm.project_id, ptm.source_id, ptm.gene_source_id
              HAVING COUNT(ptm.residue) $$ptm_operator$$ $$ptm_count$$
          )
          SELECT results.*
            , 10 AS wdk_weight
            , 'Y' AS matched_result
            , string_agg (replace(replace(replace(mc.modification_type, '-', ' '), '_', ' '), 'binding site', 'ubiquitin binding site') || ':' || mc.count, ', ' ORDER BY mc.modification_type) AS modCounts
          FROM results
            , mod_counts mc
          WHERE mc.source_id = results.source_id
          GROUP BY results.source_id, results.gene_source_id, results.project_id, results.residues, results.count
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByPTM" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin"
                  includeProjects="EuPathDB">
      <testParamValues>
        <paramValue name="ptm_assay">cytosolic fraction of bloodstream form - phosphopeptide enriched</paramValue>
      </testParamValues>
      <paramRef ref="geneParams.ptm_type"/>
      <paramRef ref="geneParams.ptm_assay"/>
      <paramRef ref="geneParams.ptm_operator" quote="false"/>
      <paramRef ref="geneParams.ptm_count"/>
      <wsColumn name="source_id" width="50"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="wdk_weight" width="10"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="residues" width="50"/>
      <wsColumn name="count" width="10"/>
      <wsColumn name="modCounts" width="50"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesOrthologousToAGivenGene   COULD HAVE SQL ERRORS FOR APIDB -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesOrthologousToAGivenGene"
              includeProjects="CryptoDB,PlasmoDB,ToxoDB,TriTrypDB,GiardiaDB,AmoebaDB,MicrosporidiaDB,FungiDB,HostDB,SchistoDB,UniDB,VectorBase,InitDB,PiroplasmaDB,EuPathDB">

      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="single_gene_id">PVX_092275</paramValue>
      </testParamValues>

      <testParamValues includeProjects="CryptoDB">
        <paramValue name="single_gene_id">Chro.70036</paramValue>
      </testParamValues>


      <testParamValues includeProjects="PiroplasmaDB">
        <paramValue name="single_gene_id">BBOV_IV008150</paramValue>
      </testParamValues>

      <paramRef ref="organismParams.organism" excludeProjects="EuPathDB"/>
      <paramRef ref="organismParams.localorganism" includeProjects="EuPathDB"/>
      <paramRef ref="geneParams.single_gene_id"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>

      <sql excludeProjects="EuPathDB">
        <![CDATA[
          SELECT gattr.source_id, gattr.gene_source_id, 'Y' as matched_result, project_id
          FROM ApidbTuning.TranscriptAttributes gattr
          WHERE orthomcl_name in (
              SELECT orthomcl_name
              FROM   ApidbTuning.GeneAttributes ga, ApidbTuning.GeneId gi
              WHERE  lower(gi.id) = lower($$single_gene_id$$)
              AND    ga.source_id = gi.gene
            )
            AND gattr.taxon_id IN ($$organism$$)
          ORDER BY project_id, source_id
        ]]>
      </sql>

      <sql includeProjects="EuPathDB">
        <![CDATA[
          SELECT gattr.source_id, gattr.gene_source_id, project_id
          FROM ApidbTuning.TranscriptAttributes gattr
          WHERE orthomcl_name in (
              SELECT orthomcl_name
              FROM   ApidbTuning.GeneAttributes ga, ApidbTuning.GeneId gi
              WHERE  lower(gi.id) = lower($$single_gene_id$$)
              AND    ga.source_id = gi.gene
            )
            AND gattr.organism IN ($$localorganism$$)
          ORDER BY project_id, source_id
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Location -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!-- TODO:  wdkSanityTest needs to handle dependent params -->
    <sqlQuery name="GenesByLocation" excludeProjects="EuPathDB"
              doNotTest="true">

      <!-- TODO:  check this param.  not there in trunk when merged-->

        <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.withChromosomes" displayType="select" includeProjects="CryptoDB,TriTrypDB,ToxoDB,PlasmoDB,MicrosporidiaDB,PiroplasmaDB,GiardiaDB,HostDB,FungiDB,VectorBase,UniDB" quote="true"> <help>Select the organism you wish to query against.</help></paramRef>

      <paramRef ref="sharedParams.chromosomeOptional"
                includeProjects="UniDB,PlasmoDB,ToxoDB,CryptoDB,TriTrypDB,MicrosporidiaDB,PiroplasmaDB,GiardiaDB,HostDB,FungiDB,VectorBase"
                queryRef="SharedVQ.ChromosomeOrderNum"/>
      <paramRef ref="sharedParams.sequenceId"/>
      <paramRef ref="sharedParams.start_point"/>
      <paramRef ref="sharedParams.end_point"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="dynamic_location"/>

      <sql includeProjects="TriTrypDB,MicrosporidiaDB,PlasmoDB,CryptoDB,ToxoDB,PiroplasmaDB,GiardiaDB,HostDB,FungiDB,VectorBase,UniDB">
        <![CDATA[
          SELECT gatr.source_id as source_id, 'Y' as matched_result
            , gatr.project_id, gatr.gene_source_id
            , gatr.sequence_id || ': ' || trim(to_char(gatr.start_min,'999,999,999')) || ' - ' || trim(to_char(gatr.end_max,'999,999,999')) || CASE WHEN gatr.is_reversed = 1 THEN ' (-)' ELSE' (+)' END as dynamic_location
          FROM  ApidbTuning.TranscriptAttributes gatr
          WHERE ((gatr.organism = $$organismSinglePick$$ AND gatr.chromosome = $$chromosomeOptional$$)
                 OR lower(gatr.sequence_id) = lower($$sequenceId$$))
            AND gatr.end_max >= REGEXP_REPLACE('$$start_point$$', ',| ','')::numeric
            AND (gatr.start_min <= REGEXP_REPLACE('$$end_point$$', ',| ','')::numeric OR REGEXP_REPLACE('$$end_point$$', ',| ','')::numeric = 0)
        ]]>
      </sql>
      <sql includeProjects="TrichDB,AmoebaDB,SchistoDB,InitDB">
        <![CDATA[
            SELECT DISTINCT gatr.source_id, gatr.gene_source_id, gatr.project_id, 'Y' as matched_result,
              fl.sequence_source_id || ': ' || trim(to_char(fl.start_min,'999,999,999')) || ' - ' || trim(to_char(fl.end_max,'999,999,999')) || CASE WHEN fl.is_reversed = 1 THEN ' (-)' ELSE ' (+)' END as dynamic_location
            FROM apidb.FeatureLocation fl, ApidbTuning.TranscriptAttributes gatr
            WHERE lower(gatr.sequence_id) = lower($$sequenceId$$)
              AND fl.na_sequence_id = gatr.na_sequence_id
              AND fl.na_feature_id = gatr.na_feature_id
              AND fl.end_max >= REGEXP_REPLACE('$$start_point$$', ',| ', '')::numeric
              AND (fl.start_min <= REGEXP_REPLACE('$$end_point$$', ',| ', '')::numeric
                   OR REGEXP_REPLACE('$$end_point$$', ',| ', '')::numeric = 0)
        ]]>
      </sql>
    </sqlQuery>


    <processQuery name="GenesByLocation" includeProjects="EuPathDB" doNotTest="true"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.withChromosomes"
                default="Plasmodium falciparum 3D7" multiPick="false" displayType="select"
                noTranslation="true">
        <help>Select organism you wish to query against</help>
      </paramRef>
      <paramRef ref="sharedParams.chromosomeOptional" quote="false" noTranslation="true"/>
      <paramRef ref="sharedParams.sequenceId" noTranslation="true"/>
      <paramRef ref="sharedParams.start_point"/>
      <paramRef ref="sharedParams.end_point"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="dynamic_location" width="100" wsName="dynamic_location"/>

    </processQuery>

    <sqlQuery name="GenesBySequenceSourceId" excludeProjects="EuPathDB"
              doNotTest="true">

      <paramRef ref="sharedParams.sequenceId"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>

      <sql>
        <![CDATA[
          SELECT DISTINCT feature_source_id as source_id, 'Y' as matched_result, project_id
          FROM apidb.FeatureLocation
          WHERE feature_type = 'GeneFeature'
            AND sequence_source_id = $$sequenceid$$
	    ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByLocations" includeProjects="EuPathDB"
                  doNotTest="true"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="sharedParams.sequenceId" noTranslation="true"/>
      <paramRef ref="sharedParams.start_point"/>
      <paramRef ref="sharedParams.end_point"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="dynamic_location" width="100" wsName="dynamic_location"/>

    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Genes By Snps -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesBySnps" includeProjects="TODO??"
                  processName="org.apidb.apicomplexa.wsfplugin.highspeedsnpsearch.FindGenesWithChipSnpCharsPlugin">

      <postCacheUpdateSql>
        <sql>
          <![CDATA[
            -- set source_id
            UPDATE ##WDK_CACHE_TABLE##
            SET source_id = (SELECT min(source_id)
                             FROM apidbTuning.transcriptAttributes
                             WHERE gene_source_id = ##WDK_CACHE_TABLE##.gene_source_id)
            WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
              AND source_id is null
          ]]>
        </sql>
      </postCacheUpdateSql>

      <postCacheUpdateSql excludeProjects="UniDB">
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
            ( wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result, cds_snp_density
            , chip_dn_ds_ratio, chip_num_synonymous, chip_num_non_synonymous, num_noncoding, num_nonsense, chip_total_snps)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ) , row_offset AS (
              SELECT max(wdk_row_id) AS the_max
              FROM matches
            ) , mismatches AS (
              SELECT source_id, gene_source_id, project_id
              FROM apidbTuning.transcriptAttributes
              WHERE gene_source_id IN ( SELECT gene_source_id FROM matches )
              EXCEPT
              SELECT source_id, gene_source_id, project_id
              FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##
              , row_number() OVER () + the_max
              , 0
              , mm.source_id
              , mm.gene_source_id
              , mm.project_id
              , 'Y'
              , wct.cds_snp_density
              , wct.chip_dn_ds_ratio
              , wct.chip_num_synonymous
              , wct.chip_num_non_synonymous
              , wct.num_noncoding
              , wct.num_nonsense
              , wct.chip_total_snps
            FROM row_offset ro, mismatches mm, ##WDK_CACHE_TABLE## wct
            WHERE mm.gene_source_id = wct.gene_source_id
             ]]>
        </sql>
      </postCacheUpdateSql>

      <postCacheUpdateSql includeProjects="UniDB">
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
            ( wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result, cds_snp_density, chip_dn_ds_ratio
            , chip_num_synonymous, chip_num_non_synonymous, num_noncoding, num_nonsense, chip_total_snps)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ) , row_offset AS (
              SELECT max(wdk_row_id) AS the_max
              FROM matches
            ) , mismatches AS (
              SELECT source_id, gene_source_id
              FROM apidbTuning.transcriptAttributes
              WHERE gene_source_id IN ( SELECT gene_source_id FROM matches )
              EXCEPT
              SELECT source_id, gene_source_id
              FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##
              , row_number() OVER () + the_max
              , 0
              , mm.source_id
              , mm.gene_source_id
              , 'Y'
              , wct.cds_snp_density
              , wct.chip_dn_ds_ratio
              , wct.chip_num_synonymous
              , wct.chip_num_non_synonymous
              , wct.num_noncoding
              , wct.num_nonsense
              , wct.chip_total_snps
            FROM row_offset ro, mismatches mm, ##WDK_CACHE_TABLE## wct
            WHERE mm.gene_source_id = wct.gene_source_id
             ]]>
        </sql>
      </postCacheUpdateSql>

      <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.withChromosomesSNPs" visible="false"
                quote="true"/>
      <paramRef ref="sharedParams.snp_assay_type"/>
      <paramRef ref="snpChipParams.ref_samples_filter_metadata" prompt="Samples"/>
      <paramRef ref="snpParams.WebServicesPath"/>
      <paramRef ref="snpChipParams.ReadFrequencyPercent" visible="false"/>
      <paramRef ref="snpParams.MinPercentMinorAlleles"/>
      <paramRef ref="snpParams.MinPercentIsolateCalls"/>
      <paramRef ref="geneParams.snp_class"/>
      <paramRef ref="geneParams.occurrences_lower"/>
      <paramRef ref="geneParams.occurrences_upper"/>
      <paramRef ref="geneParams.dn_ds_ratio_lower"/>
      <paramRef ref="geneParams.dn_ds_ratio_upper"/>
      <paramRef ref="geneParams.snp_density_lower"/>
      <paramRef ref="geneParams.snp_density_upper"/>
      <wsColumn name="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" excludeProjects="UniDB"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="cds_snp_density" columnType="float"/>
      <wsColumn name="chip_dn_ds_ratio" columnType="float"/>
      <wsColumn name="chip_num_synonymous" columnType="number"/>
      <wsColumn name="chip_num_non_synonymous" columnType="number"/>
      <wsColumn name="num_noncoding" columnType="number"/>
      <wsColumn name="num_nonsense" columnType="number"/>
      <wsColumn name="chip_total_snps" columnType="number"/>
    </processQuery>


    <!-- disused
        <processQuery name="GenesBySnps" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB"  doNotTest="true">

            <paramRef ref="organismParams.organismSinglePick" displayType="select"
                      noTranslation="true"  queryRef="organismVQ.withChromosomesSNPs">
                      <help>Select organism you wish to query against</help>
            </paramRef>
            <paramRef ref="sharedParams.snp_assay_type" quote="false"/>
            <paramRef ref="sharedParams.snpchip_strain_meta"/>
            <paramRef ref="geneParams.snp_stat" groupRef="paramGroups.advancedParams"/>
            <paramRef ref="geneParams.occurrences_lower" groupRef="paramGroups.advancedParams"/>
            <paramRef ref="geneParams.occurrences_upper" groupRef="paramGroups.advancedParams"/>
            <paramRef ref="geneParams.dn_ds_ratio_lower" groupRef="paramGroups.advancedParams"/>
            <paramRef ref="geneParams.dn_ds_ratio_upper" groupRef="paramGroups.advancedParams"/>
            <paramRef ref="geneParams.snp_density_lower" groupRef="paramGroups.advancedParams"/>
            <paramRef ref="geneParams.snp_density_upper" groupRef="paramGroups.advancedParams"/>
            <wsColumn name="source_id" width="50"/>
            <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
            <wsColumn name="project_id" width="20"/>
            <wsColumn name="matched_result" width="1" wsName="matched_result"/>
            <wsColumn name="cds_snp_density" width="10"/>
            <wsColumn name="dn_ds_ratio" width="10"/>
            <wsColumn name="num_synonymous" width="10"/>
            <wsColumn name="num_non_synonymous" width="10"/>
            <wsColumn name="num_noncoding" width="10"/>
            <wsColumn name="num_nonsense" width="10"/>
            <wsColumn name="total_snps" width="10"/>
       </processQuery>
     -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Genes By NGS Snps -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesByNgsSnps"
                  includeProjects="AmoebaDB,CryptoDB,FungiDB,MicrosporidiaDB,PiroplasmaDB,PlasmoDB,TriTrypDB,ToxoDB,UniDB"
                  processName="org.apidb.apicomplexa.wsfplugin.highspeedsnpsearch.FindGenesWithSnpCharsPlugin">

      <postCacheUpdateSql>
        <sql>
          <![CDATA[
            -- set source_id
            UPDATE ##WDK_CACHE_TABLE##
            SET source_id = (
              SELECT min(source_id)
              FROM apidbTuning.transcriptAttributes
              WHERE gene_source_id = ##WDK_CACHE_TABLE##.gene_source_id
            )
            WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
              AND source_id IS NULL
          ]]>
        </sql>
      </postCacheUpdateSql>
      <postCacheUpdateSql excludeProjects="UniDB">
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
              ( wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result, cds_snp_density
              , ngs_dn_ds_ratio, ngs_num_synonymous, ngs_num_non_synonymous, num_noncoding, num_nonsense, ngs_total_snps)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (
              SELECT max(wdk_row_id) AS the_max
              FROM matches
            ), mismatches AS (
              SELECT source_id, gene_source_id, project_id
              FROM apidbTuning.transcriptAttributes
              WHERE gene_source_id IN (
                SELECT gene_source_id
                FROM matches
              )
              EXCEPT
              SELECT source_id, gene_source_id, project_id
              FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##, row_number() OVER () + the_max, 0, mm.source_id, mm.gene_source_id, mm.project_id, 'Y'
                 , wct.cds_snp_density, wct.ngs_dn_ds_ratio, wct.ngs_num_synonymous, wct.ngs_num_non_synonymous, wct.num_noncoding
                 , wct.num_nonsense, wct.ngs_total_snps
            FROM row_offset ro, mismatches mm, ##WDK_CACHE_TABLE## wct
            WHERE mm.gene_source_id = wct.gene_source_id;
          ]]>
        </sql>
      </postCacheUpdateSql>
      <postCacheUpdateSql includeProjects="UniDB">
        <sql>
          <![CDATA[
            -- insert missing transcripts of included genes
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
            ( wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result, cds_snp_density, ngs_dn_ds_ratio
            , ngs_num_synonymous, ngs_num_non_synonymous, num_noncoding, num_nonsense, ngs_total_snps)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ), row_offset AS (
              SELECT max(wdk_row_id) AS the_max
              FROM matches
            ) , mismatches AS (
              SELECT source_id, gene_source_id
              FROM apidbTuning.transcriptAttributes
              WHERE gene_source_id IN (
                SELECT gene_source_id
                FROM matches
              )
              EXCEPT
              SELECT source_id, gene_source_id
              FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##, row_number() OVER () + the_max, 0, mm.source_id, mm.gene_source_id, 'Y', wct.cds_snp_density
                 , wct.ngs_dn_ds_ratio, wct.ngs_num_synonymous, wct.ngs_num_non_synonymous, wct.num_noncoding, wct.num_nonsense
                 , wct.ngs_total_snps
            FROM row_offset ro, mismatches mm, ##WDK_CACHE_TABLE## wct
            WHERE mm.gene_source_id = wct.gene_source_id
          ]]>
        </sql>
      </postCacheUpdateSql>
      <testParamValues includeProjects="CryptoDB">
        <paramValue name="ngsSnp_strain_meta">IowaII</paramValue>
      </testParamValues>
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="ngsSnp_strain_meta">GT1</paramValue>
      </testParamValues>
      <testParamValues includeProjects="TriTrypDB">
        <paramValue name="ngsSnp_strain_meta">Tb-927</paramValue>
      </testParamValues>
        <paramRef ref="organismParams.organismSinglePick" displayType="treeBox" queryRef="organismVQ.withNgsSNPsTree" quote="false" noTranslation="true">
        <help>The organism you choose will determine the strains/isolates from which you can identify SNPs.</help>
      </paramRef>

      <paramRef ref="snpParams.ngsSnp_strain_meta" prompt="Set of Samples">
        <help>SNPs are defined here as sequence differences between the selected strains. If you want to include
          sequence differences between the selected strains and the reference genome, then also include the reference
          strain in your search.
        </help>
      </paramRef>
      <paramRef ref="snpParams.WebServicesPath"/>
      <paramRef ref="snpParams.ReadFrequencyPercent"/>
      <!-- <paramRef ref="snpParams.MinPercentMinorAlleles" groupRef="snpParamGroupSet.between_isolates"/>
      <paramRef ref="snpParams.MinPercentIsolateCalls" groupRef="snpParamGroupSet.between_isolates"/>  -->
      <paramRef ref="snpParams.MinPercentMinorAlleles"/>
      <paramRef ref="snpParams.MinPercentIsolateCalls"/>
      <paramRef ref="geneParams.snp_class"/>
      <paramRef ref="geneParams.occurrences_lower"/>
      <paramRef ref="geneParams.occurrences_upper"/>
      <paramRef ref="geneParams.dn_ds_ratio_lower"/>
      <paramRef ref="geneParams.dn_ds_ratio_upper"/>
      <paramRef ref="geneParams.snp_density_lower"/>
      <paramRef ref="geneParams.snp_density_upper"/>
      <wsColumn name="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="cds_snp_density" columnType="float"/>
      <wsColumn name="ngs_dn_ds_ratio" columnType="float"/>
      <wsColumn name="ngs_num_synonymous" columnType="number"/>
      <wsColumn name="ngs_num_non_synonymous" columnType="number"/>
      <wsColumn name="num_noncoding" columnType="number"/>
      <wsColumn name="num_nonsense" columnType="number"/>
      <wsColumn name="ngs_total_snps" columnType="number"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- SecondaryStructure -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesBySecondaryStructure"
              includeProjects="CryptoDB,PlasmoDB,GiardiaDB,TrichDB,TriTrypDB,ToxoDB,UniDB,VectorBase">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.min_coil"/>
      <paramRef ref="geneParams.max_coil"/>
      <paramRef ref="geneParams.min_strand"/>
      <paramRef ref="geneParams.max_strand"/>
      <paramRef ref="geneParams.min_helix"/>
      <paramRef ref="geneParams.max_helix"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="matched_result"/>
      <column name="p_coil"/>
      <column name="p_strand"/>
      <column name="p_helix"/>
      <sql>
        <![CDATA[
          SELECT ta.gene_source_id, ta.source_id,
            1 * c.percentage as p_coil, 1 * e.percentage as p_strand, 1 * h.percentage as p_helix,
            'Y' as matched_result, ta.project_id
          FROM dots.SecondaryStructure ss, dots.SecondaryStructureCall c,
               dots.SecondaryStructureCall e, dots.SecondaryStructureCall h,
               ApidbTuning.TranscriptAttributes ta
          WHERE ta.aa_sequence_id = ss.aa_sequence_id
            AND ss.secondary_structure_id = c.secondary_structure_id
            AND ss.secondary_structure_id = e.secondary_structure_id
            AND ss.secondary_structure_id = h.secondary_structure_id
            AND c.structure_type = 'C'
            AND e.structure_type = 'E'
            AND h.structure_type = 'H'
            AND c.percentage between $$min_coil$$ and $$max_coil$$
            AND e.percentage between $$min_strand$$ and $$max_strand$$
            AND h.percentage between $$min_helix$$ and $$max_helix$$
            AND ta.taxon_id IN ($$organism$$)
        ]]>
      </sql>
    </sqlQuery>


    <processQuery name="GenesBySecondaryStructure" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.min_coil"/>
      <paramRef ref="geneParams.max_coil"/>
      <paramRef ref="geneParams.min_strand"/>
      <paramRef ref="geneParams.max_strand"/>
      <paramRef ref="geneParams.min_helix"/>
      <paramRef ref="geneParams.max_helix"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="p_coil" wsName="p_coil"/>
      <wsColumn name="p_strand" wsName="p_strand"/>
      <wsColumn name="p_helix" wsName="p_helix"/>

    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Interpro -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!-- TODO:  wdkSanityTest needs to handle dependent params -->
    <sqlQuery name="GenesByInterproDomain" excludeProjects="EuPathDB"
              doNotTest="true">

      <testParamValues includeProjects="CryptoDB,PlasmoDB,ToxoDB,GiardiaDB,TrichDB,UniDB">
        <paramValue name="domain_database">PRODOM</paramValue>
        <paramValue name="domain_accession">PD001005: ISOMERASE TRIOSEPHOSPHATE TIM BIOSYNTHESIS GLUCONEOGENESIS PENTOSE
          GLYCOLYSIS SHUNT ACID FATTY
        </paramValue>
        <paramValue name="domain_wildcard">*kinase*</paramValue>
      </testParamValues>
      <!--TODO-domain accession value is not defined here for PD000018-->
      <testParamValues includeProjects="TriTrypDB">
        <paramValue name="domain_database">PRODOM</paramValue>
        <paramValue name="domain_typehead">PD000018:</paramValue>
        <paramValue name="domain_accession">*kinase*</paramValue>
      </testParamValues>
      <paramRef ref="organismParams.organism" quote="true" noTranslation="true"/>
      <paramRef ref="geneParams.domain_database"/>
      <paramRef ref="geneParams.domain_typeahead"/>
      <paramRef ref="geneParams.domain_accession"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="e_value" sortingColumn="sorting_value"/>
      <column name="sorting_value"/>
      <sql>
        <![CDATA[
          SELECT ir.transcript_source_id as source_id, ir.gene_source_id,
                 'Y' as matched_result, '@PROJECT_ID@' as project_id,
                 to_char(avg(trunc(interpro_e_value::numeric,100)),'9.999EEEE') AS e_value,
                 max(ir.interpro_e_value) as sorting_value
          FROM apidb.interproResults ir, apidbtuning.transcriptAttributes ta
          WHERE ir.interpro_db_name = $$domain_database$$
            AND (ir.interpro_primary_id IN($$domain_typeahead$$)
                 OR ir.interpro_secondary_id IN($$domain_typeahead$$)
                   OR lower(interpro_primary_id)   LIKE  lower(REPLACE($$domain_accession$$, '*', '%'))
                   OR lower(interpro_secondary_id) LIKE  lower(REPLACE($$domain_accession$$, '*', '%'))
                   OR lower(interpro_desc)         LIKE  lower(REPLACE($$domain_accession$$, '*', '%'))
                )
            AND ta.transcript_source_id = ir.transcript_source_id
            AND ta.organism IN ($$organism$$)
          GROUP BY ir.transcript_source_id,ir.gene_source_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByInterproDomain" includeProjects="EuPathDB" doNotTest="true"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.domain_database" quote="false"/>
      <paramRef ref="geneParams.domain_typeahead" quote="false"/>
      <paramRef ref="geneParams.domain_accession"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="e_value" width="12"/>
      <wsColumn name="sorting_value" width="12"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Dont Care - fake query for internal use -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="DontCare" doNotTest="true">
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        SELECT source_id, project_id, 'Y' AS matched_result
        FROM ApidbTuning.GeneAttributes
        WHERE source_id = 'life_is_sweet'
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Query that retrieves all genes by organism -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneDumpQuery" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.gff_organism" queryRef="organismVQ.withGenesGFF"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT source_id AS source_id, 'Y' as matched_result,
                 project_id
          FROM ApidbTuning.GeneAttributes
          WHERE taxon_id IN ($$gff_organism$$)
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--  plasmoDB 4.4 dataset-->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPlasmoDbDataset" doNotTest="true" includeProjects="PlasmoDB,UniDB">
      <paramRef ref="geneParams.plasmodb_4-4_dataset"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <!-- keep order or genes but remove duplicates -->
        <![CDATA[
          SELECT imported.source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id
          FROM (
            SELECT ga.gene AS source_id, min(c.i) AS i
            FROM cache$$plasmodb_4-4_dataset$$@apidb.cbilprod c,
                 apidb.plasmodb_genes@apidb.cbilprod pg,
                 ApidbTuning.GeneId ga
            WHERE c.na_feature_id = pg.na_feature_id
              AND lower(pg.source_id) = lower(ga.id)
              AND ga.unique_mapping = 1
            GROUP BY ga.gene
          ) imported
          ORDER BY i
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Y2H Protein protein interaction -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByProteinProteinInteraction" includeProjects="PlasmoDB,FungiDB,UniDB">
      <paramRef ref="geneParams.single_gene_id" default="PF3D7_1205500" includeProjects="PlasmoDB,UniDB"/>
      <paramRef ref="geneParams.single_gene_id" default="YGR120C" includeProjects="FungiDB"/>
      <paramRef ref="geneParams.min_searches"/>
      <paramRef ref="geneParams.min_observed"/>
      <paramRef ref="geneParams.bait_or_prey"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="interact_source_id"/>
      <column name="bait_start"/>
      <column name="bait_end"/>
      <column name="prey_start"/>
      <column name="prey_end"/>
      <column name="times_observed"/>
      <column name="number_of_searches"/>
      <column name="prey_number_of_baits"/>
      <column name="bait_number_of_preys"/>
      <column name="bait_or_prey"/>
      <sql>
        <![CDATA[
          SELECT q.*, 'Y' AS matched_result
          FROM (
            SELECT pf.gene_source_id, pf.source_id, pf.project_id, pf.gene_source_id AS interact_source_id, bait_start, bait_end
                 , prey_start, prey_end, times_observed, number_of_searches, (
              SELECT COUNT(prey_number_of_baits)
              FROM apidb.geneinteraction igi
              WHERE igi.bait_gene_feature_id = pf.gene_na_feature_id
            ) AS prey_number_of_baits, bait_number_of_preys, 'bait' AS bait_or_prey
            FROM ApidbTuning.GeneId ga
               , ApidbTuning.TranscriptAttributes bf
               , ApidbTuning.TranscriptAttributes pf
               , apidb.GeneInteraction gi
            WHERE lower($$single_gene_id$$) = lower(ga.id) AND ga.gene = bf.gene_source_id AND
              gi.number_of_searches >= $$min_searches$$ AND gi.times_observed >= $$min_observed$$ AND
              bf.gene_na_feature_id = gi.bait_gene_feature_id AND gi.prey_gene_feature_id = pf.gene_na_feature_id
            UNION
            SELECT bf.gene_source_id, bf.source_id, bf.project_id, bf.gene_source_id AS interact_source_id, bait_start, bait_end
                 , prey_start, prey_end, times_observed, number_of_searches, prey_number_of_baits, (
              SELECT DISTINCT bait_number_of_preys
              FROM apidb.geneinteraction igi
              WHERE igi.prey_gene_feature_id = bf.gene_na_feature_id
            ) AS bait_number_of_preys, 'prey' AS bait_or_prey
            FROM ApidbTuning.GeneId ga
               , ApidbTuning.TranscriptAttributes bf
               , ApidbTuning.TranscriptAttributes pf
               , apidb.GeneInteraction gi
            WHERE lower($$single_gene_id$$) = lower(ga.id) AND ga.gene = pf.gene_source_id AND
              gi.number_of_searches >= $$min_searches$$ AND gi.times_observed >= $$min_observed$$ AND
              bf.gene_na_feature_id = gi.bait_gene_feature_id AND gi.prey_gene_feature_id = pf.gene_na_feature_id
          ) q
          WHERE ($$bait_or_prey$$ = bait_or_prey
            OR $$bait_or_prey$$ = 'either')
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByProteinProteinInteraction" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.single_gene_id" default="PFL0275w" noTranslation="true"/>
      <paramRef ref="geneParams.min_searches"/>
      <paramRef ref="geneParams.min_observed"/>
      <paramRef ref="geneParams.bait_or_prey" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="interact_source_id" width="50" wsName="interact_source_id"/>
      <wsColumn name="bait_start" width="32"/>
      <wsColumn name="bait_end" width="32"/>
      <wsColumn name="prey_start" width="32"/>
      <wsColumn name="prey_end" width="32"/>
      <wsColumn name="times_observed" width="32"/>
      <wsColumn name="number_of_searches" width="32"/>
      <wsColumn name="prey_number_of_baits" width="32"/>
      <wsColumn name="bait_number_of_preys" width="32"/>
      <wsColumn name="bait_or_prey" width="32"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Expression Percentiles  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="GenesByGenericPercentile" excludeProjects="EuPathDB">

      <testParamValues>
        <paramValue name="samples_percentile_generic" selectMode="first"/>
      </testParamValues>

      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.samples_percentile_generic"/>
      <paramRef ref="geneParams.min_expression_percentile" default="80"/>
      <paramRef ref="geneParams.max_expression_percentile" default="100"/>
      <paramRef ref="geneParams.any_or_all"/>
      <paramRef ref="geneParams.protein_coding_only"/>
      <paramRef ref="geneParams.channel"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="max_percentile_chosen"/>
      <column name="min_percentile_chosen"/>
      <sql>
        <![CDATA[
          SELECT ta.gene_source_id, ta.source_id, 'Y' AS matched_result, ta.project_id
               , max(round(profile_min_max.max_value::numeric, 1)) AS max_percentile_chosen
               , min(round(profile_min_max.min_value::numeric, 1)) AS min_percentile_chosen
          FROM apidbTuning.TranscriptAttributes ta
             , (
            SELECT res.na_feature_id, res.protocol_app_node_id
            FROM results.NaFeatureExpression res
            WHERE res.protocol_app_node_id IN ($$samples_percentile_generic$$) AND
              res.percentile_$$channel$$
                BETWEEN $$min_expression_percentile$$ AND $$max_expression_percentile$$
            GROUP BY res.na_feature_id, res.protocol_app_node_id
          ) profile
             , (
            SELECT res.na_feature_id, min(res.percentile_$$channel$$) AS min_value, max(res.percentile_$$channel$$) AS max_value
            FROM results.NaFeatureExpression res
            WHERE res.protocol_app_node_id IN ($$samples_percentile_generic$$) AND
              res.percentile_$$channel$$
                BETWEEN $$min_expression_percentile$$ AND $$max_expression_percentile$$
            GROUP BY res.na_feature_id
          ) profile_min_max
          WHERE ta.gene_na_feature_id = PROFILE.na_feature_id AND ta.gene_na_feature_id = profile_min_max.na_feature_id AND
            ('no' = $$protein_coding_only$$ OR ta.gene_type = 'protein coding' OR ta.gene_type = 'protein coding gene')
          GROUP BY ta.gene_source_id, ta.source_id, ta.project_id
          HAVING 'any' = $$any_or_all$$ OR count(*) = (
            SELECT count(*)
            FROM study.ProtocolAppNode
            WHERE protocol_app_node_id IN ($$samples_percentile_generic$$)
          )
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByGenericPercentile" includeProjects="EuPathDB"
                  displayName="By Expression Percentile" doNotTest="true"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.samples_percentile_generic"/>
      <paramRef ref="geneParams.min_expression_percentile" default="80"/>
      <paramRef ref="geneParams.max_expression_percentile" default="100"/>
      <paramRef ref="geneParams.any_or_all"/>
      <paramRef ref="geneParams.protein_coding_only" quote="false"/>
      <paramRef ref="geneParams.channel"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="min_percentile_chosen" width="32" wsName="min_percentile_chosen"/>
      <wsColumn name="max_percentile_chosen" width="32" wsName="max_percentile_chosen"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Expression Timing -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByeQTLHaploGrpSimilarity" includeProjects="PlasmoDB,UniDB">

      <paramRef ref="geneParams.pf_gene_id" default="PF3D7_0523000"/>
      <paramRef ref="geneParams.lod_score" default="1.5"/>
      <paramRef ref="geneParams.percentage_sim_haploblck"/>
      <!-- <paramRef ref="geneParams.any_or_all_hpgrp"/> -->
      <column name="project_id"/>
      <column name="gene_source_id"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="lod_score"/>
      <column name="cut_off_score"/>
      <sql>
        <![CDATA[
          SELECT q.*, ta.source_id, 'Y' AS matched_result
          FROM (
              SELECT a.gene_source_id, 'PlasmoDB' AS project_id, a.lod_score, b.cut_off_score
              FROM (
                  SELECT gene_source_id, max(lod_score) AS lod_score
                  FROM (
                      SELECT
                        ga.gene_source_id
                        , CASE WHEN (gls.LOD_SCORE_EXP = 0) THEN gls.LOD_SCORE_MANT::varchar
                               ELSE to_char(gls.LOD_SCORE_MANT * power(10::double precision, gls.LOD_SCORE_EXP),'99.99EEEE')
                          END AS lod_score
                      FROM apidbTuning.transcriptattributes ga, apidb.nafeaturehaploblock gls
                      WHERE gls.na_feature_id = ga.gene_na_feature_id
                        AND gls.LOD_SCORE_MANT * power(10::double precision, gls.LOD_SCORE_EXP) >= $$lod_score$$
                        AND lower(ga.gene_source_id) != lower($$pf_gene_id$$)
                        AND gls.HAPLOTYPE_BLOCK_NAME IN (
                          SELECT DISTINCT HAPLOTYPE_BLOCK_NAME
                          FROM apidbTuning.transcriptattributes ga, apidb.nafeaturehaploblock gls
                          WHERE gls.na_feature_id = ga.gene_na_feature_id
                            AND lower(ga.gene_source_id) = lower($$pf_gene_id$$)
                            AND LOD_SCORE_MANT * power(10::double precision, LOD_SCORE_EXP) >= $$lod_score$$
                        )
                    ) t
                  GROUP BY gene_source_id
                  HAVING ((count(*) * 100) / (
                                               SELECT count(*)
                                               FROM apidbTuning.transcriptattributes ga, apidb.nafeaturehaploblock gls
                                               WHERE gls.na_feature_id = ga.gene_na_feature_id AND lower(ga.gene_source_id) = lower($$pf_gene_id$$) AND
                                                     LOD_SCORE_MANT * power(10::double precision, LOD_SCORE_EXP) >= $$lod_score$$
                                             )) >= $$percentage_sim_haploblck$$
                ) a
                , (
                  SELECT max(cut_off) AS cut_off_score, gene_source_id
                  FROM (
                      SELECT
                        CASE WHEN (gls.LOD_SCORE_EXP = 0) THEN gls.LOD_SCORE_MANT::varchar
                             ELSE to_char(gls.LOD_SCORE_MANT * power(10::double precision, gls.LOD_SCORE_EXP), '99.99EEEE')
                        END AS cut_off
                        , ga.gene_source_id
                      FROM apidbTuning.transcriptattributes ga, apidb.nafeaturehaploblock gls
                      WHERE gls.na_feature_id = ga.gene_na_feature_id
                        AND lower(ga.gene_source_id) = lower($$pf_gene_id$$)
                        AND LOD_SCORE_MANT * power(10::double precision, LOD_SCORE_EXP) >= $$lod_score$$
                    ) t
                  GROUP BY gene_source_id
                ) b
              WHERE a.gene_source_id != b.gene_source_id
            ) q
            , apidbtuning.transcriptattributes ta
          WHERE ta.gene_source_id = q.gene_source_id
        ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByeQTLHaploGrpSimilarity" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

      <paramRef ref="geneParams.pf_gene_id" default="PFE1150w"/>
      <paramRef ref="geneParams.lod_score" default="1.5"/>
      <paramRef ref="geneParams.percentage_sim_haploblck"/>
      <!-- <paramRef ref="geneParams.any_or_all_hpgrp"/> -->
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="lod_score" wsName="lod_score"/>
      <wsColumn name="cut_off_score" wsName="cut_off_score"/>
    </processQuery>


    <sqlQuery name="GenesByeQTLSegments" includeProjects="PlasmoDB,UniDB">
      <paramRef ref="sharedParams.pf_seqid"/>
      <paramRef ref="sharedParams.start_point" default="11180"/>
      <paramRef ref="sharedParams.end_point_segment" default="1120683"/>
      <paramRef ref="geneParams.lod_score" default="1.5"/>
      <paramRef ref="geneParams.liberal_conservative"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="lod_score"/>
      <sql>
        <![CDATA[
          SELECT gene_source_id, source_id, project_id, 'Y' AS matched_result, max(lod_score) AS lod_score
          FROM (
            SELECT DISTINCT ga.source_id, ga.gene_source_id, ga.project_id
            , CASE WHEN (gls.LOD_SCORE_EXP = 0) THEN gls.LOD_SCORE_MANT::varchar
                   ELSE to_char(gls.LOD_SCORE_MANT * power(10::double precision,gls.LOD_SCORE_EXP), '99.99EEEE')
            END AS lod_score
            FROM dots.chromosomeelementfeature cef
               , apidb.nafeaturehaploblock gls
               , apidbTuning.transcriptattributes ga
               , dots.externalnasequence ens
               , dots.nalocation nl
            WHERE ens.source_id = $$pf_seqid$$
              AND cef.na_sequence_id = ens.na_sequence_id
              AND nl.na_feature_id = cef.na_feature_id
              AND (
                ($$liberal_conservative$$ = 'liberal' AND nl.start_min <= $$end_point_segment$$ AND nl.end_max >= $$start_point$$)
                OR ($$liberal_conservative$$ = 'conservative' AND nl.start_max <= $$end_point_segment$$ AND nl.end_min >= $$start_point$$)
              )
              AND cef.name = gls.haplotype_block_name
              AND gls.na_feature_id = ga.gene_na_feature_id
              AND gls.LOD_SCORE_MANT * power(10::double precision,gls.LOD_SCORE_EXP) >= $$lod_score$$
          )
          GROUP BY gene_source_id, source_id, project_id
        ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByeQTLSegments" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

      <paramRef ref="sharedParams.pf_seqid" quote="false"/>
      <paramRef ref="sharedParams.start_point" default="11180"/>
      <paramRef ref="sharedParams.end_point_segment" default="1120683"/>
      <paramRef ref="geneParams.lod_score" default="1.5"/>
      <paramRef ref="geneParams.liberal_conservative"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="lod_score" wsName="lod_score"/>
    </processQuery>



    <sqlQuery name="GenesByDESeqAnalysis" excludeProjects="EuPathDB">
      <testParamValues>
        <paramValue name="samples_de_ref_generic_deseq"/>
        <paramValue name="samples_de_comp_generic_deseq"/>
        <paramValue name="profileset_generic"/>
        <paramValue name="regulated_dir"/>
      </testParamValues>
      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.samples_de_ref_generic_deseq"/>
      <paramRef ref="geneParams.samples_de_comp_generic_deseq"/>
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.fold_change"/>
      <paramRef ref="geneParams.adj_p_value"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="gene_source_id"/>
      <column name="fold_change"/>
      <column name="num_p_value"/>
      <column name="adj_p_value" sortingColumn="num_p_value"/>
      <sql>
        <![CDATA[
          SELECT t.project_id
            , t.source_id
            , t.gene_source_id
            , ROUND(r.fold_change::numeric, 2) AS fold_change
            , r.adj_p_value AS num_p_value
            , CASE to_char(r.adj_p_value, '9.999EEEE')
                WHEN '   .000E+00' THEN '0'
                ELSE to_char(r.adj_p_value, '9.999EEEE')
              END AS adj_p_value
            , 'Y' AS matched_result
          FROM
            (
              SELECT DISTINCT
                an.PROTOCOL_APP_NODE_ID
              FROM
                study.protocolappparam ap,
                study.protocolparam p,
                study.output i,
                study.studylink sl,
                STUDY.PROTOCOLAPPNODE an
              WHERE an.name LIKE '%DESeq%'
                AND p.protocol_param_id = ap.protocol_param_id
                AND ap.protocol_app_id = i.protocol_app_id
                AND i.PROTOCOL_APP_NODE_ID = an.PROTOCOL_APP_NODE_ID
                AND sl.study_id = $$profileset_generic$$
                AND i.protocol_app_node_id = sl.protocol_app_node_id
                AND ((p.name = 'reference' AND ap.value = $$samples_de_ref_generic_deseq$$) OR
                     (ap.value = $$samples_de_comp_generic_deseq$$ AND p.name = 'comparator'))
              GROUP BY an.protocol_app_node_id, i.protocol_app_id
              HAVING count(*) = 2
            ) pan,
            results.NAFeatureDiffResult r,
            APIDBTUNING.transcriptattributes t
          WHERE pan.protocol_app_node_id = r.protocol_app_node_id
            AND r.NA_FEATURE_ID = t.gene_na_feature_id
            AND r.adj_p_value <= $$adj_p_value$$
            AND ($$regulated_dir$$ ((r.fold_change *2)/2)) >= $$fold_change$$
        ]]>
      </sql>
    </sqlQuery>


    <processQuery name="GenesByDESeqAnalysis" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.samples_de_ref_generic_deseq"/>
      <paramRef ref="geneParams.samples_de_comp_generic_deseq"/>
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.fold_change"/>
      <paramRef ref="geneParams.adj_p_value"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="fold_change" wsName="fold_change"/>
      <wsColumn name="num_p_value" wsName="num_p_value"/>
      <wsColumn name="adj_p_value" wsName="adj_p_value"/>
    </processQuery>


    <sqlQuery name="GenesByGenericFoldChange" excludeProjects="EuPathDB" >
      <testParamValues>
        <paramValue name="samples_fc_ref_generic" selectMode="all"/>
        <paramValue name="samples_fc_comp_generic" selectMode="first"/>
      </testParamValues>

      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.regulated_dir"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_ref_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_ref"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_comp_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_comp"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.hard_floor"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only"/>

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="fold_change_avg"/>
      <column name="fold_change_chosen"/>
      <column name="fold_change_chosen_display" sortingColumn="fold_change_chosen"/>
      <column name="avg_group_one"/>
      <column name="avg_group_two"/>
      <column name="max_group_one"/>
      <column name="max_group_two"/>
      <column name="min_group_one"/>
      <column name="min_group_two"/>
      <column name="median_group_one"/>
      <column name="median_group_two"/>
      <column name="chose_group_one"/>
      <column name="chose_group_two"/>

      <sqlParamValue name="isLogged">0</sqlParamValue>

      <sql>
        <![CDATA[
          SELECT ga.source_id
            , ga.gene_source_id
            , 'Y' AS matched_result
            , ga.project_id
            , round(CASE WHEN greatest($$hard_floor$$, one.average) / greatest($$hard_floor$$, two.average) >= 1
                           THEN greatest($$hard_floor$$, one.average::numeric) / greatest($$hard_floor$$, two.average::numeric)
                         ELSE -1 * greatest($$hard_floor$$, two.average::numeric) / greatest($$hard_floor$$, one.average::numeric)
                    END, 1)
            AS fold_change_avg
            , round(CASE WHEN greatest($$hard_floor$$, one.chosen) / greatest($$hard_floor$$, two.chosen) >= 1
                           THEN greatest($$hard_floor$$, one.chosen::numeric) / greatest($$hard_floor$$, two.chosen::numeric)
                         ELSE -1 * greatest($$hard_floor$$, two.chosen::numeric) / greatest($$hard_floor$$, one.chosen::numeric)
                    END, 1) AS fold_change_chosen
            , CASE WHEN greatest($$hard_floor$$, one.chosen) / greatest($$hard_floor$$, two.chosen) >= 1
                     THEN round(greatest($$hard_floor$$, one.chosen::numeric) / greatest($$hard_floor$$, two.chosen::numeric), 1)
                   ELSE round(-1 * greatest($$hard_floor$$, two.chosen::numeric) / greatest($$hard_floor$$, one.chosen::numeric), 1)
              END
              || CASE WHEN (one.chosen < $$hard_floor$$ OR two.chosen < $$hard_floor$$) THEN '*' ELSE '' END
            AS fold_change_chosen_display
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE one.average WHEN 0 THEN 0 ELSE log(2, one.average::numeric) END, 2)
                   ELSE round(one.average::numeric, 2)
              END AS avg_group_one
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE two.average::numeric WHEN 0 THEN 0 ELSE log(2, two.average::numeric) END, 2)
                   ELSE round(two.average::numeric, 2)
              END AS avg_group_two
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE one.maximum WHEN 0 THEN 0 ELSE log(2, one.maximum::numeric) END, 2)
                   ELSE round(one.maximum::numeric, 2)
              END AS max_group_one
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE two.maximum WHEN 0 THEN 0 ELSE log(2, two.maximum::numeric) END, 2)
                   ELSE round(two.maximum::numeric, 2)
              END AS max_group_two
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE one.minimum WHEN 0 THEN 0 ELSE log(2, one.minimum::numeric) END, 2)
                   ELSE round(one.minimum::numeric, 2)
              END AS min_group_one
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE two.minimum WHEN 0 THEN 0 ELSE log(2, two.minimum::numeric) END, 2)
                   ELSE round(two.minimum::numeric, 2)
              END AS min_group_two
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE one.median WHEN 0 THEN 0 ELSE log(2, one.median::numeric) END, 2)
                   ELSE round(one.median::numeric, 2)
              END AS median_group_one
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE two.median WHEN 0 THEN 0 ELSE log(2, two.median::numeric) END, 2)
                   ELSE round(two.median::numeric, 2)
              END AS median_group_two
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE one.chosen WHEN 0 THEN 0 ELSE log(2, one.chosen::numeric) END, 2)
                   ELSE round(one.chosen::numeric, 2)
              END AS chose_group_one
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE two.chosen WHEN 0 THEN 0 ELSE log(2, two.chosen::numeric) END, 2)
                   ELSE round(two.chosen::numeric, 2)
              END AS chose_group_two
          FROM
            apidbTuning.TranscriptAttributes ga
            , (
                SELECT res.na_feature_id
                  , CASE WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'minimum'
                           THEN power(2, min(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'maximum'
                           THEN power(2, max(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'average'
                           THEN power(2, avg(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'median'
                           THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value))
                         WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'minimum'
                           THEN min(res.value)
                         WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'maximum'
                           THEN max(res.value)
                         WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'average'
                           THEN avg(res.value)
                         WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'median'
                           THEN percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)
                    END AS chosen
                  , CASE &&isLogged&& WHEN 1 THEN power(2, avg(res.value)) ELSE avg(res.value) END AS average
                  , CASE &&isLogged&& WHEN 1 THEN power(2, max(res.value)) ELSE max(res.value) END AS maximum
                  , CASE &&isLogged&& WHEN 1 THEN power(2, min(res.value)) ELSE min(res.value) END AS minimum
                  , CASE &&isLogged&& WHEN 1 THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)) ELSE percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value) END AS median
                FROM results.NaFeatureExpression res
                WHERE res.protocol_app_node_id IN ($$samples_fc_comp_generic$$)
                GROUP BY res.na_feature_id
              ) one
            , (
                SELECT res.na_feature_id
                  , CASE WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'minimum'
                           THEN power(2, min(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'maximum'
                           THEN power(2, max(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'average'
                           THEN power(2, avg(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'median'
                           THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value))
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'minimum'
                           THEN min(res.value)
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'maximum'
                           THEN max(res.value)
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'average'
                           THEN avg(res.value)
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'median'
                           THEN percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)
                    END AS chosen
                  , CASE &&isLogged&& WHEN 1 THEN power(2, avg(res.value)) ELSE avg(res.value) END AS average
                  , CASE &&isLogged&& WHEN 1 THEN power(2, max(res.value)) ELSE max(res.value) END AS maximum
                  , CASE &&isLogged&& WHEN 1 THEN power(2, min(res.value)) ELSE min(res.value) END AS minimum
                  , CASE &&isLogged&& WHEN 1 THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)) ELSE percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value) END AS median
                FROM results.NaFeatureExpression res
                WHERE res.protocol_app_node_id IN ($$samples_fc_ref_generic$$)
                GROUP BY res.na_feature_id
              ) two
          WHERE one.na_feature_id = two.na_feature_id
            AND ga.gene_na_feature_id = one.na_feature_id
            AND ga.gene_na_feature_id = two.na_feature_id
            AND ($$protein_coding_only$$ = 'no'
            OR ga.gene_type = $$protein_coding_only$$)
            AND (
              $$regulated_dir$$ (greatest($$hard_floor$$,one.chosen) / greatest($$hard_floor$$,two.chosen))  >= $$fold_change$$
              OR $$regulated_dir$$ (-(greatest($$hard_floor$$,two.chosen) / greatest($$hard_floor$$,one.chosen))) >= $$fold_change$$
            )
        ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByGenericFoldChange" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.regulated_dir"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_ref_generic" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_ref"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_comp_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_comp"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.hard_floor"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="fold_change_avg" wsName="fold_change_avg"/>
      <wsColumn name="fold_change_chosen" wsName="fold_change_chosen"/>
      <wsColumn name="fold_change_chosen_display" wsName="fold_change_chosen_display"/>
      <wsColumn name="avg_group_one" wsName="avg_group_one"/>
      <wsColumn name="avg_group_two" wsName="avg_group_two"/>
      <wsColumn name="max_group_one" wsName="max_group_one"/>
      <wsColumn name="max_group_two" wsName="max_group_two"/>
      <wsColumn name="min_group_one" wsName="min_group_one"/>
      <wsColumn name="min_group_two" wsName="min_group_two"/>
      <wsColumn name="chose_group_one" wsName="chose_group_one"/>
      <wsColumn name="chose_group_two" wsName="chose_group_two"/>
    </processQuery>


    <sqlQuery name="GenesByRnaSeqFoldChange" excludeProjects="EuPathDB"  >
      <testParamValues>
        <paramValue name="samples_fc_ref_generic" selectMode="all"/>
        <paramValue name="samples_fc_comp_generic" selectMode="first"/>
      </testParamValues>

      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.dataset_url"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.regulated_dir"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_ref_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_ref"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_comp_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_comp"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.hard_floor"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only"/>

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="fold_change_avg"/>
      <column name="fold_change_chosen"/>
      <column name="fold_change_chosen_display" sortingColumn="fold_change_chosen"/>
      <column name="avg_group_one"/>
      <column name="avg_group_two"/>
      <column name="max_group_one"/>
      <column name="max_group_two"/>
      <column name="min_group_one"/>
      <column name="min_group_two"/>
      <column name="median_group_one"/>
      <column name="median_group_two"/>
      <column name="chose_group_one"/>
      <column name="chose_group_two"/>

      <sqlParamValue name="isLogged">0</sqlParamValue>

      <sql>
        <![CDATA[
          SELECT ga.source_id
            , ga.gene_source_id
            , 'Y' AS matched_result
            , ga.project_id
            , round(cast(CASE when (greatest((CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length end), one.average) /
                              greatest((CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length end), two.average) >= 1)
                         THEN (greatest((CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length end), one.average) /
                              greatest((CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length end), two.average))
                         ELSE (-1 * greatest((CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length end), two.average) /
                              greatest((CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length end), one.average))
                    end as numeric), 1
             ) AS fold_change_avg -- ERROR: cannot cast type record to numeric
            , round(cast(CASE WHEN greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, one.chosen) /
                              greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, two.chosen) >= 1
                         THEN greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, one.chosen) /
                                greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, two.chosen)
                         ELSE -1 * greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, two.chosen) /
                              greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, one.chosen)
                    end as numeric), 1
              ) AS fold_change_chosen
            , CASE WHEN greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, one.chosen) /
                        greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, two.chosen) >= 1
                   THEN round(cast(greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, one.chosen) /
                                greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, two.chosen) as numeric), 1)
                   ELSE round(-1 * cast(greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, two.chosen) /
                              greatest(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, one.chosen) as numeric), 1)
              END
              || CASE WHEN (one.chosen < CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END OR
                          two.chosen < CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END)
                  THEN '*'
                  ELSE ''
              END AS fold_change_chosen_display
            , CASE WHEN 0 = 1
                     THEN round(CASE one.average WHEN 0 THEN 0 ELSE log(2, cast(one.average as numeric)) END, 2)
                   ELSE round(cast(one.average as numeric), 2)
              END AS avg_group_one
            , CASE WHEN 0 = 1
                     THEN round(CASE two.average WHEN 0 THEN 0 ELSE log(2, cast(two.average as numeric)) END, 2)
                   ELSE round(cast(two.average as numeric), 2)
              END AS avg_group_two
            , CASE WHEN 0 = 1
                     THEN round(CASE one.maximum WHEN 0 THEN 0 ELSE log(2, cast(one.maximum as numeric)) END, 2)
                   ELSE round(cast(one.maximum as numeric), 2)
              END AS max_group_one
            , CASE WHEN 0 = 1
                     THEN round(CASE two.maximum WHEN 0 THEN 0 ELSE log(2, cast(two.maximum as numeric)) END, 2)
                   ELSE round(cast(two.maximum as numeric), 2)
              END AS max_group_two
            , CASE WHEN 0 = 1
                     THEN round(CASE one.minimum WHEN 0 THEN 0 ELSE log(2, cast(one.minimum as numeric)) END, 2)
                   ELSE round(cast(one.minimum as numeric), 2)
              END AS min_group_one
            , CASE WHEN 0 = 1
                     THEN round(CASE two.minimum WHEN 0 THEN 0 ELSE log(2, cast(two.minimum as numeric)) END, 2)
                   ELSE round(cast(two.minimum as numeric), 2)
              END AS min_group_two
            , CASE WHEN 0 = 1
                     THEN round(CASE one.median WHEN 0 THEN 0 ELSE log(2, cast(one.median as numeric)) END, 2)
                   ELSE round(cast(one.median as numeric), 2)
              END AS median_group_one
            , CASE WHEN 0 = 1
                     THEN round(CASE two.median WHEN 0 THEN 0 ELSE log(2, cast(two.median as numeric)) END, 2)
                   ELSE round(cast(two.median as numeric), 2)
              END AS median_group_two
            , CASE WHEN 0 = 1
                   THEN rtrim(to_char(round(CASE one.chosen WHEN 0 THEN 0 ELSE log(2, cast(one.chosen as numeric)) end, 2), 'FM99990.99'), '.')
                   ELSE rtrim(to_char(round(cast(one.chosen as numeric), 2), 'FM99990.99'), '.')
                        || CASE WHEN one.chosen < CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END
                                THEN ' ('
                                     || rtrim( to_char(round(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, 2), 'FM99990.99'), '.')
                                     || ')'
                                ELSE ''
                           END
              END AS chose_group_one
            , CASE WHEN 0 = 1
                   THEN rtrim(to_char(round( CASE two.chosen WHEN 0 THEN 0 ELSE log(2, cast(two.chosen as numeric)) end, 2), 'FM99990.99'), '.')
                   ELSE rtrim(to_char(round( cast(two.chosen as numeric), 2), 'FM99990.00'), '.')
                     || CASE WHEN two.chosen < CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END
                             THEN ' ('
                                  || rtrim(to_char(round(CASE $$hard_floor$$ WHEN 0 THEN 1 ELSE $$hard_floor$$ / ga.length END, 2), 'FM99990.99'), '.')
                                  || ')'
                             ELSE ''
                        END
              END AS chose_group_two
          FROM
            apidbTuning.TranscriptAttributes ga
            , (
                SELECT res.na_feature_id
                  , CASE WHEN 0 = 1 AND 'average' = 'minimum'
                           THEN power(2, min(res.value))
                         WHEN 0 = 1 AND 'average' = 'maximum'
                           THEN power(2, max(res.value))
                         WHEN 0 = 1 AND 'average' = 'average'
                           THEN power(2, avg(res.value))
                         WHEN 0 = 1 AND 'average' = 'median'
                           THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value))
                         WHEN 0 = 0 AND 'average' = 'minimum'
                           THEN min(res.value)
                         WHEN 0 = 0 AND 'average' = 'maximum'
                           THEN max(res.value)
                         WHEN 0 = 0 AND 'average' = 'average'
                           THEN avg(res.value)
                         WHEN 0 = 0 AND 'average' = 'median'
                           THEN percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)
                    END AS chosen
                  , CASE 0 WHEN 1 THEN power(2, avg(res.value)) ELSE avg(res.value) END AS average
                  , CASE 0 WHEN 1 THEN power(2, max(res.value)) ELSE max(res.value) END AS maximum
                  , CASE 0 WHEN 1 THEN power(2, min(res.value)) ELSE min(res.value) END AS minimum
                  , CASE 0 WHEN 1 THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)) ELSE percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value) END AS median
                FROM results.NaFeatureExpression res
                WHERE res.protocol_app_node_id IN (20)
                GROUP BY res.na_feature_id
              ) one
            , (
                SELECT res.na_feature_id
                  , CASE WHEN 0 = 1 AND 'average' = 'minimum'
                           THEN power(2, min(res.value))
                         WHEN 0 = 1 AND 'average' = 'maximum'
                           THEN power(2, max(res.value))
                         WHEN 0 = 1 AND 'average' = 'average'
                           THEN power(2, avg(res.value))
                         WHEN 0 = 1 AND 'average' = 'median'
                           THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value))
                         WHEN 0 != 1 AND 'average' = 'minimum'
                           THEN min(res.value)
                         WHEN 0 != 1 AND 'average' = 'maximum'
                           THEN max(res.value)
                         WHEN 0 != 1 AND 'average' = 'average'
                           THEN avg(res.value)
                         WHEN 0 != 1 AND 'average' = 'median'
                           THEN percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)
                    END AS chosen
                  , CASE 0 WHEN 1 THEN power(2, avg(res.value)) ELSE avg(res.value) END AS average
                  , CASE 0 WHEN 1 THEN power(2, max(res.value)) ELSE max(res.value) END AS maximum
                  , CASE 0 WHEN 1 THEN power(2, min(res.value)) ELSE min(res.value) END AS minimum
                  , CASE 0 WHEN 1 THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)) ELSE percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value) END AS median
                FROM results.NaFeatureExpression res
                WHERE res.protocol_app_node_id IN (15)
                GROUP BY res.na_feature_id
              ) two
          WHERE one.na_feature_id = two.na_feature_id
            AND ga.gene_na_feature_id = one.na_feature_id
            AND ga.gene_na_feature_id = two.na_feature_id
            AND ('protein coding gene' = 'no' OR ga.gene_type = 'protein coding gene')
            AND (
            abs (greatest( CASE WHEN ($$hard_floor$$=0)THEN 1 ELSE $$hard_floor$$/ga.length END,one.chosen)
    / greatest(  CASE WHEN ($$hard_floor$$=0)THEN 1 ELSE $$hard_floor$$/ga.length END, two.chosen))  >= 2
              OR abs (-(greatest( CASE WHEN ($$hard_floor$$=0)THEN 1 ELSE $$hard_floor$$/ga.length END,two.chosen)
    / greatest( CASE WHEN  ($$hard_floor$$=0)THEN 1 ELSE $$hard_floor$$/ga.length END, one.chosen))) >= 2
            )
      ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByRnaSeqFoldChange" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.dataset_url" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.regulated_dir"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_ref_generic" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_ref"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_comp_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_comp"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.hard_floor"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="fold_change_avg" wsName="fold_change_avg"/>
      <wsColumn name="fold_change_chosen" wsName="fold_change_chosen"/>
      <wsColumn name="fold_change_chosen_display" wsName="fold_change_chosen_display"/>
      <wsColumn name="avg_group_one" wsName="avg_group_one"/>
      <wsColumn name="avg_group_two" wsName="avg_group_two"/>
      <wsColumn name="max_group_one" wsName="max_group_one"/>
      <wsColumn name="max_group_two" wsName="max_group_two"/>
      <wsColumn name="min_group_one" wsName="min_group_one"/>
      <wsColumn name="min_group_two" wsName="min_group_two"/>
      <wsColumn name="chose_group_one" wsName="chose_group_one"/>
      <wsColumn name="chose_group_two" wsName="chose_group_two"/>
    </processQuery>

    <sqlQuery name="GenesBySenseAntisense" excludeProjects="EuPathDB">

      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.antisense_direction"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.antisense_fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.sense_direction"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.sense_fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_ref_antisense"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_comp_antisense"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.antisense_floor"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="geneParams.fraction_change_antisense"/>

      <sqlParamValue name="sense">'firststrand'</sqlParamValue>
      <sqlParamValue name="antisense">'secondstrand'</sqlParamValue>

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="sample_pairs"/>
      <column name="max_FC_product"/>
      <column name="antisense_floor"/>
      <column name="antisense_fold_change"/>
      <column name="sense_fold_change"/>

      <sql>
        <![CDATA[
          WITH ref AS (
            SELECT r.NA_FEATURE_ID, ps.PROTOCOL_APP_NODE_NAME AS sample, ps.study_name, r.value
            FROM apidbtuning.profilesamples ps, results.nafeatureexpression r
            WHERE ps.PROTOCOL_APP_NODE_ID = r.PROTOCOL_APP_NODE_ID
              AND ps.protocol_app_node_id IN ($$samples_ref_antisense$$)
              AND ps.profile_type = 'values'
          ) , comp AS (
            SELECT r.NA_FEATURE_ID, ps.PROTOCOL_APP_NODE_NAME AS sample, ps.study_name, r.value
            FROM apidbtuning.profilesamples ps, results.nafeatureexpression r
            WHERE ps.PROTOCOL_APP_NODE_ID = r.PROTOCOL_APP_NODE_ID
              AND ps.protocol_app_node_id IN ($$samples_comp_antisense$$)
              AND ps.profile_type = 'values'
          ) , ref1 AS (
            SELECT s.NA_FEATURE_ID, s.sample, s.value AS sense_value, a.value AS antisense_value
            FROM (
                SELECT *
                FROM ref
                WHERE study_name LIKE '%' || '&&sense&&' || '%'
              ) s
              , (
                SELECT *
                FROM ref
                WHERE study_name LIKE '%' || '&&antisense&&' || '%'
              ) a
            WHERE s.sample = a.sample
              AND s.NA_FEATURE_ID = a.NA_FEATURE_ID
          ) , comp1 AS (
            SELECT s.NA_FEATURE_ID, s.sample, s.value AS sense_value, a.value AS antisense_value
            FROM (
                SELECT *
                FROM comp
                WHERE study_name LIKE '%' || '&&sense&&' || '%'
              ) s
              , (
                SELECT *
                FROM comp
                WHERE study_name LIKE '%' || '&&antisense&&' || '%'
              ) a
            WHERE s.sample = a.sample
              AND s.NA_FEATURE_ID = a.NA_FEATURE_ID
          )
          SELECT ga.source_id
            , ga.gene_source_id
            , 'Y' AS matched_result
            , ga.project_id
            , fin.sample_pairs
            , fin.max_FC_product
            , $$antisense_floor$$ AS antisense_floor
            , round($$antisense_direction$$ * log(2, REPLACE($$antisense_fold_change$$,0,0.0001)), 1) AS antisense_fold_change
            , round($$sense_direction$$ * log(2, REPLACE($$sense_fold_change$$,0,0.0001)), 1) AS sense_fold_change
          FROM
            apidbTuning.TranscriptAttributes ga
            , (
                SELECT NA_FEATURE_ID
                  , string_agg(sample_pair, ', ' ORDER BY NA_FEATURE_ID) AS sample_pairs
                  , MAX(FC_product) AS max_FC_product
                FROM (
                    SELECT ref1.NA_FEATURE_ID
                      , ref1.sample || '->' || comp1.sample AS sample_pair
                      , round(CASE WHEN comp1.sense_value / greatest($$antisense_floor$$, ref1.sense_value) > 1
                                     THEN comp1.sense_value / greatest($$antisense_floor$$, ref1.sense_value)
                                   ELSE ref1.sense_value / greatest($$antisense_floor$$, comp1.sense_value)
                              END
                              * CASE WHEN comp1.antisense_value / greatest($$antisense_floor$$, ref1.antisense_value) > 1
                                       THEN comp1.antisense_value / greatest($$antisense_floor$$, ref1.antisense_value)
                                     ELSE ref1.antisense_value / greatest($$antisense_floor$$, comp1.antisense_value)
                                END
                        , 1) AS FC_product
                    FROM comp1, ref1
                    WHERE ref1.NA_FEATURE_ID = comp1.NA_FEATURE_ID
                      AND ref1.sample != comp1.sample
                      AND (
                        (($$sense_direction$$ * comp1.sense_value / greatest($$antisense_floor$$, ref1.sense_value)) >= $$sense_fold_change$$)
                        OR (($$sense_direction$$ * -1 * ref1.sense_value / greatest($$antisense_floor$$, comp1.sense_value)) >= $$sense_fold_change$$)
                      )
                      AND (
                        (($$antisense_direction$$ * comp1.antisense_value / greatest($$antisense_floor$$, ref1.antisense_value)) >= $$antisense_fold_change$$)
                        OR (($$antisense_direction$$ * -1 * ref1.antisense_value / greatest($$antisense_floor$$, comp1.antisense_value)) >= $$antisense_fold_change$$)
                      )
                      AND abs(
                          (comp1.antisense_value / greatest(2 * $$antisense_floor$$, (comp1.antisense_value + comp1.sense_value)))
                          - (ref1.antisense_value / greatest(2 * $$antisense_floor$$, (ref1.antisense_value + ref1.sense_value)))
                        ) > $$fraction_change_antisense$$
                  ) t
                GROUP BY NA_FEATURE_ID
                ORDER BY NA_FEATURE_ID
              ) fin
          WHERE ga.gene_na_feature_id = fin.na_feature_id
            AND ($$protein_coding_only$$ = 'no' OR ga.gene_type = $$protein_coding_only$$)
	  ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesBySenseAntisense" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.antisense_direction"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.antisense_fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.sense_direction"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.sense_fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_comp_antisense"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_ref_antisense"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.antisense_floor"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.fraction_change_antisense"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="sample_pairs" wsName="sample_pairs"/>
      <wsColumn name="max_FC_product" wsName="max_FC_product"/>
      <wsColumn name="antisense_floor" wsName="antisense_floor"/>
      <wsColumn name="antisense_fold_change" wsName="antisense_fold_change"/>
      <wsColumn name="sense_fold_change" wsName="sense_fold_change"/>

    </processQuery>

    <sqlQuery name="GenesByUserDatasetRnaSeq" excludeProjects="EuPathDB">

      <testParamValues>
        <paramValue name="samples_fc_ref_generic" selectMode="all"/>
        <paramValue name="samples_fc_comp_generic" selectMode="first"/>
      </testParamValues>

      <paramRef ref="userDatasetParams.rna_seq_dataset"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.profileset_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.regulated_dir"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.samples_fc_ref_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_ref"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.samples_fc_comp_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_comp"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="fold_change_avg"/>
      <column name="fold_change_chosen"/>
      <column name="fold_change_chosen_display" sortingColumn="fold_change_chosen"/>
      <column name="avg_group_one"/>
      <column name="avg_group_two"/>
      <column name="max_group_one"/>
      <column name="max_group_two"/>
      <column name="min_group_one"/>
      <column name="min_group_two"/>
      <column name="median_group_one"/>
      <column name="median_group_two"/>
      <column name="chose_group_one"/>
      <column name="chose_group_two"/>
      <column name="dataset_id"/>

      <sqlParamValue includeProjects="CryptoDB" name="isLogged">0</sqlParamValue>
      <sqlParamValue includeProjects="CryptoDB" name="shift">0.01</sqlParamValue>
      <sqlParamValue excludeProjects="CryptoDB" name="isLogged">1</sqlParamValue>
      <sqlParamValue excludeProjects="CryptoDB" name="shift">0.0001</sqlParamValue>

      <sql>
        <![CDATA[
          SELECT $$rna_seq_dataset$$ AS dataset_id
            , ga.source_id
            , ga.gene_source_id
            , 'Y' AS matched_result
            , '@PROJECT_ID@' AS project_id
            , round((CASE WHEN one.average / CASE WHEN two.average < &&shift&& THEN &&shift&& ELSE two.average END >= 1
                            THEN one.average / CASE WHEN two.average < &&shift&& THEN &&shift&& ELSE two.average END
                          ELSE -1 * (two.average / CASE WHEN one.average < &&shift&& THEN &&shift&& ELSE one.average END)
                     END), 1) AS fold_change_avg
            , round((CASE WHEN one.chosen / CASE WHEN two.chosen < &&shift&& THEN &&shift&& ELSE two.chosen END >= 1
                            THEN one.chosen / CASE WHEN two.chosen < &&shift&& THEN &&shift&& ELSE two.chosen END
                          ELSE -1 * (two.chosen / CASE WHEN one.chosen < &&shift&& THEN &&shift&& ELSE one.chosen END)
                     END), 1) AS fold_change_chosen
            , CASE WHEN one.chosen / CASE WHEN two.chosen < &&shift&& THEN &&shift&& ELSE two.chosen END >= 1
                     THEN round(one.chosen / CASE WHEN two.chosen < &&shift&& THEN &&shift&& ELSE two.chosen END, 1)
              || CASE WHEN two.chosen < &&shift&& THEN '*' ELSE '' END
                   ELSE round(-1 * two.chosen / CASE WHEN one.chosen < &&shift&& THEN &&shift&& ELSE one.chosen END, 1)
                     || CASE WHEN one.chosen < &&shift&& THEN '*' ELSE '' END
              END
            AS fold_change_chosen_display
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE one.average WHEN 0 THEN 0 ELSE log(2, one.average) END, 2)
                   ELSE round(one.average, 2)
              END AS avg_group_one
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE two.average WHEN 0 THEN 0 ELSE log(2, two.average) END, 2)
                   ELSE round(two.average, 2)
              END AS avg_group_two
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE one.maximum WHEN 0 THEN 0 ELSE log(2, one.maximum) END, 2)
                   ELSE round(one.maximum, 2)
              END AS max_group_one
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE two.maximum WHEN 0 THEN 0 ELSE log(2, two.maximum) END, 2)
                   ELSE round(two.maximum, 2)
              END AS max_group_two
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE one.minimum WHEN 0 THEN 0 ELSE log(2, one.minimum) END, 2)
                   ELSE round(one.minimum, 2)
              END AS min_group_one
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE two.minimum WHEN 0 THEN 0 ELSE log(2, two.minimum) END, 2)
                   ELSE round(two.minimum, 2)
              END AS min_group_two
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE one.median WHEN 0 THEN 0 ELSE log(2, one.median) END, 2)
                   ELSE round(one.median, 2)
              END AS median_group_one
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE two.median WHEN 0 THEN 0 ELSE log(2, two.median) END, 2)
                   ELSE round(two.median, 2)
              END AS median_group_two
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE one.chosen WHEN 0 THEN 0 ELSE log(2, one.chosen) END, 2)
                   ELSE round(one.chosen, 2)
              END AS chose_group_one
            , CASE WHEN &&isLogged&& = 1
                     THEN round(CASE two.chosen WHEN 0 THEN 0 ELSE log(2, two.chosen) END, 2)
                   ELSE round(two.chosen, 2)
              END AS chose_group_two
          FROM
            (
              SELECT res.na_feature_id
                , CASE WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'minimum'
                         THEN power(2, min(res.value))
                       WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'maximum'
                         THEN power(2, max(res.value))
                       WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'average'
                         THEN power(2, avg(res.value))
                       WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'median'
                         THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value))
                       WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'minimum'
                         THEN min(res.value)
                       WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'maximum'
                         THEN max(res.value)
                       WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'average'
                         THEN avg(res.value)
                       WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'median'
                         THEN percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)
                  END AS chosen
                , CASE &&isLogged&& WHEN 1 THEN power(2, avg(res.value)) ELSE avg(res.value) END AS average
                , CASE &&isLogged&& WHEN 1 THEN power(2, max(res.value)) ELSE max(res.value) END AS maximum
                , CASE &&isLogged&& WHEN 1 THEN power(2, min(res.value)) ELSE min(res.value) END AS minimum
                , CASE &&isLogged&& WHEN 1 THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)) ELSE percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value) END AS median
              FROM @VDI_DATASETS_SCHEMA@.ud_ProtocolAppNode pan, @VDI_DATASETS_SCHEMA@.ud_NaFeatureExpression res
              WHERE pan.protocol_app_node_id IN ($$samples_fc_comp_generic$$)
                AND pan.protocol_app_node_id = res.protocol_app_node_id
              GROUP BY res.na_feature_id
            ) one
            , (
                SELECT res.na_feature_id
                  , CASE WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'minimum'
                           THEN power(2, min(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'maximum'
                           THEN power(2, max(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'average'
                           THEN power(2, avg(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'median'
                           THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value))
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'minimum'
                           THEN min(res.value)
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'maximum'
                           THEN max(res.value)
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'average'
                           THEN avg(res.value)
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'median'
                           THEN percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)
                    END AS chosen
                  , CASE &&isLogged&& WHEN 1 THEN power(2, avg(res.value)) ELSE avg(res.value) END AS average
                  , CASE &&isLogged&& WHEN 1 THEN power(2, max(res.value)) ELSE max(res.value) END AS maximum
                  , CASE &&isLogged&& WHEN 1 THEN power(2, min(res.value)) ELSE min(res.value) END AS minimum
                  , CASE &&isLogged&& WHEN 1 THEN power(2, percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value)) ELSE percentile_cont(0.5) WITHIN GROUP (ORDER BY res.value) END AS median
                FROM @VDI_DATASETS_SCHEMA@.ud_ProtocolAppNode pan, @VDI_DATASETS_SCHEMA@.ud_NaFeatureExpression res
                WHERE pan.protocol_app_node_id IN ($$samples_fc_ref_generic$$)
                  AND pan.protocol_app_node_id = res.protocol_app_node_id
                GROUP BY res.na_feature_id
              ) two
            , ApidbTuning.TranscriptAttributes ga
          WHERE one.na_feature_id = two.na_feature_id
            AND ga.gene_na_feature_id = one.na_feature_id
            AND ga.gene_na_feature_id = two.na_feature_id
            AND ($$protein_coding_only$$ = 'no' OR ga.gene_type = $$protein_coding_only$$)
            AND (
              $$regulated_dir$$ ( one.chosen / CASE WHEN two.chosen < &&shift&& THEN &&shift&& ELSE two.chosen END)  >= $$fold_change$$
              OR $$regulated_dir$$ (-( two.chosen / CASE WHEN one.chosen < &&shift&& THEN &&shift&& ELSE one.chosen END)) >= $$fold_change$$
            )
      ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByUserDatasetRnaSeq" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.rna_seq_dataset"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.profileset_generic" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.regulated_dir"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.samples_fc_ref_generic" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_ref"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.samples_fc_comp_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_comp"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="fold_change_avg" wsName="fold_change_avg"/>
      <wsColumn name="fold_change_chosen" wsName="fold_change_chosen"/>
      <wsColumn name="fold_change_chosen_display" wsName="fold_change_chosen_display"/>
      <wsColumn name="avg_group_one" wsName="avg_group_one"/>
      <wsColumn name="avg_group_two" wsName="avg_group_two"/>
      <wsColumn name="max_group_one" wsName="max_group_one"/>
      <wsColumn name="max_group_two" wsName="max_group_two"/>
      <wsColumn name="min_group_one" wsName="min_group_one"/>
      <wsColumn name="min_group_two" wsName="min_group_two"/>
      <wsColumn name="chose_group_one" wsName="chose_group_one"/>
      <wsColumn name="chose_group_two" wsName="chose_group_two"/>
      <wsColumn name="dataset_id" wsName="dataset_id"/>
    </processQuery>

    <sqlQuery name="GenesByUserDatasetAntisense" excludeProjects="EuPathDB">

      <testParamValues>
        <paramValue name="samples_fc_ref_generic_antisense" selectMode="all"/>
        <paramValue name="samples_fc_comp_generic_antisense" selectMode="first"/>
      </testParamValues>

      <paramRef ref="userDatasetParams.rna_seq_dataset" queryRef="GeneVQ.StrandedRnaSeqUserDataset"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.samples_fc_ref_generic_antisense"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.samples_fc_comp_generic_antisense"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.antisense_direction"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.antisense_fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.sense_direction"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.sense_fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="geneParams.fraction_change_antisense"/>

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="sample_pairs"/>
      <column name="max_FC_product"/>
      <column name="antisense_floor"/>
      <column name="antisense_fold_change"/>
      <column name="sense_fold_change"/>


      <sqlParamValue name="antisenseFloor">1</sqlParamValue>

      <sqlParamValue includeProjects="CryptoDB" name="isLogged">0</sqlParamValue>
      <sqlParamValue includeProjects="CryptoDB" name="shift">0.01</sqlParamValue>
      <sqlParamValue excludeProjects="CryptoDB" name="isLogged">1</sqlParamValue>
      <sqlParamValue excludeProjects="CryptoDB" name="shift">0.0001</sqlParamValue>

      <sql>
        <![CDATA[
          WITH pan AS (
            SELECT ps.name AS study_name
              , pan.protocol_app_node_id
              , regexp_replace(pan.name, '-one$|-two$|-forward$|-reverse$', '') AS sample
            FROM
              @VDI_DATASETS_SCHEMA@.ud_ProfileSet ps
              , @VDI_DATASETS_SCHEMA@.ud_ProtocolAppNode pan
            WHERE pan.profile_set_id = ps.profile_set_id
          )
          SELECT ga.source_id
            , ga.gene_source_id
            , 'Y' AS matched_result
            , ga.project_id
            , hits.sample_pairs
            , hits.max_fc_product
            , &&antisenseFloor&& AS antisense_floor
            , round($$antisense_direction$$ * log(2, $$antisense_fold_change$$), 1) AS antisense_fold_change
            , round($$sense_direction$$ * log(2, $$sense_fold_change$$), 1) AS sense_fold_change
          FROM
            apidbTuning.TranscriptAttributes ga
            , (
                SELECT ref_sense_result.na_feature_id
                  , string_agg(ref_sense_pan.sample || '->' || comp_sense_pan.sample, ', '
                               ORDER BY ref_sense_result.na_feature_id) AS sample_pairs
                  , max(
                      round(CASE
                              WHEN comp_sense_result.value / greatest(1, ref_sense_result.value) > 1
                              THEN comp_sense_result.value / greatest(1, ref_sense_result.value)
                              ELSE ref_sense_result.value / greatest(1, comp_sense_result.value)
                            END
                            * CASE
                              WHEN comp_antisense_result.value / greatest(1, ref_antisense_result.value) > 1
                              THEN comp_antisense_result.value / greatest(1, ref_antisense_result.value)
                              ELSE ref_antisense_result.value / greatest(1, comp_antisense_result.value)
                            END
                      , 1)
                  ) AS max_fc_product
                FROM
                  pan ref_sense_pan
                  , pan ref_antisense_pan
                  , pan comp_sense_pan
                  , pan comp_antisense_pan
                  , @VDI_DATASETS_SCHEMA@.ud_NaFeatureExpression ref_sense_result
                  , @VDI_DATASETS_SCHEMA@.ud_NaFeatureExpression ref_antisense_result
                  , @VDI_DATASETS_SCHEMA@.ud_NaFeatureExpression comp_sense_result
                  , @VDI_DATASETS_SCHEMA@.ud_NaFeatureExpression comp_antisense_result
                WHERE ref_sense_pan.study_name = 'sense'
                  AND ref_antisense_pan.study_name = 'antisense'
                  AND ref_sense_pan.sample = ref_antisense_pan.sample
                  AND ref_sense_pan.protocol_app_node_id IN ($$samples_fc_ref_generic_antisense$$)
                  AND comp_sense_pan.study_name = 'sense'
                  AND comp_antisense_pan.study_name = 'antisense'
                  AND comp_sense_pan.sample = comp_antisense_pan.sample
                  AND comp_sense_pan.protocol_app_node_id IN ($$samples_fc_comp_generic_antisense$$)
                  AND ref_sense_pan.sample != comp_sense_pan.sample -- optimization (?)
                  AND ref_sense_pan.protocol_app_node_id = ref_sense_result.protocol_app_node_id
                  AND ref_antisense_pan.protocol_app_node_id = ref_antisense_result.protocol_app_node_id
                  AND comp_sense_pan.protocol_app_node_id = comp_sense_result.protocol_app_node_id
                  AND comp_antisense_pan.protocol_app_node_id = comp_antisense_result.protocol_app_node_id
                  AND ref_sense_result.na_feature_id = ref_antisense_result.na_feature_id
                  AND ref_sense_result.na_feature_id = comp_sense_result.na_feature_id
                  AND comp_sense_result.na_feature_id = comp_antisense_result.na_feature_id
                  AND (
                    (($$sense_direction$$ * comp_sense_result.value / greatest(&&antisenseFloor&&, ref_sense_result.value)) >= $$sense_fold_change$$)
                    OR (($$sense_direction$$ * -1 * ref_sense_result.value / greatest(&&antisenseFloor&&, comp_sense_result.value)) >= $$sense_fold_change$$)
                  )
                  AND (
                    (($$antisense_direction$$ * comp_antisense_result.value / greatest(&&antisenseFloor&&, ref_antisense_result.value)) >= $$antisense_fold_change$$)
                    OR (($$antisense_direction$$ * -1 * ref_antisense_result.value /greatest(&&antisenseFloor&&, comp_antisense_result.value)) >= $$antisense_fold_change$$)
                  )
                  AND abs(
                    (comp_antisense_result.value / greatest(2 * &&antisenseFloor&&, comp_antisense_result.value + comp_sense_result.value))
                    - (ref_antisense_result.value / greatest(2 * &&antisenseFloor&&, ref_antisense_result.value + ref_sense_result.value))
                  ) > $$fraction_change_antisense$$
                GROUP BY ref_sense_result.na_feature_id
            ) hits
          WHERE ga.gene_na_feature_id = hits.na_feature_id
            AND ($$protein_coding_only$$ = 'no' OR ga.gene_type = $$protein_coding_only$$)
      ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByUserDatasetAntisense" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.rna_seq_dataset"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.samples_fc_ref_generic_antisense"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="userDatasetParams.samples_fc_comp_generic_antisense"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.antisense_direction"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.antisense_fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.sense_direction"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.sense_fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only"/>
      <paramRef groupRef="paramGroups.advancedParams" ref="geneParams.fraction_change_antisense"/>

      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>

      <wsColumn name="sample_pairs" wsName="sample_pairs"/>
      <wsColumn name="max_FC_product" wsName="max_FC_product"/>
      <wsColumn name="antisense_floor" wsName="antisense_floor"/>
      <wsColumn name="antisense_fold_change" wsName="antisense_fold_change"/>
      <wsColumn name="sense_fold_change" wsName="sense_fold_change"/>

    </processQuery>

    <sqlQuery name="GenesByTTestWithMetadata" includeProjects="PlasmoDB,UniDB">

      <!-- don't override query ref; done in question
       <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.metadata_datasets" quote="false"
                 queryRef="SharedVQ.ComptonDataset" visible="false"/>
       -->
      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.metadata_datasets"
                quote="false" visible="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.ref_samples_filter_metadata"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.comp_samples_filter_metadata"/>
      <paramRef ref="geneParams.regulated_dir_immune_response" quote="false"/>
      <paramRef ref="geneParams.p_value" default="0.05"/>

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="p_value" sortingColumn="sorting_p_value"/>
      <column name="sorting_p_value"/>
      <column name="avg_group_one"/>
      <column name="avg_group_two"/>

      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="isLogged">0</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="lowerBound">0.0001</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="function">'log2'</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT ta.source_id
            , ta.gene_source_id
            , ta.project_id
            , 'Y' AS matched_result
            , round(CASE WHEN (linear_avg_comp / linear_avg_ref) >= 1 THEN (linear_avg_comp / linear_avg_ref)
                         ELSE (-1 / (linear_avg_comp / linear_avg_ref))
                    END, 6) AS difference
            , round(CASE WHEN lower(&&function&&) = 'arcsinh' THEN apidb.arcsinh(linear_avg_comp)
                         WHEN lower(&&function&&) = 'log2' THEN log(2, linear_avg_comp)
                         WHEN lower(&&function&&) = 'linear' THEN linear_avg_comp
                         ELSE linear_avg_comp
                    END, 6) AS avg_group_one
            , round(CASE WHEN lower(&&function&&) = 'arcsinh' THEN apidb.arcsinh(linear_avg_ref)
                         WHEN lower(&&function&&) = 'log2' THEN log(2, linear_avg_ref)
                         WHEN lower(&&function&&) = 'linear' THEN linear_avg_ref
                         ELSE linear_avg_ref
                    END, 6) AS avg_group_two
            , to_char(p_value, '9.99EEEE') AS p_value
            , p_value sorting_p_value
          FROM
            apidbTuning.transcriptAttributes ta
            , (
                SELECT na_feature_id
                  , round(avg(CASE source_set WHEN 'ref' THEN linear_value END), 3) linear_avg_ref
                  , round(avg(CASE source_set WHEN 'comp' THEN linear_value END), 3) linear_avg_comp
                  , stats_t_test_indepu(source_set, linear_value) p_value
                FROM (
                    SELECT na_feature_id
                      , avg(CASE WHEN lower(&&function&&) = 'arcsinh' THEN apidb.arcsinh_to_linear(value)
                                 WHEN lower(&&function&&) = 'log2' THEN power(2, value)
                                 WHEN lower(&&function&&) = 'linear' THEN value
                                 ELSE value
                            END) AS linear_value
                      , 'ref' AS source_set
                    FROM results.NaFeatureHostResponse nfhr, study.ProtocolAppNode pan
                    WHERE nfhr.protocol_app_node_id = pan.protocol_app_node_id
                      AND pan.name IN ($$ref_samples_filter_metadata$$)
                    GROUP BY na_feature_id, nfhr.protocol_app_node_id
                    UNION
                    SELECT na_feature_id
                      , avg(CASE WHEN lower(&&function&&) = 'arcsinh' THEN apidb.arcsinh_to_linear(value)
                                 WHEN lower(&&function&&) = 'log2' THEN power(2, value)
                                 WHEN lower(&&function&&) = 'linear' THEN value
                                 ELSE value
                            END) AS linear_value
                      , 'comp' AS source_set
                    FROM results.NaFeatureHostResponse nfhr, study.ProtocolAppNode pan
                    WHERE nfhr.protocol_app_node_id = pan.protocol_app_node_id
                      AND pan.name IN ($$comp_samples_filter_metadata$$)
                    GROUP BY na_feature_id, nfhr.protocol_app_node_id
                  ) t
                GROUP BY na_feature_id
              ) one
          WHERE one.na_feature_id = ta.gene_na_feature_id
            AND p_value <= $$p_value$$
            AND (
              '$$regulated_dir_immune_response$$' = 'increased' AND linear_avg_comp > linear_avg_ref
              OR '$$regulated_dir_immune_response$$' = 'decreased' AND linear_avg_ref > linear_avg_comp
            )
        ]]>
      </sql>

    </sqlQuery>
    <processQuery name="GenesByTTestWithMetadata" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">

      <!-- don't override query ref; done in question
       <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.metadata_datasets" quote="false" noTranslation="true"
                 queryRef="SharedVQ.ComptonDataset" visible="false"/>
       -->
      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.metadata_datasets"
                quote="false" noTranslation="true" visible="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.ref_samples_filter_metadata"
                noTranslation="true"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.comp_samples_filter_metadata"
                noTranslation="true"/>

      <paramRef ref="geneParams.regulated_dir_immune_response" quote="false"/>
      <paramRef ref="geneParams.p_value" default="0.05"/>

      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="avg_group_one" wsName="avg_group_one"/>
      <wsColumn name="avg_group_two" wsName="avg_group_two"/>
      <wsColumn name="p_value" wsName="p_value"/>
      <wsColumn name="sorting_p_value" wsName="sorting_p_value"/>
      <wsColumn name="difference" wsName="difference"/>
    </processQuery>


    <sqlQuery name="GenesByLofflerNaturalInfectionWithMetaDataWiz" includeProjects="PlasmoDB,UniDB"
              isCacheable="true" doNotTest="true">

      <!-- <paramRef ref="geneParams.profileset_generic_all" quote="false" multiPick="true"/>  -->

      <paramRef ref="geneParams.ref_samples_filter_metadata_loffler_wiz"
                groupRef="geneParamGroupSet.reference_samples"/>
      <paramRef ref="geneParams.regulated_dir_immune_response" groupRef="geneParamGroupSet.direction"/>

      <paramRef ref="geneParams.comp_samples_filter_metadata_loffler_wiz"
                groupRef="geneParamGroupSet.comparison_samples"/>

      <paramRef ref="geneParams.p_value" groupRef="geneParamGroupSet.significance" default="0.05"/>

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>

      <!--  <column name="difference"/> -->
      <column name="p_value" sortingColumn="sorting_p_value"/>
      <column name="sorting_p_value"/>
      <column name="avg_group_one"/>
      <column name="avg_group_two"/>

      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="isLogged">0</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="lowerBound">0.0001</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="function">'arcsinh'</sqlParamValue>

      <sql>
        <![CDATA[
            select ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result,
                 round(case when (linear_avg_comp / linear_avg_ref) >= 1 then (linear_avg_comp / linear_avg_ref)
                            else (-1 / (linear_avg_comp / linear_avg_ref)) end, 6) as difference,
		 round(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh(linear_avg_comp)
                            when lower(&&function&&) = 'log2' then log(2, linear_avg_comp)
                            when lower(&&function&&) = 'linear' then linear_avg_comp
                            else linear_avg_comp end, 6) as avg_group_one,     
                 round(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh(linear_avg_ref)                 
                            when lower(&&function&&) = 'log2' then log(2, linear_avg_ref)
                            when lower(&&function&&) = 'linear' then linear_avg_ref
                            else linear_avg_ref end, 6) as avg_group_two,
                 to_char( p_value, '9.99EEEE') as p_value,
                 p_value sorting_p_value
          from apidbTuning.transcriptAttributes ta,
               (select na_feature_id,
                       round(avg(decode(source_set, 'ref', linear_value, null)), 3) linear_avg_ref,
                       round(avg(decode(source_set, 'comp', linear_value, null)), 3) linear_avg_comp,
                       stats_t_test_indepu(source_set, linear_value) p_value
                from (  select na_feature_id,
		               avg(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh_to_linear(value)
			                when lower(&&function&&) = 'log2' then power(2, value)
					when lower(&&function&&) = 'linear' then value
					else value end) as linear_value,
			       'ref' as source_set
                        from results.NaFeatureHostResponse nfhr --, study.ProtocolAppNode pan
			where nfhr.protocol_app_node_id in ($$ref_samples_filter_metadata_loffler_wiz$$)
                        group by na_feature_id, nfhr.protocol_app_node_id
                      union
                        select na_feature_id,
		               avg(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh_to_linear(value)
			                when lower(&&function&&) = 'log2' then power(2, value)
					when lower(&&function&&) = 'linear' then value
					else value end) as linear_value,
			       'comp' as source_set
                        from results.NaFeatureHostResponse nfhr --, study.ProtocolAppNode pan
			where nfhr.protocol_app_node_id in ($$comp_samples_filter_metadata_loffler_wiz$$)
                        group by na_feature_id, nfhr.protocol_app_node_id
                     )
                group by na_feature_id) one
          where one.na_feature_id = ta.gene_na_feature_id
            and p_value <= $$p_value$$
            and ('$$regulated_dir_immune_response$$' = 'increased' and linear_avg_comp > linear_avg_ref
                 or 
                 '$$regulated_dir_immune_response$$' = 'decreased' and linear_avg_ref > linear_avg_comp)
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="GenesByLofflerNaturalInfectionWithMetaData" includeProjects="PlasmoDB,UniDB"
              isCacheable="true" doNotTest="true">

      <!--
            <paramRef ref="geneParams.profileset_generic_all" quote="false" multiPick="true"/>
        -->

      <paramRef ref="geneParams.ref_samples_filter_metadata_loffler"/>
      <paramRef ref="geneParams.comp_samples_filter_metadata_loffler"/>

      <paramRef ref="geneParams.regulated_dir_immune_response" quote="false"/>
      <paramRef ref="geneParams.p_value" default="0.05"/>

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>

      <!--  <column name="difference"/> -->
      <column name="p_value" sortingColumn="sorting_p_value"/>
      <column name="sorting_p_value"/>
      <column name="avg_group_one"/>
      <column name="avg_group_two"/>

      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="isLogged">0</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="lowerBound">0.0001</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="function">'arcsinh'</sqlParamValue>

      <sql>
        <![CDATA[
             select ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result,
                 round(case when (linear_avg_comp / linear_avg_ref) >= 1 then (linear_avg_comp / linear_avg_ref)
                            else (-1 / (linear_avg_comp / linear_avg_ref)) end, 6) as difference,
		 round(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh(linear_avg_comp)
                            when lower(&&function&&) = 'log2' then log(2, linear_avg_comp)
                            when lower(&&function&&) = 'linear' then linear_avg_comp
                            else linear_avg_comp end, 6) as avg_group_one,     
                 round(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh(linear_avg_ref)                 
                            when lower(&&function&&) = 'log2' then log(2, linear_avg_ref)
                            when lower(&&function&&) = 'linear' then linear_avg_ref
                            else linear_avg_ref end, 6) as avg_group_two,
                 to_char( p_value, '9.99EEEE') as p_value,
                 p_value sorting_p_value
          from apidbTuning.transcriptAttributes ta,
               (select na_feature_id,
                       round(avg(decode(source_set, 'ref', linear_value, null)), 3) linear_avg_ref,
                       round(avg(decode(source_set, 'comp', linear_value, null)), 3) linear_avg_comp,
                       stats_t_test_indepu(source_set, linear_value) p_value
                from (  select na_feature_id,
		               avg(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh_to_linear(value)
			                when lower(&&function&&) = 'log2' then power(2, value)
					when lower(&&function&&) = 'linear' then value
					else value end) as linear_value,
			       'ref' as source_set
                        from results.NaFeatureHostResponse nfhr --, study.ProtocolAppNode pan
			where nfhr.protocol_app_node_id in ($$ref_samples_filter_metadata_loffler$$)
                        group by na_feature_id, nfhr.protocol_app_node_id
                      union
                        select na_feature_id,
		               avg(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh_to_linear(value)
			                when lower(&&function&&) = 'log2' then power(2, value)
					when lower(&&function&&) = 'linear' then value
					else value end) as linear_value,
			       'comp' as source_set
                        from results.NaFeatureHostResponse nfhr --, study.ProtocolAppNode pan
			where nfhr.protocol_app_node_id in ($$comp_samples_filter_metadata_loffler$$)
                        group by na_feature_id, nfhr.protocol_app_node_id
                     )
                group by na_feature_id) one
          where one.na_feature_id = ta.gene_na_feature_id
            and p_value <= $$p_value$$
            and ('$$regulated_dir_immune_response$$' = 'increased' and linear_avg_comp > linear_avg_ref
                 or 
                 '$$regulated_dir_immune_response$$' = 'decreased' and linear_avg_ref > linear_avg_comp)
        ]]>
      </sql>

    </sqlQuery>


    <processQuery name="GenesByLofflerNaturalInfectionWithMetaData" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">

      <paramRef ref="geneParams.ref_samples_filter_metadata_all"/>
      <paramRef ref="geneParams.comp_samples_filter_metadata_all"/>
      <paramRef ref="geneParams.p_value"/>
      <paramRef ref="geneParams.regulated_dir_immune_response" quote="false"/>

      <wsColumn name="project_id" width="20"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>

      <wsColumn name="p_value" wsName="p_value"/>
      <wsColumn name="sorting_p_value" width="1" wsName="sorting_p_value"/>
      <wsColumn name="avg_group_one" wsName="avg_group_one"/>
      <wsColumn name="avg_group_two" wsName="avg_group_two"/>
      <!--    <wsColumn name="difference" wsName="difference"/> -->

    </processQuery>


    <sqlQuery name="GenesByHostResponseWithMetaDataWiz" includeProjects="PlasmoDB,UniDB"
              isCacheable="true" doNotTest="true">

      <!--   <paramRef ref="geneParams.profileset_generic_all" quote="false" multiPick="true"/> -->

      <paramRef ref="geneParams.ref_samples_filter_metadata_all_wiz" groupRef="geneParamGroupSet.reference_samples"/>
      <paramRef ref="geneParams.comp_samples_filter_metadata_all_wiz" groupRef="geneParamGroupSet.comparison_samples"/>
      <paramRef ref="geneParams.regulated_dir_immune_response" groupRef="geneParamGroupSet.direction"/>
      <paramRef ref="geneParams.p_value" groupRef="geneParamGroupSet.significance" default="0.05"/>

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="p_value" sortingColumn="sorting_p_value"/>
      <column name="sorting_p_value"/>
      <column name="avg_group_one"/>
      <column name="avg_group_two"/>

      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="isLogged">0</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="lowerBound">0.0001</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="function">'log2'</sqlParamValue>
      <sql>
        <![CDATA[
          select ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result,
                 round(case when (linear_avg_comp / linear_avg_ref) >= 1 then (linear_avg_comp / linear_avg_ref)
                            else (-1 / (linear_avg_comp / linear_avg_ref)) end, 6) as difference,
		 round(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh(linear_avg_comp)
                            when lower(&&function&&) = 'log2' then log(2, linear_avg_comp)
                            when lower(&&function&&) = 'linear' then linear_avg_comp
                            else linear_avg_comp end, 6) as avg_group_one,     
                 round(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh(linear_avg_ref)                 
                            when lower(&&function&&) = 'log2' then log(2, linear_avg_ref)
                            when lower(&&function&&) = 'linear' then linear_avg_ref
                            else linear_avg_ref end, 6) as avg_group_two,
                 to_char( p_value, '9.99EEEE') as p_value,
                 p_value sorting_p_value
          from apidbTuning.transcriptAttributes ta,
               (select na_feature_id,
                       round(avg(decode(source_set, 'ref', linear_value, null)), 3) linear_avg_ref,
                       round(avg(decode(source_set, 'comp', linear_value, null)), 3) linear_avg_comp,
                       stats_t_test_indepu(source_set, linear_value) p_value
                from (  select na_feature_id,
		               avg(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh_to_linear(value)
			                when lower(&&function&&) = 'log2' then power(2, value)
					when lower(&&function&&) = 'linear' then value
					else value end) as linear_value,
			       'ref' as source_set
                        from results.NaFeatureHostResponse nfhr --, study.ProtocolAppNode pan
			where nfhr.protocol_app_node_id in ($$ref_samples_filter_metadata_all_wiz$$)
                        group by na_feature_id, nfhr.protocol_app_node_id
                      union
                        select na_feature_id,
		               avg(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh_to_linear(value)
			                when lower(&&function&&) = 'log2' then power(2, value)
					when lower(&&function&&) = 'linear' then value
					else value end) as linear_value,
			       'comp' as source_set
                        from results.NaFeatureHostResponse nfhr --, study.ProtocolAppNode pan
			where nfhr.protocol_app_node_id in ($$comp_samples_filter_metadata_all_wiz$$)
                        group by na_feature_id, nfhr.protocol_app_node_id
                     )
                group by na_feature_id) one
          where one.na_feature_id = ta.gene_na_feature_id
            and p_value <= $$p_value$$
            and ('$$regulated_dir_immune_response$$' = 'increased' and linear_avg_comp > linear_avg_ref
                 or 
                 '$$regulated_dir_immune_response$$' = 'decreased' and linear_avg_ref > linear_avg_comp)
      ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GenesByHostResponseWithMetaData" includeProjects="PlasmoDB,UniDB"
              isCacheable="true" doNotTest="true">
      <!--   <paramRef ref="geneParams.profileset_generic_all" quote="false" multiPick="true"/> -->

      <paramRef ref="geneParams.ref_samples_filter_metadata_all"/>
      <paramRef ref="geneParams.comp_samples_filter_metadata_all"/>
      <paramRef ref="geneParams.regulated_dir_immune_response" quote="false"/>
      <paramRef ref="geneParams.p_value" default="0.05"/>

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="p_value" sortingColumn="sorting_p_value"/>
      <column name="sorting_p_value"/>
      <column name="avg_group_one"/>
      <column name="avg_group_two"/>

      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="isLogged">0</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="lowerBound">0.0001</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB,UniDB" name="function">'log2'</sqlParamValue>
      <sql>
        <![CDATA[
          select ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result,
                 round(case when (linear_avg_comp / linear_avg_ref) >= 1 then (linear_avg_comp / linear_avg_ref)
                            else (-1 / (linear_avg_comp / linear_avg_ref)) end, 6) as difference,
		 round(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh(linear_avg_comp)
                            when lower(&&function&&) = 'log2' then log(2, linear_avg_comp)
                            when lower(&&function&&) = 'linear' then linear_avg_comp
                            else linear_avg_comp end, 6) as avg_group_one,     
                 round(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh(linear_avg_ref)                 
                            when lower(&&function&&) = 'log2' then log(2, linear_avg_ref)
                            when lower(&&function&&) = 'linear' then linear_avg_ref
                            else linear_avg_ref end, 6) as avg_group_two,
                 to_char( p_value, '9.99EEEE') as p_value,
                 p_value sorting_p_value
          from apidbTuning.transcriptAttributes ta,
               (select na_feature_id,
                       round(avg(decode(source_set, 'ref', linear_value, null)), 3) linear_avg_ref,
                       round(avg(decode(source_set, 'comp', linear_value, null)), 3) linear_avg_comp,
                       stats_t_test_indepu(source_set, linear_value) p_value
                from (  select na_feature_id,
		               avg(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh_to_linear(value)
			                when lower(&&function&&) = 'log2' then power(2, value)
					when lower(&&function&&) = 'linear' then value
					else value end) as linear_value,
			       'ref' as source_set
                        from results.NaFeatureHostResponse nfhr--, study.ProtocolAppNode pan
			where nfhr.protocol_app_node_id in ($$ref_samples_filter_metadata_all$$)
                        group by na_feature_id, nfhr.protocol_app_node_id
                      union
                        select na_feature_id,
		               avg(case when lower(&&function&&) = 'arcsinh' then apidb.arcsinh_to_linear(value)
			                when lower(&&function&&) = 'log2' then power(2, value)
					when lower(&&function&&) = 'linear' then value
					else value end) as linear_value,
			       'comp' as source_set
                        from results.NaFeatureHostResponse nfhr --, study.ProtocolAppNode pan
			where nfhr.protocol_app_node_id in ($$comp_samples_filter_metadata_all$$)
                        group by na_feature_id, nfhr.protocol_app_node_id
                     )
                group by na_feature_id) one
          where one.na_feature_id = ta.gene_na_feature_id
            and p_value <= $$p_value$$
            and ('$$regulated_dir_immune_response$$' = 'increased' and linear_avg_comp > linear_avg_ref
                 or 
                 '$$regulated_dir_immune_response$$' = 'decreased' and linear_avg_ref > linear_avg_comp)
      ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByHostResponseWithMetaData" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">

      <paramRef ref="geneParams.ref_samples_filter_metadata_all"/>
      <paramRef ref="geneParams.comp_samples_filter_metadata_all"/>
      <paramRef ref="geneParams.p_value"/>
      <paramRef ref="geneParams.regulated_dir_immune_response" quote="false"/>

      <wsColumn name="project_id" width="20"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>

      <wsColumn name="p_value" wsName="p_value"/>
      <wsColumn name="sorting_p_value" width="1" wsName="sorting_p_value"/>
      <wsColumn name="avg_group_one" wsName="avg_group_one"/>
      <wsColumn name="avg_group_two" wsName="avg_group_two"/>
      <!--    <wsColumn name="difference" wsName="difference"/> -->

    </processQuery>

    <!--
        <sqlQuery name="GenesByTimeSeriesFoldChangeBradyBoothroyd" includeProjects="ToxoDB"
                  isCacheable="true">

          <testParamValues>
        <paramValue name="ts_fc_one_matt">2 days</paramValue>
        <paramValue name="ts_fc_two_matt">4 days</paramValue>
          </testParamValues>

            <paramRef ref="geneParams.ts_fc_two_matt"/>
            <paramRef ref="geneParams.ts_fc_one_matt"/>
            <paramRef ref="geneParams.fold_change"/>
            <paramRef ref="geneParams.regulated_dir"/>
            <column name="project_id"/>
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="fold_change"/>
            <column name="avg_group_one"/>
            <column name="avg_group_two"/>
          <sql includeProjects="ToxoDB">
              <![CDATA[
     select one.source_id, '@PROJECT_ID@' as project_id,
                       round((CASE WHEN power(2, one.average) / power(2,two.average) >= 1
                                     THEN power(2, one.average) / power(2,two.average)
                               ELSE -1 / (power(2,one.average) / power(2,two.average))
                       END),1) as fold_change,
            round(one.average,2) as avg_group_one,
            round(two.average,2) as avg_group_two
     from (
     select p.source_id, avg(pe.value) as average
     from  apidb.profileelementname pen, apidb.profile p, apidb.profileelement pe
     where pen.profile_element_name_id in ($$ts_fc_one_matt$$)
     and p.profile_set_id = pen.profile_set_id
     and pe.profile_id = p.profile_id
     and pe.element_order = pen.element_order
     group by p.source_id ) one,
     (
     select p.source_id, avg(pe.value) as average
     from apidb.profileelementname pen, apidb.profile p, apidb.profileelement pe
     where pen.profile_element_name_id in ($$ts_fc_two_matt$$)
     and p.profile_set_id = pen.profile_set_id
     and pe.profile_id = p.profile_id
     and pe.element_order = pen.element_order
     group by p.source_id ) two
     where one.source_id = two.source_id
     and  $$regulated_dir$$ (
                   case when one.average >= two.average
                       then power(2,one.average) / power(2,two.average)
                       else -( power(2,two.average) / power(2,one.average))
                       end ) >= $$fold_change$$
              ]]>
          </sql>

        </sqlQuery>

        <processQuery name="GenesByTimeSeriesFoldChangeBradyBoothroyd" includeProjects="EuPathDB"
            processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
          <testParamValues>
        <paramValue name="ts_fc_one_matt">2 days</paramValue>
        <paramValue name="ts_fc_two_matt">4 days</paramValue>
          </testParamValues>

            <paramRef ref="geneParams.ts_fc_two_matt" quote="false"/>
            <paramRef ref="geneParams.ts_fc_one_matt" quote="false"/>
            <paramRef ref="geneParams.fold_change"/>
            <paramRef ref="geneParams.regulated_dir"/>
            <wsColumn name="source_id" width="50" wsName="source_id"/>
            <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
            <wsColumn name="project_id" width="20" />
            <wsColumn name="fold_change" wsName="fold_change"/>
            <wsColumn name="avg_group_one" wsName="avg_group_one"/>
            <wsColumn name="avg_group_two" wsName="avg_group_two"/>

        </processQuery>

    -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Expression profile similarity -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <processQuery name="GenesByGenericProfileSimilarity"
                  includeProjects="MicrosporidiaDB,PlasmoDB,ToxoDB,CryptoDB,HostDB,FungiDB,UniDB"
                  processName="org.apidb.apicomplexa.wsfplugin.profile.ProfileSimilarityPlugin"
                  doNotTest="true">
      <postCacheUpdateSql>
        <sql>
          <![CDATA[
            UPDATE ##WDK_CACHE_TABLE##
            SET source_id = (
              SELECT min(source_id)
              FROM apidbTuning.transcriptAttributes
              WHERE gene_source_id = ##WDK_CACHE_TABLE##.gene_source_id
            )
            WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
              AND source_id IS NULL
          ]]>
        </sql>
      </postCacheUpdateSql>
      <postCacheUpdateSql excludeProjects="UniDB">
        <sql>
          <![CDATA[
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
            (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ) , row_offset AS (
              SELECT max(wdk_row_id) AS the_max
              FROM matches
            ), mismatches AS (
              SELECT source_id, gene_source_id, project_id
              FROM apidbTuning.transcriptAttributes
              WHERE gene_source_id IN (
                SELECT gene_source_id
                FROM matches
              )
              EXCEPT
              SELECT source_id, gene_source_id, project_id
              FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##
              , row_number() OVER () + the_max
              , 0
              , source_id
              , gene_source_id
              , project_id
              , 'Y'
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>
      <postCacheUpdateSql includeProjects="UniDB">
        <sql>
          <![CDATA[
            INSERT INTO ##WDK_CACHE_TABLE## -- query-specific version
            (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result)
            WITH matches AS (
              SELECT *
              FROM ##WDK_CACHE_TABLE##
              WHERE wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
            ) , row_offset AS (
              SELECT max(wdk_row_id) AS the_max
              FROM matches
            ) , mismatches AS (
              SELECT source_id, gene_source_id
              FROM apidbTuning.transcriptAttributes
              WHERE gene_source_id IN (
                SELECT gene_source_id
                FROM matches
              )
              EXCEPT
              SELECT source_id, gene_source_id
              FROM matches
            )
            SELECT ##WDK_CACHE_INSTANCE_ID##
              , row_number() OVER () + the_max
              , 0
              , source_id
              , gene_source_id
              , 'Y'
            FROM row_offset, mismatches
          ]]>
        </sql>
      </postCacheUpdateSql>
      <paramRef ref="geneParams.ProfileGeneId" noTranslation="true"/>
      <paramRef ref="geneParams.ProfileDistanceMethod" quote="false"/>
      <paramRef ref="geneParams.ProfileNumToReturn"/>
      <paramRef ref="geneParams.ProfileMissingPtsPercent"/>
      <paramRef ref="geneParams.profile_profile_set"/>
      <paramRef ref="geneParams.ProfileSearchGoal" quote="false"/>
      <paramRef ref="geneParams.profile_time_shift"/>
      <paramRef ref="geneParams.ProfileScaleFactor"/>
      <paramRef ref="geneParams.ProfileMinPoints"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="GeneID"/>
      <wsColumn name="project_id" width="20" wsName="ProjectId"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="distance" wsName="Distance" width="50"/>
      <wsColumn name="time_shift" wsName="Shift" width="50"/>
      <wsColumn name="query_source_id" wsName="QueryGeneId" width="50"/>
    </processQuery>

    <processQuery name="GenesByGenericProfileSimilarity" includeProjects="EuPathDB" doNotTest="true"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <!--    <paramRef ref="organismParams.organism" queryRef="organismVQ.pf"/>  -->
      <paramRef ref="geneParams.ProfileGeneId" default="PF3D7_1133400"/>
      <paramRef ref="geneParams.ProfileDistanceMethod" quote="false"/>
      <paramRef ref="geneParams.ProfileNumToReturn"/>
      <paramRef ref="geneParams.profile_profile_set" quote="false"/>
      <paramRef ref="geneParams.ProfileSearchGoal" quote="false"/>
      <paramRef ref="geneParams.profile_time_shift"/>
      <paramRef ref="geneParams.ProfileScaleFactor"/>
      <paramRef ref="geneParams.ProfileMinPoints"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="distance" wsName="distance" width="50"/>
      <wsColumn name="time_shift" wsName="time_shift" width="50"/>
      <wsColumn name="query_source_id" wsName="query_source_id" width="50"/>
    </processQuery>



    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesByDifferentialExpression -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByDirectComparisonGeneric" includeProjects="AmoebaDB,CryptoDB,FungiDB,GiardiaDB,HostDB,PlasmoDB,TrichDB,TriTrypDB,ToxoDB,VectorBase,UniDB"  >
      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.samples_fc_ref_generic"/>
      <paramRef ref="geneParams.fold_difference"/>
      <paramRef ref="geneParams.protein_coding_only"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="fold_difference"/>

      <sqlParamValue name="isLogged">1</sqlParamValue>
      <sqlParamValue name="shift">0.0001</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT ta.gene_source_id, ta.source_id, 'Y' as matched_result,
                 ta.project_id,
                 round(max(expr.fold_difference), 2) as fold_difference
          FROM (
              select res.na_feature_id as gene_feature_id,
                case
                when &&isLogged&& != 1
                then
                case
                when res.value< 1
                then -1/res.value + &&shift&&
                else res.value
                end
                else (
                  case
                  when res.value < 0
                  then -1/nvl(power(2, res.value), 1)
                  else  nvl(power(2, res.value), 1)
                  end
                )
                end as fold_difference
              FROM study.studylink sl, study.protocolappnode pan, results.nafeatureexpression res
              WHERE sl.protocol_app_node_id = pan.protocol_app_node_id
                AND pan.protocol_app_node_id in  ($$samples_fc_ref_generic$$)
                AND pan.protocol_app_node_id = res.protocol_app_node_id
            ) expr, apidbtuning.transcriptattributes ta
          WHERE ( $$protein_coding_only$$ = 'no' OR ta.gene_type = $$protein_coding_only$$ )
            AND $$regulated_dir$$ (expr.fold_difference)   >=  $$fold_difference$$
            AND ta.gene_na_feature_id = expr.gene_feature_id
          GROUP BY ta.gene_source_id, ta.source_id, ta.project_id
      ]]>
      </sql>

    </sqlQuery>
    <processQuery name="GenesByDirectComparisonGeneric" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.samples_fc_ref_generic"/>
      <paramRef ref="geneParams.fold_difference"/>
      <paramRef ref="geneParams.protein_coding_only"/>
      <paramRef ref="geneParams.profileset_generic"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="fold_difference" wsName="fold_difference"/>
    </processQuery>

    <sqlQuery name="GenesByDirectComparisonGenericPage" includeProjects="AmoebaDB,FungiDB,GiardiaDB,PlasmoDB,TriTrypDB,UniDB,VectorBase">
      <testParamValues>
        <paramValue name="fold_change">0.55</paramValue>
        <paramValue name="regulated_dir">down-regulated</paramValue>
      </testParamValues>
      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.samples_fc_direct_generic_page"/>
      <paramRef ref="geneParams.confidence" default="0.7"/>
      <paramRef ref="geneParams.fold_change"/>
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.protein_coding_only"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="confidence"/>
      <column name="fold_change"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result,
                 round(r.fold_change, 2) as fold_change,
                 round(r.confidence, 2) as confidence
          FROM ApidbTuning.TranscriptAttributes ta
                 , results.nafeaturediffresult r
          WHERE $$regulated_dir$$ (r.fold_change) >= $$fold_change$$
            AND r.confidence >= $$confidence$$
            AND r.protocol_app_node_id = $$samples_fc_direct_generic_page$$
            AND ta.gene_na_feature_id = r.na_feature_id
            AND ( $$protein_coding_only$$ = 'no' OR ta.gene_type = $$protein_coding_only$$ )
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByDirectComparisonGenericPage" includeProjects="EuPathDB"
                  doNotTest="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <testParamValues>
        <paramValue name="fold_change">0.55</paramValue>
        <paramValue name="regulated_dir">up-regulated</paramValue>
      </testParamValues>

      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.samples_fc_direct_generic_page"/>
      <paramRef ref="geneParams.confidence" default="0.7"/>
      <paramRef ref="geneParams.fold_change"/>
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.protein_coding_only"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="confidence"/>
      <wsColumn name="fold_change"/>
    </processQuery>



    <sqlQuery name="GenesByDirectComparisonGenericPValue" includeProjects="AmoebaDB,GiardiaDB,HostDB,PlasmoDB,TrichDB,TriTrypDB,ToxoDB,UniDB">
      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.samples_direct_generic_confidence"/>
       <paramRef ref="geneParams.dcc_p_value"/>
      <paramRef ref="geneParams.fold_change"/>
      <paramRef ref="geneParams.protein_coding_only"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="pvalue"/>
      <column name="fold_change"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result,
                 round(r.fold_change, 2) as fold_change,
                 TO_CHAR( coalesce(r.adj_p_value, r.p_value), '99.99EEEE') as pvalue
          FROM ApidbTuning.TranscriptAttributes ta
                 , results.nafeaturediffresult r
          WHERE $$regulated_dir$$ (r.fold_change) >= $$fold_change$$
            AND coalesce(r.adj_p_value, r.p_value) <= to_char($$dcc_p_value$$,'99.99999999999999')
            AND r.protocol_app_node_id = $$samples_direct_generic_confidence$$
            AND ta.gene_na_feature_id = r.na_feature_id
            AND ( $$protein_coding_only$$ = 'no' OR ta.gene_type = $$protein_coding_only$$ )
          ORDER BY coalesce(r.adj_p_value, r.p_value)
        ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByDirectComparisonGenericPValue" includeProjects="EuPathDB"
                  doNotTest="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <testParamValues>
        <paramValue name="fold_change">0.55</paramValue>
        <paramValue name="regulated_dir">up-regulated</paramValue>
      </testParamValues>

      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.samples_direct_generic_confidence"/>
       <paramRef ref="geneParams.dcc_p_value"/>
      <paramRef ref="geneParams.fold_change"/>
      <paramRef ref="geneParams.protein_coding_only"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="pvalue"/>
      <wsColumn name="fold_change"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesBySubcellularLocalization -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesBySubcellularLocalization" includeProjects="PlasmoDB,UniDB">
      <paramRef ref="geneParams.localization"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT s.source_id as  gene_source_id, 'Y' as matched_result,
            ta.source_id, ta.project_id
          FROM ApidbTuning.Subcellular s, ApidbTuning.TranscriptAttributes ta
          WHERE s.source_id = ta.gene_source_id
            AND s.targetting_domain = $$localization$$
          ORDER BY s.source_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesBySubcellularLocalization" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.localization" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesByProteomicsProfile -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByProteomicsProfile" includeProjects="PlasmoDB,UniDB">
      <paramRef ref="geneParams.asexual_blood_stages_value"/>
      <paramRef ref="geneParams.gametocytes_value"/>
      <paramRef ref="geneParams.ookinetes_value"/>
      <paramRef ref="geneParams.oocysts_value"/>
      <paramRef ref="geneParams.sporozoites_value"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT pb.source_id, 'Y' AS matched_result, '@PROJECT_ID@' AS project_id
          FROM (
                SELECT p.source_id
                FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps, apidb.profileElementName pen
                WHERE ps.profile_set_id = pen.profile_set_id
                  AND ps.profile_set_id = p.profile_set_id
                  AND pe.profile_id = p.profile_id
                  AND pe.profile_element_name_id = pen.profile_element_name_id
                  AND ps.name = 'berghei_proteomic_Sinden'
                  AND (pen.element_order = 1 AND ('any' = $$asexual_blood_stages_value$$ OR
                                                  pe.value = $$asexual_blood_stages_value$$))
              INTERSECT
                SELECT p.source_id
                FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps, apidb.profileElementName pen
                WHERE ps.profile_set_id = pen.profile_set_id
                  AND ps.profile_set_id = p.profile_set_id
                  AND pe.profile_id = p.profile_id
                  AND pe.profile_element_name_id = pen.profile_element_name_id

                  AND ps.name = 'berghei_proteomic_Sinden'
                  AND (pen.element_order = 2 AND ('any' = $$gametocytes_value$$ OR
                                                  pe.value = $$gametocytes_value$$))
              INTERSECT
                SELECT p.source_id
                FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps, apidb.profileElementName pen
                WHERE ps.profile_set_id = pen.profile_set_id
                  AND ps.profile_set_id = p.profile_set_id
                  AND pe.profile_id = p.profile_id
                  AND pe.profile_element_name_id = pen.profile_element_name_id

                  AND ps.name = 'berghei_proteomic_Sinden'
                  AND (pen.element_order = 3 AND ('any' = $$ookinetes_value$$ OR
                                                  pe.value = $$ookinetes_value$$))
              INTERSECT
                SELECT p.source_id
                FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps, apidb.profileElementName pen
                WHERE ps.profile_set_id = pen.profile_set_id
                  AND ps.profile_set_id = p.profile_set_id
                  AND pe.profile_id = p.profile_id
                  AND pe.profile_element_name_id = pen.profile_element_name_id

                  AND ps.name = 'berghei_proteomic_Sinden'
                  AND (pen.element_order = 4 AND ('any' = $$oocysts_value$$ OR
                                                  pe.value = $$oocysts_value$$))
              INTERSECT
                SELECT p.source_id
                FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps, apidb.profileElementName pen
                WHERE ps.profile_set_id = pen.profile_set_id
                  AND ps.profile_set_id = p.profile_set_id
                  AND pe.profile_id = p.profile_id
                  AND pe.profile_element_name_id = pen.profile_element_name_id
                  AND ps.name = 'berghei_proteomic_Sinden'
                  AND (pen.element_order = 5 AND ('any' = $$sporozoites_value$$ OR
                                                  pe.value = $$sporozoites_value$$))
            ) pb
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByProteomicsProfile" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.asexual_blood_stages_value" quote="false"/>
      <paramRef ref="geneParams.gametocytes_value" quote="false"/>
      <paramRef ref="geneParams.ookinetes_value" quote="false"/>
      <paramRef ref="geneParams.oocysts_value" quote="false"/>
      <paramRef ref="geneParams.sporozoites_value" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesByReagents -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByReagents" includeProjects="PlasmoDB,CryptoDB,ToxoDB,UniDB">

      <paramRef ref="geneParams.reagent_type"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>

      <sqlParamValue name="edName" includeProjects="CryptoDB">
        <![CDATA[
          ed.name = 'cparIowaII_dbxref_protein2EinsteinAntibodies_RSRC'
        ]]>
      </sqlParamValue>


      <sqlParamValue name="edName" includeProjects="ToxoDB">
        <![CDATA[
          ed.name = 'tgonME49_dbxref_protein2EinsteinAntibodies_RSRC'
        ]]>
      </sqlParamValue>

      <!--TODO NEED TO UPDATE THIS FOR UNIDB -->
      <sql includeProjects="PlasmoDB,UniDB">
        <![CDATA[
          SELECT DISTINCT ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result
          FROM ApidbTuning.TranscriptAttributes ta,
            dots.DbRefAaFeature df, sres.DbRef dbr, dots.TranslatedAAFeature taf,
            sres.ExternalDatabase ed, sres.ExternalDatabaseRelease edr
          WHERE ed.name in ('MR4DBxRefs','pfal3D7_dbxref_simple_gene2MR4Reagents_RSRC')
            AND edr.external_database_id = ed.external_database_id
            AND dbr.external_database_release_id = edr.external_database_release_id
            AND (LOWER(dbr.secondary_identifier) = $$reagent_type$$
                 OR $$reagent_type$$ = 'any')
            AND df.db_ref_id = dbr.db_ref_id
            AND taf.aa_feature_id = df.aa_feature_id
            AND ta.na_feature_id = taf.na_feature_id
        ]]>
      </sql>
      <sql includeProjects="CryptoDB,ToxoDB">
        <![CDATA[
          SELECT DISTINCT gf.source_id, gf.project_id, 'Y' as matched_result
          FROM ApidbTuning.GeneAttributes gf,
            dots.DbRefNaFeature df,
            sres.DbRef dbr, sres.ExternalDatabaseRelease edr,
            sres.ExternalDatabase ed
          WHERE &&edName&&
           AND edr.external_database_id = ed.external_database_id
           AND dbr.external_database_release_id = edr.external_database_release_id
           AND (LOWER(dbr.secondary_identifier) = $$reagent_type$$
                OR $$reagent_type$$ = 'any')
           AND df.db_ref_id = dbr.db_ref_id
           AND gf.na_feature_id = df.na_feature_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByReagents" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <!--
      <paramRef ref="organismParams.organism" queryRef="organismVQ.pf"/>
              <paramRef ref="geneParams.mr4_reagent_type" quote="false"/>
      -->
      <paramRef ref="geneParams.reagent_type" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesByExportPrediction -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByExportPrediction" includeProjects="PlasmoDB,UniDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.min_exportpred_score"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="exportpred_score"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result,
              max(df.score) as exportpred_score
          FROM dots.DomainFeature df, ApidbTuning.TranscriptAttributes ta
          WHERE  ta.taxon_id in ($$organism$$)
            AND ta.aa_sequence_id = df.aa_sequence_id
            AND df.algorithm_name = 'exportpred'
            AND df.score >= $$min_exportpred_score$$
          GROUP BY ta.source_id, ta.gene_source_id, ta.project_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByExportPrediction" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism" includeProjects="PlasmoDB,EuPathDB"/>
      <!--<paramRef ref="organismParams.organism" queryRef="organismVQ.withTriTrypGenes" includeProjects="TriTrypDB,EuPathDB"/> -->
      <paramRef ref="geneParams.min_exportpred_score"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="exportpred_score"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesByCentromereProximity -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByCentromereProximity" includeProjects="PlasmoDB,ToxoDB,TriTrypDB,UniDB">
      <paramRef ref="organismParams.org_with_centromere_genes"/>
      <paramRef ref="geneParams.max_centromere_distance"/>
      <paramRef ref="sharedParams.centromere_chromosome"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="dist_centromere"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result,
          TRIM(TO_CHAR(tcd.centromere_distance,'9,999,999')) as dist_centromere
          FROM ApidbTuning.TranscriptCenDistance tcd, ApidbTuning.TranscriptAttributes ta
          WHERE ta.organism = $$org_with_centromere_genes$$
            AND tcd.transcript = ta.source_id
            AND tcd.centromere_distance <= $$max_centromere_distance$$
            AND tcd.genomic_sequence in ($$centromere_chromosome$$)
          ORDER BY tcd.genomic_sequence, ta.coding_start
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByCentromereProximity" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.org_with_centromere_genes" quote="false"/>
      <paramRef ref="geneParams.max_centromere_distance" noTranslation="true"/>
      <paramRef ref="sharedParams.centromere_chromosome" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="dist_centromere"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesByTelomereProximity -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


    <sqlQuery name="GenesByTelomereProximity"
              includeProjects="CryptoDB,FungiDB,GiardiaDB,HostDB,MicrosporidiaDB,PiroplasmaDB,PlasmoDB,ToxoDB,TriTrypDB,VectorBase,UniDB">
      <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.withChromosomes" displayType="select"
                quote="true">
        <help>Select the organism you wish to query against.</help>
      </paramRef>
      <paramRef ref="sharedParams.telomere_chromosomes"/>
      <paramRef ref="geneParams.distanceFromTelomere"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="dist_telomere"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result,
            trim(to_char(LEAST(s.length - l.end_max,l.start_min),'999,999')) as dist_telomere
          FROM ApidbTuning.TranscriptAttributes ta, apidb.FeatureLocation l, dots.NaSequence s
          WHERE ta.organism = $$organismSinglePick$$
           AND ta.na_sequence_id = s.na_sequence_id
           AND l.na_feature_id = ta.na_feature_id
           AND l.sequence_source_id = s.source_id
           AND s.source_id in ($$telomere_chromosomes$$)
           AND (l.end_max >= s.length - $$distanceFromTelomere$$
                  OR l.start_min <= 1 + $$distanceFromTelomere$$)
           ORDER BY s.source_id,l.end_max
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByTelomereProximity" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

      <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.withChromosomes"
                noTranslation="true">
        <help>Select organism you wish to query against</help>
      </paramRef>
      <paramRef ref="sharedParams.telomere_chromosomes" quote="false"/>
      <paramRef ref="geneParams.distanceFromTelomere" noTranslation="true"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="dist_telomere"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesByNonnuclearGenomicRegion -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByNonnuclearGenomicRegion" includeProjects="AmoebaDB,PlasmoDB,ToxoDB,FungiDB,HostDB,PiroplasmaDB,VectorBase,UniDB"  >
      <paramRef ref="organismParams.org_with_nonnuclear_genes"/>
      <paramRef ref="geneParams.nonnuclear_sequence"/>
      <paramRef ref="sharedParams.start_point"/>
      <paramRef ref="sharedParams.end_point"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT distinct gf.source_id, gf.gene_source_id, gf.project_id, 'Y' as matched_result
          FROM ApidbTuning.TranscriptAttributes gf, dots.NaSequence ens
          WHERE ens.source_id IN ($$nonnuclear_sequence$$)
            AND gf.organism = $$org_with_nonnuclear_genes$$
            AND gf.na_sequence_id = ens.na_sequence_id
            AND gene_end_max >= REGEXP_REPLACE('$$start_point$$', ',| ','')
            AND (gene_start_min <= REGEXP_REPLACE('$$end_point$$', ',| ','') OR REGEXP_REPLACE('$$end_point$$', ',| ','') = 0)
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByNonnuclearGenomicRegion" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.org_with_nonnuclear_genes" quote="false"/>
      <paramRef ref="geneParams.nonnuclear_sequence" quote="false"/>
      <paramRef ref="sharedParams.start_point" noTranslation="true"/>
      <paramRef ref="sharedParams.end_point" noTranslation="true"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesWithStructurePrediction -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesWithStructurePrediction" includeProjects="PlasmoDB,UniDB">
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT ta.gene_source_id, ta.source_id, ta.project_id, 'Y' as matched_result
          FROM dots.DbRefaaFeature drnf,  sres.DbRef dr, dots.aafeature paaf,
            sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed,ApidbTuning.TranscriptAttributes ta
          WHERE drnf.db_ref_id = dr.db_ref_id
            AND dr.external_database_release_id = edr.external_database_release_id
            AND edr.external_database_id = ed.external_database_id
            AND ed.name = 'pfal3D7_dbxref_simple_gene2PredictedProteinStructures_RSRC'
            AND paaf.aa_feature_id = drnf.aa_feature_id
            AND paaf.aa_sequence_id = ta.aa_sequence_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesWithStructurePrediction" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GenesByPdbSimilarity -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPdbSimilarity" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.clades"/>
      <paramRef ref="geneParams.pvalue_cutoff"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="pdbIds"/>
      <column name="pvalue"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, ta.gene_source_id, ta.project_id, 'Y' as matched_result,
            string_agg(ps.pdb_id, ', ') AS pdbIds,
            min(ps.evalue_mant * power(10::double precision,ps.evalue_exp)) pvalue
          FROM ApidbTuning.PdbSimilarity ps, ApidbTuning.TranscriptAttributes ta
          WHERE ps.pdb_taxon_id IN
                  (WITH RECURSIVE cbp_name AS
                   (SELECT t1.taxon_id FROM sres.taxon t1 WHERE taxon_id IN ($$clades$$)
                    UNION ALL
                    SELECT t2.taxon_id FROM sres.taxon t2
                    JOIN cbp_name on cbp_name.taxon_id = t2.parent_id)
                   SELECT taxon_id from cbp_name)
            AND ps.gene_taxon_id IN ($$organism$$)
            AND ps.evalue_exp < $$pvalue_cutoff$$
            AND ps.source_id = ta.source_id
          GROUP BY ta.source_id, ta.gene_source_id, ta.project_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByPdbSimilarity" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="geneParams.clades" quote="false"/>
      <paramRef ref="geneParams.pvalue_cutoff"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="pvalue" width="32"/>
        <wsColumn name="pdbIds" width="200"/>
      </processQuery>



    <sqlQuery name="ByWeightFilter" doNotTest="true">
      <paramRef ref="geneParams.gene_result"/>
      <paramRef ref="sharedParams.min_weight" default="0"/>
      <paramRef ref="sharedParams.max_weight" default="100"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="wdk_weight"/>
      <sql>
        <![CDATA[
          SELECT a.source_id, a.project_id, a.wdk_weight, 'Y' as matched_result
          FROM $$gene_result$$ a
          WHERE a.wdk_weight >= $$min_weight$$
            AND a.wdk_weight <= $$max_weight$$
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Generic Splice Site Query for TriTrypDB -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByGenericSpliceSites" includeProjects="TriTrypDB,UniDB">
      <paramRef ref="geneParams.splice_site_generic"/>
      <paramRef ref="geneParams.splice_site_sample_one"/>
      <paramRef ref="geneParams.splice_site_sample_two"/>
      <paramRef ref="geneParams.percent_diff"/>
      <paramRef ref="geneParams.min_norm_count"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="one_loc"/>
      <column name="one_transcript_id"/>
      <column name="one_dist_to_cds"/>
      <column name="one_dist_to_first_atg"/>
      <column name="two_loc"/>
      <column name="two_transcript_id"/>
      <column name="two_dist_to_cds"/>
      <column name="two_dist_to_first_atg"/>
      <sql>
        <![CDATA[
          WITH loc_counts AS (
            SELECT g.source_id
             , f.protocol_app_node_id
             , f.na_sequence_id
             , f.segment_start AS location
             , sum(f.count_per_million) AS sum_cpm
            FROM
             apidb.splicesitegenes g
             , apidb.splicesitefeature f
            WHERE g.splice_site_feature_id = f.splice_site_feature_id
            GROUP BY f.segment_start, f.na_sequence_id, f.protocol_app_node_id, g.source_id
          ) , stats AS (
            SELECT source_id
              , protocol_app_node_id
              , max(sum_cpm) AS max_cpm
              , round(max(sum_cpm) / sum(sum_cpm), 2) * 100 AS pct_max
            FROM loc_counts
            GROUP BY source_id, protocol_app_node_id
          ) , gene_loc_stats AS (
            SELECT this.*, stats.pct_max
            FROM (
               SELECT g.source_id
                 , f.na_sequence_id
                 , f.segment_start AS location
                 , sum(f.count_per_million) AS sum_cpm
                 , f.protocol_app_node_id
               FROM
                 apidb.splicesitegenes g
                 , apidb.splicesitefeature f
               WHERE g.splice_site_feature_id = f.splice_site_feature_id
               GROUP BY g.source_id, f.segment_start, f.protocol_app_node_id, f.na_sequence_id
             ) this
             , stats
            WHERE this.sum_cpm = stats.max_cpm
              AND this.source_id = stats.source_id
              AND this.protocol_app_node_id = stats.protocol_app_node_id
          )
             -- MAIN START
select distinct ta.gene_source_id
            , ta.source_id
            , ta.project_id
            , 'Y' AS matched_result
            , one.location AS one_loc
            , t1.transcript_source_id AS one_transcript_id
            , t1.dist_to_cds AS one_dist_to_cds
            , t1.dist_to_first_atg AS one_dist_to_first_atg
            , two.location AS two_loc
            , t2.transcript_source_id AS two_transcript_id
            , t2.dist_to_cds AS two_dist_to_cds
            , t2.dist_to_first_atg AS two_dist_to_first_atg
          FROM
            gene_loc_stats one
            , gene_loc_stats two
            , apidbtuning.splicesitetranscripts t1
            , apidbtuning.splicesitetranscripts t2
            , apidbtuning.transcriptattributes ta
          WHERE one.source_id = two.source_id
            AND one.protocol_app_node_id = $$splice_site_sample_one$$
            AND two.protocol_app_node_id = $$splice_site_sample_two$$
            AND one.pct_max > $$percent_diff$$
            AND two.pct_max > $$percent_diff$$
            AND one.sum_cpm > $$min_norm_count$$
            AND two.sum_cpm > $$min_norm_count$$
            AND one.location != two.location
            AND one.na_sequence_id = t1.na_sequence_id
            AND one.location = t1.location
            AND two.na_sequence_id = t2.na_sequence_id
            AND two.location = t2.location
            AND t1.type = 'Splice Site'
            AND t2.type = 'Splice Site'
            AND ta.gene_source_id = one.source_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByGenericSpliceSites" doNotTest="true" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.splice_site_generic" quote="false"/>
      <paramRef ref="geneParams.splice_site_sample_one"/>
      <paramRef ref="geneParams.splice_site_sample_two"/>
      <paramRef ref="geneParams.percent_diff"/>
      <paramRef ref="geneParams.min_norm_count"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="one_loc" wsName="one_loc"/>
      <wsColumn name="one_transcript_id" wsName="one_transcript_id"/>
      <wsColumn name="one_dist_to_cds" wsName="one_dist_to_cds"/>
      <wsColumn name="one_dist_to_first_atg" wsName="one_dist_to_first_atg"/>
      <wsColumn name="two_loc" wsName="two_loc"/>
      <wsColumn name="two_transcript_id" wsName="two_transcript_id"/>
      <wsColumn name="two_dist_to_cds" wsName="two_dist_to_cds"/>
      <wsColumn name="two_dist_to_first_atg" wsName="two_dist_to_first_atg"/>
    </processQuery>


    <sqlQuery name="GenesWithUserComments" excludeProjects="EuPathDB">
      <paramRef ref="sharedParams.timestamp"/>
      <paramRef ref="organismParams.organism_select_all"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="comment_count"/>
      <column name="min_comment_date"/>
      <column name="max_comment_date"/>
      <column name="headlines"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, ta.project_id, ta.gene_source_id,
                 comm.comment_count, comm.min_comment_date, comm.max_comment_date, comm.headlines,
                'Y' as matched_result
          FROM (SELECT stable_id, sum(comment_count) as comment_count,
                       to_char(min(min_comment_date), 'yyyy-mm-dd hh24:mi:ss') as min_comment_date,
                       to_char(max(max_comment_date), 'yyyy-mm-dd hh24:mi:ss') as max_comment_date,
                       string_agg(headline, ' | ' order by max_comment_date desc) as headlines
                FROM (
                    SELECT stable_id, substr(headline, 1, 80) as headline, count(*) as comment_count,
                           min(comment_date) as min_comment_date,
                           max(comment_date) as max_comment_date
                    FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@
                    WHERE ('@PROJECT_ID@' = 'UniDB' OR project_name = '@PROJECT_ID@')
                             and is_visible = 1
                    GROUP BY stable_id, headline
                  ) t
                GROUP BY stable_id
               ) comm,
               apidbTuning.TranscriptAttributes ta
          WHERE comm.stable_id = ta.gene_source_id
            AND ta.taxon_id in ($$organism_select_all$$)
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesWithUserComments" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="sharedParams.timestamp"/>
      <paramRef ref="organismParams.organism_select_all" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="comment_count"/>
      <wsColumn name="min_comment_date" width="50"/>
      <wsColumn name="max_comment_date" width="50"/>
      <wsColumn name="headlines" width="4000"/>
    </processQuery>


    <sqlQuery name="GenesInGlycosomeProteome" excludeProjects="EuPathDB">
      <paramRef ref="geneParams.glycosome_confidence"/>
      <paramRef ref="geneParams.min_glycosome_score"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="gvalue"/>
      <column name="confidence"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id, gene_source_id
            ,'Y' as matched_result, ta.project_id
            , round(nfe.VALUE, 2) AS gvalue
            , CASE WHEN (nfe.categorical_value = 2) THEN 'High'
                   WHEN (nfe.categorical_value = 1) THEN 'Medium'
                   ELSE 'Low' END AS confidence
          FROM results.nafeatureexpression nfe
             , apidbtuning.transcriptattributes ta
             , study.protocolappnode pan
             , study.studylink sl
             , study.study ps
             , study.study i
             , sres.externaldatabaserelease r
             , sres.externaldatabase d
          WHERE ta.gene_na_feature_id = nfe.na_feature_id
            AND nfe.protocol_app_node_id = pan.protocol_app_node_id
            AND pan.protocol_app_node_id = sl.protocol_app_node_id
            AND sl.study_id = ps.study_id
            AND ps.investigation_id = i.study_id
            AND i.external_database_release_id = r.external_database_release_id
            AND r.external_database_id = d.external_database_id
            AND d.NAME ='tbruTREU927_quantitative_massSpec_Guther_glycosomal_proteome_RSRC'
            AND nfe.VALUE >= $$min_glycosome_score$$
            AND nfe.categorical_value in ($$glycosome_confidence$$)
          ORDER BY nfe.categorical_value DESC, nfe.value DESC
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesInGlycosomeProteome" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.glycosome_confidence" quote="false"/>
      <paramRef ref="geneParams.min_glycosome_score"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="gvalue" width="1" wsName="gvalue"/>
      <wsColumn name="confidence" width="1" wsName="confidence"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Genes with Apollo Annotation -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesWithApolloAnnotation" excludeProjects="EuPathDB">
      <paramRef ref="sharedParams.timestamp"/>
      <paramRef ref="organismParams.organism_select_all"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="comment_date"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT ta.source_id, ta.project_id, ta.gene_source_id, 'Y' as matched_result, aug.creation_date as comment_date
          FROM apidbtuning.ApolloUpdateGene aug, apidbtuning.transcriptattributes ta
          WHERE ta.gene_source_id = aug.gene_source_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesWithApolloAnnotation" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="sharedParams.timestamp"/>
      <paramRef ref="organismParams.organism_select_all" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="comment_date" width="50"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Genes by Metabolic Pathways -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByMetabolicPathway" excludeProjects="EuPathDB,UniDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="pathwayParams.pathways_source"/>
      <paramRef ref="pathwayParams.metabolic_pathway_id_with_genes"/>
      <paramRef ref="pathwayParams.pathway_wildcard"/>
      <paramRef ref="pathwayParams.exact_match_only"/>
      <paramRef ref="pathwayParams.exclude_incomplete_ec"/>
      <column name="project_id"/>
      <column name="gene_source_id"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="ec_pathway"/>
      <column name="ec_gene"/>
      <sql>
        <![CDATA[
          WITH transform AS (
              SELECT DISTINCT ta.gene_source_id
              , ta.source_id
              , ta.project_id
              , tp.ec_number_pathway as ec_pathway
              , tp.ec_number_gene as ec_gene
              FROM apidbtuning.transcriptattributes ta
              , apidbtuning.transcriptpathway tp
              WHERE (tp.pathway_id in ($$metabolic_pathway_id_with_genes$$)
                  OR lower(tp.pathway_name) LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower($$pathway_wildcard$$),' ',''),'-', '%'),'*','%'),'any','%') )
              AND ta.gene_source_id = tp.gene_source_id
              AND tp.complete_ec >= $$exclude_incomplete_ec$$
              AND tp.exact_match >= $$exact_match_only$$
              AND ta.taxon_id in ($$organism$$)
          )
            )
          , pathwayAgg AS (
              SELECT DISTINCT gene_source_id
              , source_id
              , project_id
              , ec_gene
              , string_agg(ec_pathway, ', ' order by ec_pathway) as ec_pathway
              FROM transform
              GROUP BY gene_source_id, source_id, ec_gene, project_id
          )
            )
          , geneAgg AS (
              SELECT DISTINCT gene_source_id
              , source_id
              , project_id
              , ec_pathway
              , string_agg(ec_gene, ', ' order by ec_gene) as ec_gene
              FROM pathwayAgg
              GROUP BY gene_source_id, source_id, ec_pathway, project_id
          )
            )
          SELECT DISTINCT project_id
          , gene_source_id
          , source_id
          , 'Y' as matched_result
          , string_agg(ec_pathway, ', ' order by ec_pathway) as ec_pathway
          , string_agg(ec_gene, ', ' order by ec_pathway) as ec_gene
          FROM geneAgg
          GROUP BY project_id, gene_source_id, source_id, 'Y'
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Genes by Compounds -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="GenesByReactionCompounds" excludeProjects="EuPathDB,UniDB">
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="compoundParams.chebi_compound_id"/>
      <paramRef ref="compoundParams.compound_type"/>
      <paramRef ref="pathwayParams.exact_match_only"/>
      <paramRef ref="pathwayParams.exclude_incomplete_ec"/>
      <paramRef ref="pathwayParams.pathways_source"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT ta.source_id
            , ta.gene_source_id
            , 'Y' as matched_result
            , ta.project_id
          FROM apidbtuning.transcriptattributes ta
            , apidbtuning.transcriptpathway tp
            , apidbtuning.pathwaycompounds pc
            , apidbtuning.pathwayreactions pr
          WHERE pc.chebi_accession in ($$chebi_compound_id$$)
            AND pr.reaction_id = pc.reaction_id
            AND pr.ext_db_name = pc.ext_db_name
            AND ((pr.is_reversible = 0 AND pc.type = $$compound_type$$) OR (pr.is_reversible = 1 AND $$compound_type$$ = 'substrate/product') OR $$compound_type$$ = 'either')
            AND tp.pathway_id = pc.pathway_id
            AND tp.complete_ec >= $$exclude_incomplete_ec$$
            AND tp.exact_match >= $$exact_match_only$$
            AND tp.ec_number_pathway = pr.enzyme
            AND ta.gene_source_id = tp.gene_source_id
            AND ta.taxon_id in ($$organism$$)
            AND (tp.external_database_release_id = $$pathways_source$$ OR $$pathways_source$$ = 1)
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GenesByPathwayIds" excludeProjects="EuPathDB,UniDB">
      <paramRef ref="pathwayParams.pathway_result"/>
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="pathwayParams.exact_match_only"/>
      <paramRef ref="pathwayParams.exclude_incomplete_ec"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="wdk_weight"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT ta.source_id
            , ta.gene_source_id
            , ta.project_id
            , 'Y' as matched_result
            , max(ps.wdk_weight) as wdk_weight
          FROM apidbtuning.transcriptpathway tp
            , apidbtuning.pathwaycompounds pc
            , apidbtuning.pathwayreactions pr
            , apidbtuning.transcriptattributes ta
            , ($$pathway_result$$) ps
          WHERE tp.pathway_source_id = ps.source_id
            AND pc.pathway_id = tp.pathway_id
            AND pr.reaction_id = pc.reaction_id
            AND pr.ext_db_name = pc.ext_db_name
            AND tp.complete_ec >= $$exclude_incomplete_ec$$
            AND tp.exact_match >= $$exact_match_only$$
            AND tp.ec_number_pathway = pr.enzyme
            AND ta.gene_source_id = tp.gene_source_id
            AND ta.taxon_id in ($$organism$$)
          GROUP BY ta.source_id, ta.gene_source_id, ta.project_id
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GenesByCompoundIds" excludeProjects="EuPathDB,UniDB">
      <paramRef ref="compoundParams.compound_result"/>
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="compoundParams.compound_type"/>
      <paramRef ref="pathwayParams.pathways_source"/>
      <paramRef ref="pathwayParams.exact_match_only"/>
      <paramRef ref="pathwayParams.exclude_incomplete_ec"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="wdk_weight"/>

      <sql>
        <![CDATA[
          SELECT DISTINCT ta.gene_source_id
            , ta.source_id
            , 'Y' as matched_result
            , ta.project_id
            , max (ds.wdk_weight) as wdk_weight
          FROM apidbtuning.pathwaycompounds pc
            , apidbtuning.pathwayreactions pr
            , apidbtuning.transcriptpathway tp
            , apidbtuning.transcriptattributes ta
            , ($$compound_result$$) ds
          WHERE pc.chebi_accession = ds.source_id
            AND pr.reaction_id =  pc.reaction_id
            AND pr.ext_db_name = pc.ext_db_name
            AND ((pr.is_reversible = 0 AND pc.type = $$compound_type$$) OR (pr.is_reversible = 1 AND $$compound_type$$ = 'substrate/product') OR $$compound_type$$ = 'either')
            AND (tp.external_database_release_id = $$pathways_source$$ OR $$pathways_source$$ = 1)
            AND tp.pathway_id = pc.pathway_id
            AND tp.ec_number_pathway = pr.enzyme
            AND tp.complete_ec >= $$exclude_incomplete_ec$$
            AND tp.exact_match >= $$exact_match_only$$
            AND ta.gene_source_id = tp.gene_source_id
            AND ta.taxon_id in ($$organism$$)
          GROUP BY ta.gene_source_id, ta.source_id, ta.project_id
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GenesByCopyNumber" includeProjects="AmoebaDB,CryptoDB,PlasmoDB,ToxoDB,TriTrypDB,FungiDB,UniDB">
      <paramRef ref="organismParams.organismSinglePickCnv"/> <!-- queryRef="organismVQ.CNV"/ -->
      <paramRef ref="sharedParams.CNV_strain"/>
      <paramRef ref="geneParams.medianOrIndividual"/>
      <paramRef ref="geneParams.CNV_type"/>
      <paramRef ref="geneParams.operator" quote="false"/>
      <paramRef ref="geneParams.copyNumber"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="wdk_weight"/>
      <column name="matched_result"/>
      <column name="strains"/>
      <column name="ref_cn"/>
      <column name="median_ploidy_all"/>
      <column name="median_ploidy_hits"/>
      <column name="median_raw_all"/>
      <column name="median_raw_hits"/>
      <column name="median_haploid_all"/>
      <column name="median_haploid_hits"/>
      <column name="median_gene_dose_all"/>
      <column name="median_gene_dose_hits"/>
      <sql>
        <![CDATA[
          WITH bySample AS (
            SELECT DISTINCT g.project_id
              , g.source_id
              , g.gene_source_id
              , g.strain
              , g.raw_estimate
              , g.ref_cn
              , g.haploid_number
              , c.ploidy
              , g.chromosome
            FROM apidbtuning.genecopynumbers g
             , apidbtuning.chrcopynumbers c
            WHERE c.output_pan_id IN ($$CNV_strain$$)
              AND g.input_pan_id = c.input_pan_id
              AND g.na_sequence_id = c.na_sequence_id
          )
          , medians AS (
            SELECT s.gene_source_id
              , median (s.ploidy) AS median_ploidy
              , median (s.raw_estimate) AS median_raw
              , median (s.haploid_number) AS median_haploid
              , median (s.ploidy * s.haploid_number) AS median_gene_dose
            FROM bySample s
            GROUP BY s.gene_source_id
          )
          , hit_medians AS (
            SELECT s.project_id
              , s.source_id
              , s.gene_source_id
              , string_agg(s.strain, ', ' ORDER BY s.strain) AS strains
              , s.ref_cn
              , percentile_cont(0.5) WITHIN GROUP (ORDER BY s.ploidy) AS median_ploidy_hits
              , percentile_cont(0.5) WITHIN GROUP (ORDER BY s.raw_estimate) AS median_raw_hits
              , percentile_cont(0.5) WITHIN GROUP (ORDER BY s.haploid_number) AS median_haploid_hits
              , percentile_cont(0.5) WITHIN GROUP (ORDER BY s.ploidy * s.haploid_number) AS median_gene_dose_hits
            FROM bySample s
              , medians m
            WHERE m.gene_source_id = s.gene_source_id
              AND CASE WHEN $$CNV_type$$ = 'haploid_number' AND s.haploid_number $$operator$$ $$copyNumber$$ THEN 1
                  WHEN $$CNV_type$$ = 'gene_dose' AND (s.haploid_number * s.ploidy) $$operator$$ $$copyNumber$$ THEN 1
                  ELSE 0
                  END = 1
              AND CASE WHEN $$medianOrIndividual$$ = 'median' AND $$CNV_type$$ = 'haploid_number' AND m.median_haploid $$operator$$ $$copyNumber$$ THEN 1
                  WHEN $$medianOrIndividual$$ = 'median' AND $$CNV_type$$ = 'gene_dose' AND (m.median_raw * m.median_ploidy) $$operator$$ $$copyNumber$$ THEN 1
                  WHEN $$medianOrIndividual$$ = 'sample' THEN 1
                  ELSE 0
                  END = 1
            GROUP BY s.project_id, s.source_id, s.gene_source_id, s.ref_cn
          )
          SELECT h.project_id
            , h.source_id
            , h.gene_source_id
            , 10 AS wdk_weight
            , 'Y' AS matched_result
            , h.strains
            , h.ref_cn
            , m.median_ploidy AS median_ploidy_all
            , h.median_ploidy_hits
            , CAST(m.median_raw AS DECIMAL(10,2)) AS median_raw_all
            , CAST (h.median_raw_hits AS DECIMAL(10,2)) AS median_raw_hits
            , CAST (m.median_haploid AS DECIMAL(10,2)) AS median_haploid_all
            , CAST (h.median_haploid_hits AS DECIMAL(10,2)) AS median_haploid_hits
            , CAST (m.median_gene_dose AS DECIMAL(10,2)) AS median_gene_dose_all
            , CAST (h.median_gene_dose_hits AS DECIMAL(10,2)) AS median_gene_dose_hits
          FROM hit_medians h
            , medians m
          WHERE m.gene_source_id = h.gene_source_id
          GROUP BY h.project_id, h.source_id, h.gene_source_id, m.median_ploidy, m.median_raw, m.median_haploid, m.median_gene_dose, h.ref_cn, h.strains, h.median_ploidy_hits, h.median_raw_hits, h.median_haploid_hits, h.median_gene_dose_hits
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GenesByCopyNumberComparison"
              includeProjects="AmoebaDB,CryptoDB,PlasmoDB,ToxoDB,TriTrypDB,FungiDB,UniDB">
      <paramRef ref="organismParams.organismSinglePickCnv"/> <!-- queryRef="organismVQ.CNV"/ -->
      <paramRef ref="sharedParams.CNV_strain"/>
      <paramRef ref="geneParams.medianOrIndividual"/>
      <paramRef ref="geneParams.comparisonOperator" quote="false"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="wdk_weight"/>
      <column name="matched_result"/>
      <column name="strains"/>
      <column name="ref_cn"/>
      <column name="median_ploidy_all"/>
      <column name="median_ploidy_hits"/>
      <column name="median_raw_all"/>
      <column name="median_raw_hits"/>
      <column name="median_haploid_all"/>
      <column name="median_haploid_hits"/>
      <column name="median_gene_dose_all"/>
      <column name="median_gene_dose_hits"/>
      <sql>
        <![CDATA[
          WITH bySample AS (
            SELECT DISTINCT g.project_id
              , g.source_id
              , g.gene_source_id
              , g.strain
              , g.raw_estimate
              , g.ref_cn
              , g.haploid_number
              , c.ploidy
              , g.chromosome
            FROM apidbtuning.genecopynumbers g
              , apidbtuning.chrcopynumbers c
            WHERE c.output_pan_id IN ($$CNV_strain$$)
              AND g.input_pan_id = c.input_pan_id
              AND g.na_sequence_id = c.na_sequence_id
          ) , medians AS (
            SELECT s.gene_source_id
              , median (s.ploidy) AS median_ploidy
              , median (s.raw_estimate) AS median_raw
              , median (s.haploid_number) AS median_haploid
              , median (s.ploidy * s.haploid_number) AS median_gene_dose
            FROM bySample s
            GROUP BY s.gene_source_id
          ) , hit_medians AS (
            SELECT s.project_id
              , s.source_id
              , s.gene_source_id
              , string_agg(s.strain, ', ' ORDER BY s.strain) AS strains
              , s.ref_cn
              , percentile_cont(0.5) WITHIN GROUP (ORDER BY s.ploidy) AS median_ploidy_hits
              , percentile_cont(0.5) WITHIN GROUP (ORDER BY s.raw_estimate) AS median_raw_hits
              , percentile_cont(0.5) WITHIN GROUP (ORDER BY s.haploid_number) AS median_haploid_hits
              , percentile_cont(0.5) WITHIN GROUP (ORDER BY s.ploidy * s.haploid_number) AS median_gene_dose_hits
            FROM bySample s
              , medians m
            WHERE m.gene_source_id = s.gene_source_id
              AND s.haploid_number $$comparisonOperator$$ s.ref_cn
              AND CASE WHEN $$medianOrIndividual$$ = 'median' AND m.median_haploid $$comparisonOperator$$ s.ref_cn THEN 1
                  WHEN $$medianOrIndividual$$ = 'sample' THEN 1
                  ELSE 0
                  END = 1
            GROUP BY s.project_id, s.source_id, s.gene_source_id, s.ref_cn
          )
          SELECT h.project_id
            , h.source_id
            , h.gene_source_id
            , 10 AS wdk_weight
            , 'Y' AS matched_result
            , h.strains
            , h.ref_cn
            , m.median_ploidy AS median_ploidy_all
            , h.median_ploidy_hits
            , CAST(m.median_raw AS DECIMAL(10,2)) AS median_raw_all
            , CAST (h.median_raw_hits AS DECIMAL(10,2)) AS median_raw_hits
            , CAST (m.median_haploid AS DECIMAL(10,2)) AS median_haploid_all
            , CAST (h.median_haploid_hits AS DECIMAL(10,2)) AS median_haploid_hits
            , CAST (m.median_gene_dose AS DECIMAL(10,2)) AS median_gene_dose_all
            , CAST (h.median_gene_dose_hits AS DECIMAL(10,2)) AS median_gene_dose_hits
          FROM hit_medians h
            , medians m
          WHERE m.gene_source_id = h.gene_source_id
          GROUP BY h.project_id, h.source_id, h.gene_source_id, m.median_ploidy, m.median_raw, m.median_haploid, m.median_gene_dose, h.ref_cn, h.strains, h.median_ploidy_hits, h.median_raw_hits, h.median_haploid_hits, h.median_gene_dose_hits
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="GenesByCoexpression" doNotTest="true" includeProjects="FungiDB,UniDB">
      <paramRef ref="sharedParams.ds_gene_ids"/>
      <paramRef ref="geneParams.coexp_correlation" quote="false"/>
      <paramRef ref="geneParams.coexp_value"/>
        <paramRef ref="geneParams.coexp_source"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="input_id"/>
      <column name="min_coeff"/>
      <column name="max_coeff"/>
      <sql>
        <![CDATA[
          SELECT ta.gene_source_id, ta.source_id
                 , ta.project_id, 'Y' as matched_result
                 , string_agg(ds.gene_source_id, ', ') AS input_id
                 , max(coefficient) as max_coeff, min(coefficient) as min_coeff
          FROM  ApidbTuning.TranscriptAttributes ta, Apidb.FungiCoexpression c,
                ($$ds_gene_ids$$) ds, ApidbTuning.GeneId gi
  WHERE  gi.gene= ta.gene_source_id
    AND ( ( c.gene_id = gi.id  AND  c.associated_gene_id = ds.gene_source_id )
       OR ( c.gene_id = ds.gene_source_id  AND  c.associated_gene_id = gi.id ))
            AND  c.coefficient $$coexp_correlation$$ $$coexp_value$$
    AND  c.source=$$coexp_source$$
          GROUP BY ta.source_id, ta.gene_source_id, ta.project_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByCoexpression" includeProjects="EuPathDB" doNotTest="true"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="sharedParams.ds_gene_ids" noTranslation="true"/>
      <paramRef ref="geneParams.coexp_correlation" quote="false"/>
      <paramRef ref="geneParams.coexp_value"/>
        <paramRef ref="geneParams.coexp_source"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="input_id" width="32"/>
      <wsColumn name="min_coeff" width="10" wsName="min_coeff"/>
      <wsColumn name="max_coeff" width="10" wsName="max_coeff"/>
    </processQuery>


    <!-- Dataset was removed from Bld49 and loaded for bld-54 - redmine #41023 -->
    <sqlQuery name="GenesByNeurosporaCoexpression" doNotTest="true" includeProjects="FungiDB,UniDB">
      <paramRef ref="geneParams.single_gene_id"/>
      <paramRef ref="geneParams.coexp_network_distance" quote="false"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="input_id"/>
      <column name="coefficient"/>
      <sql>
        <![CDATA[
          SELECT ta.gene_source_id, ta.source_id
                 ,ta.project_id, 'Y' as matched_result
                 , $$single_gene_id$$ AS input_id
                 , coefficient
          FROM  ApidbTuning.TranscriptAttributes ta, Apidb.FungiCoexpression c,
                ApidbTuning.GeneId gi
          WHERE  c.gene_id = $$single_gene_id$$
            AND  c.associated_gene_id = gi.id
            AND  gi.gene= ta.gene_source_id
            AND  c.coefficient $$coexp_network_distance$$
            AND  c.source='Benz'
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByNeurosporaCoexpression" includeProjects="EuPathDB" doNotTest="true"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.single_gene_id" noTranslation="true"/>
      <paramRef ref="geneParams.coexp_network_distance" quote="false"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="input_id" width="32"/>
      <wsColumn name="coefficient" width="10" wsName="coefficient"/>
    </processQuery>




    <sqlQuery name="GenesByAlphaFold" doNotTest="true" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organismsWithAlphafold"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>

      <sql>
        <![CDATA[
          SELECT DISTINCT ta.project_id
            , ta.source_id
            , ta.gene_source_id
            , 'Y' as matched_result
          FROM apidbtuning.transcriptattributes ta
            , apidbtuning.alphafoldgenes afg
          WHERE ta.gene_source_id = afg.gene_source_id
            AND ta.taxon_id IN ($$organismsWithAlphafold$$)
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByAlphaFold" includeProjects="EuPathDB" doNotTest="true"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organismsWithAlphafold" quote="false"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

    <sqlQuery name="GenesBySingleCell" doNotTest="true" includeProjects="TriTrypDB,PlasmoDB,PiroplasmaDB,ToxoDB,CryptoDB,HostDB">
      <paramRef ref="organismParams.organismsWithSingleCell"/>
      <paramRef ref="geneParams.singleCellDataset"/>
      <column name="project_id"/>
      <column name="gene_source_id"/>
      <column name="source_id"/>
      <column name="feature"/>
      <column name="matched_result"/>
      <column name="dataset_name"/>

      <sql>
        <![CDATA[
            SELECT ta.project_id
            , ta.source_id
            , ta.gene_source_id
            , MIN(cxg.source_id) KEEP (DENSE_RANK FIRST ORDER BY cxg.source_id) AS feature
            , ed.name as dataset_name
            , 'Y' as matched_result
            FROM apidbtuning.transcriptattributes ta
            , apidb.cellxgene cxg
            , sres.externaldatabaserelease edr
            , sres.externaldatabase ed
            WHERE cxg.na_feature_id = ta.gene_na_feature_id
            AND cxg.external_database_release_id = $$singleCellDataset$$
            AND edr.external_database_release_id = cxg.external_database_release_id
            AND ed.external_database_id = edr.external_database_id
            GROUP BY ta.project_id, ta.source_id, ta.gene_source_id, ed.name
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesBySingleCell" includeProjects="EuPathDB" doNotTest="true"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organismsWithSingleCell"/>
      <paramRef ref="geneParams.singleCellDataset"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
      <wsColumn name="feature" width="50" wsName="feature"/>
      <wsColumn name="dataset_name" width="500" wsName="dataset_name"/>
      <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


  </querySet>

  <querySet name="GeneTransforms" queryType="transform" isCacheable="true" doNotTest="true">

    <postCacheUpdateSql>
      <sql>
        <![CDATA[
           insert into ##WDK_CACHE_TABLE##
                       (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result)
           with matches
                as (select *
                    from ##WDK_CACHE_TABLE##
                    where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##),
                row_offset
                as (select max(wdk_row_id) as the_max from matches),
                mismatches
                as (  select source_id, gene_source_id
                      from apidbTuning.transcriptAttributes
                      where gene_source_id in (select gene_source_id from matches)
                    except
                      select source_id, gene_source_id
                      from matches)
           select ##WDK_CACHE_INSTANCE_ID##,
                  row_number() OVER () + the_max, 0, source_id, gene_source_id, 'N'
           from row_offset, mismatches
        ]]>
      </sql>
    </postCacheUpdateSql>

    <sqlQuery name="GenesByMissingTranscripts">
      <paramRef ref="geneParams.gene_result"/>  <!-- actually transcripts -->
      <paramRef ref="geneParams.genesWithTranscripts" default="genes_missing_transcripts"/>
      <paramRef ref="geneParams.missingOrFoundTranscripts" default="missing_transcripts"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="wdk_weight"/>
      <sql>
        <![CDATA[
               -- for the genes in this result, their transcripts that were not in the result (missing)
               WITH gene_result as $$gene_result$$,
               missing_transcripts as (
                 select ta.gene_source_id, ta.source_id, ta.project_id, 10 as wdk_weight
                 from (select distinct gene_source_id from gene_result) found_genes, apidbtuning.transcriptattributes ta
                 where found_genes.gene_source_id = ta.gene_source_id
                 except
                 select gene_source_id, source_id, project_id, 10 as wdk_weight
                 from gene_result where matched_result = 'Y'
               )
              -- for the genes in this result that had missing transcripts, their missing transcripts
              select * from missing_transcripts
              where $$genesWithTranscripts$$ = 'genes_missing_transcripts'
              and   $$missingOrFoundTranscripts$$ = 'missing_transcripts'

              UNION

              -- for the genes in this result that had missing transcripts, all their transcripts
              select ta.gene_source_id, ta.source_id, ta.project_id, 10 as wdk_weight
              from missing_transcripts mt, apidbtuning.transcriptattributes ta
              where mt.gene_source_id = ta.gene_source_id
              and  $$genesWithTranscripts$$ = 'genes_missing_transcripts'
              and  $$missingOrFoundTranscripts$$ = 'all_transcripts'

              UNION

              -- for the genes in this result that had missing transcripts, all found transcripts
              select result.gene_source_id, result.source_id, result.project_id, 10 as wdk_weight
              from (select distinct gene_source_id from gene_result) found_genes, gene_result result
              where found_genes.gene_source_id = result.gene_source_id
              and  $$genesWithTranscripts$$ = 'genes_missing_transcripts'
              and  $$missingOrFoundTranscripts$$ = 'found_transcripts'

              UNION

              -- the genes in this result that did not have missing transcripts, and their transcripts (all)
              select gene_source_id, source_id, result.project_id, 10 as wdk_weight
              from gene_result result
              where result.gene_source_id not in (select distinct gene_source_id from missing_transcripts)
              and $$genesWithTranscripts$$ = 'genes_not_missing_transcripts'
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GenesByExpandResult" includeProjects="ToxoDB,UniDB">
      <paramRef ref="geneParams.gene_result"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="matched_result"/>
      <column name="wdk_weight"/>
      <sql>
        <![CDATA[
          SELECT gb.source_id, gb.project_id, 'Y' as matched_result, max(c.wdk_weight) AS wdk_weight
          FROM $$gene_result$$ c, ApidbTuning.GeneAttributes ga, ApidbTuning.GeneAttributes gb
          WHERE ga.source_id = c.source_id
            AND gb.gene_id = ga.gene_id
          GROUP BY gb.source_id, gb.project_id
        ]]>
      </sql>
    </sqlQuery>
    <!--
        <sqlQuery name="GenesByExpandOrganism" includeProjects="ToxoDB">
            <paramRef ref="geneParams.gene_result"/>
            <column name="project_id"/>
            <column name="source_id"/>
            <column name="matched_result"/>
            <sql>
                <![CDATA[
                        SELECT gb.source_id, 'Y' as matched_result, gb.project_id
                        FROM $$gene_answer$$, ApidbTuning.GeneAttributes ga, ApidbTuning.GeneAttributes gb
                        WHERE $$gene_answer.condition$$
                        AND ga.source_id = $$gene_answer$$.source_id
                        AND gb.gene_id = ga.gene_id
                        AND gb.organism = ga.organism
                ]]>
           </sql>
        </sqlQuery>
    -->


  </querySet>

  <querySet name="RealGeneTransforms" queryType="transform" isCacheable="true" doNotTest="true">

    <sqlQuery name="GenesFromTranscripts">
      <paramRef ref="geneParams.gene_result"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="wdk_weight"/>
      <sql>
        <![CDATA[
          SELECT distinct transcripts.gene_source_id as source_id, transcripts.project_id, sum(transcripts.wdk_weight) as wdk_weight
          FROM $$gene_result$$ transcripts
          GROUP BY (transcripts.gene_source_id, transcripts.project_id)
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="TranscriptsFromGenes">
      <paramRef ref="geneParams.transcript_result"/>
      <column name="project_id"/>
      <column name="gene_source_id"/>
      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="wdk_weight"/>
      <sql>
        <![CDATA[
        SELECT genes.project_id, genes.source_id as gene_source_id, ta.source_id, 'Y' as matched_result, genes.wdk_weight
        FROM $$transcript_result$$ genes, apidbtuning.transcriptattributes ta
        WHERE genes.source_id = ta.gene_source_id
        ]]>
      </sql>
    </sqlQuery>

  </querySet>

  <querySet name="SnpAlignment" queryType="id" isCacheable="false" doNotTest="true">
    <sqlQuery name="SnpAlignmentForm"
              includeProjects="AmoebaDB,CryptoDB,FungiDB,MicrosporidiaDB,PiroplasmaDB,PlasmoDB,TriTrypDB,ToxoDB,UniDB">
      <paramRef ref="organismParams.organismSinglePick" visible="false" queryRef="organismVQ.withNgsSNPdatasets"/>
      <paramRef ref="snpParams.ngsSnp_strain_meta"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <sql>
        <![CDATA[
          SELECT '' as source_id, '' as project_id WHERE 1 = 0
        ]]>
      </sql>
    </sqlQuery>
  </querySet>

  <!-- NOTE: the following query set is for queries that return Gene records, not transcript
       This is critical as the GeneId queryset always does the post insert SQL -->

  <querySet name="GeneIdGene" queryType="id" isCacheable="true">

    <sqlQuery name="GenesByTaxonGene" excludeProjects="EuPathDB">
      <paramRef ref="organismParams.organism"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id, ga.project_id
          FROM ApidbTuning.GeneAttributes ga
          WHERE ga.taxon_id in ($$organism$$)
          ORDER BY ga.source_id
        ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByTaxonGene" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="organismParams.organism"/>
      <wsColumn name="project_id" width="20"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
    </processQuery>

  </querySet>
</wdkModel>
