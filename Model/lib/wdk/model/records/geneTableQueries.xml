<wdkModel>

<!-- notes

  - so far this is only a unification of p and t.  crypto seemed pretty different

  - the pathways query is diff between t and p, but shouldn't be.  one is wrong.

--> 


  <querySet name="GeneTables" queryType="table" isCacheable="false">

            <defaultTestParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">%%defaultGene%%</paramValue>
               <paramValue name="project_id">PlasmoDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_221330</paramValue> 
               <paramValue name="project_id">ToxoDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd3_1400</paramValue>
               <paramValue name="project_id">CryptoDB</paramValue>
            </defaultTestParamValues>
            <defaultTestParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_112048</paramValue>
               <paramValue name="project_id">GiardiaDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_386080</paramValue>
               <paramValue name="project_id">TrichDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">%%defaultGene%%</paramValue>
               <paramValue name="project_id">TriTrypDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EDI_244000</paramValue>
               <paramValue name="project_id">AmoebaDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">ECU07_1760</paramValue>
               <paramValue name="project_id">MicrosporidiaDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">BBOV_IV003850</paramValue>
               <paramValue name="project_id">PiroplasmaDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="HostDB">
               <paramValue name="source_id">%%defaultGene%%</paramValue>
               <paramValue name="project_id">HostDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="FungiDB,SchistoDB,UniDB,VectorBase,InitDB">
               <paramValue name="source_id"></paramValue>
               <paramValue name="project_id"></paramValue>
            </defaultTestParamValues>





       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Subcellular Location Gene Lists -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <sqlQuery name="SubcelluarLocationGeneLists">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="gene_list"/>
         <column name="dataset_presenter_id"/>
         <column name="dataset_presenter_display_name"/>
         <sql>
         <![CDATA[
        select distinct ga.source_id
        , ga.project_id
                   , replace(pan.name,' (subcellular_localization)','') as gene_list
                    , ed.dataset_presenter_id
                    , ed.DATASET_PRESENTER_DISPLAY_NAME
              from apidb.nafeaturelist fl
          , apidbtuning.geneattributes ga
          , study.studylink sl
          , study.protocolappnode pan
          , study.study s
          , APIDBTUNING.EXTERNALDBDATASETPRESENTER ed
        where sl.protocol_app_node_id = fl.protocol_app_node_id
        and sl.study_id=  s.study_id
        and fl.na_feature_id = ga.na_feature_id
        and sl.PROTOCOL_APP_NODE_ID = pan.PROTOCOL_APP_NODE_ID
        and s.EXTERNAL_DATABASE_RELEASE_ID = ed.EXTERNAL_DATABASE_RELEASE_ID
        and ed.dataset_presenter_name like '%subcellular_localization_%'
         ]]>
         </sql>
       </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Function Prediction Gene Lists -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <sqlQuery name="FunctionPredictionGeneLists">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="gene_list"/>
         <column name="dataset_presenter_id"/>
         <column name="dataset_presenter_display_name"/>
         <sql>
         <![CDATA[
        select distinct ga.source_id
        , ga.project_id
                   , replace(pan.name,' (functional_data)','') as gene_list
                    , ed.dataset_presenter_id
                    , ed.DATASET_PRESENTER_DISPLAY_NAME
              from apidb.nafeaturelist fl
          , apidbtuning.geneattributes ga
          , study.studylink sl
          , study.protocolappnode pan
          , study.study s
          , APIDBTUNING.EXTERNALDBDATASETPRESENTER ed
        where sl.protocol_app_node_id = fl.protocol_app_node_id
        and sl.study_id=  s.study_id
        and fl.na_feature_id = ga.na_feature_id
        and sl.PROTOCOL_APP_NODE_ID = pan.PROTOCOL_APP_NODE_ID
        and s.EXTERNAL_DATABASE_RELEASE_ID = ed.EXTERNAL_DATABASE_RELEASE_ID
        and ed.dataset_presenter_name like '%functional_data_%'
         ]]>
         </sql>
       </sqlQuery>





       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- protein source ids -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <sqlQuery name="ProteinSourceIDs">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="protein_source_id"/>
         <sql>
         <![CDATA[
  SELECT ta.gene_source_id as source_id,ta.project_id, ta.protein_source_id
  FROM ApidbTuning.transcriptAttributes ta
  WHERE protein_source_id IS NOT NULL
         ]]>
         </sql>
       </sqlQuery>



       <sqlQuery name="StringDBProtein">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="protein_source_id"/>
	 <column name="jsonString"/>

         <sql>
         <![CDATA[

With hasOverlap as (
    select distinct count(*) as ct
    from apidbtuning.taxonspecies ts, apidbtuning.geneattributes ga, sres.taxon t, APIDBTUNING.stringdb ss
    where ga.taxon_id = ts.taxon_id
    and ts.SPECIES_TAXON_ID = t.taxon_id
    and ss.ncbi_tax_id = t.ncbi_tax_id
    )
SELECT ta.gene_source_id as source_id,ta.project_id, ta.protein_source_id,  
(select '[' || listagg('[' || ncbi_tax_id || ', "' || official_name_ncbi || '"]', ', ') within group (order by official_name_ncbi) || ']' as json from apidbTuning.Stringdb  where is_eupath_organism = 1) as jsonString                 
FROM apidbTuning.TranscriptAttributes ta 
WHERE (select ct from hasOverlap) >0
AND  protein_source_id IS NOT NULL
         ]]>
         </sql>
       </sqlQuery>



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Gene Transcripts -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <sqlQuery name="GeneTranscripts">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="transcript_id"/>
         <column name="exon_count"/>
         <column name="length"/>
         <column name="protein_length"/>
         <column name="transcript_type"/>
         <sql>
         <!-- transcripts must be ordered alphabetically, as expected by client -->
         <![CDATA[
select gene_source_id as source_id
     , source_id as transcript_id
     , project_id as project_id
     , exon_count
     , length
     , CASE WHEN (transcript_type LIKE 'pseudogen%' OR gene_type LIKE 'pseudogen%' OR so_term_name LIKE 'pseudogen%') THEN NULL ELSE protein_length END AS protein_length
     , CASE WHEN (transcript_type LIKE 'pseudogen%' OR gene_type LIKE 'pseudogen%' OR so_term_name LIKE 'pseudogen%') THEN 'pseudogenic_transcript' 
            ELSE transcript_type END AS transcript_type
     --, so_term_name
     --, transcript_product
from apidbtuning.transcriptattributes 
order by source_id
         ]]>
         </sql>
       </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Gene Model -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <!-- this query is used by gene dump -->
       <!-- TODO:  Need to figure out how to get rid of macro here -->
       <sqlQuery name="GeneModelDump" isCacheable="false">
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="type"/>
            <column name="sequence_id"/>
            <column name="gm_start"/>
            <column name="gm_end"/>
            <column name="strand"/>
            <sql>
            <![CDATA[
 select source_id, project_id, sequence_id, gm_start,gm_end, type, decode(is_reversed, 0,'+', 1, '-', '.') strand, transcript_ids
 from ApidbTuning.GeneModelDump
 -- NOTE:  The order here is very important!  changing this will impact the SRT tool
 order by case when is_reversed = 1 then -1 * gm_start else gm_start end 
           ]]>
            </sql>
        </sqlQuery>

<!-- TODO:  need to check what happened to this table.  Should be like transcriptgenomicsequencesplit
       <sqlQuery name="GeneModelSequence" isCacheable="false" excludeProjects="EuPathDB">
            <testParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">EBI_27499</paramValue>
               <paramValue name="project_id">MicrosporidiaDB</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="sequence"/>
            <sql>
                select source_id, '@PROJECT_ID@' AS project_id,
                   gene_genomic_sequence as sequence
                FROM apidb.GENEGENOMICSEQUENCE_SPLIT
                order by start_min
            </sql>
        </sqlQuery>
-->
        <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
        <!-- Tables for protein attributes  -->  
        <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


       <sqlQuery name="ECNumbers" isCacheable="false" >
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="transcript_ids"/>
            <column name="ec_number"/>
            <column name="ec_description"/>
            <column name="ec_source"/>
            <column name="expasy_url"/>

            <sql>
            <![CDATA[
SELECT
  ta.gene_source_id AS source_id
, ta.project_id
, listagg(ta.source_id, ', ') within GROUP(ORDER BY ta.source_id) AS transcript_ids
, ec.ec_number
, ec.description AS ec_description
, DECODE(asec.evidence_code, 'OrthoMCLDerived', 'computationally inferred from orthology', 'gb', 'GenBank', 'Hagai', 'MPMP', evidence_code) AS ec_source
, 'https://enzyme.expasy.org/EC/' || ec.ec_number as expasy_url
FROM
  apidbtuning.transcriptattributes ta
, sres.enzymeclass ec
, dots.aasequenceenzymeclass asec
WHERE
  ta.aa_sequence_id = asec.aa_sequence_id
  AND asec.enzyme_class_id = ec.enzyme_class_id
  AND ( (ta.orthomcl_name IS NULL AND asec.evidence_code != 'OrthoMCLDerived') OR ta.orthomcl_name IS NOT NULL)
group by
  ta.gene_source_id
, ta.project_id
, ec.ec_number
, ec.description
, asec.evidence_code
, ec.ec_number_1
, ec.ec_number_2
, ec.ec_number_3
, ec.ec_number_4
         ]]>
            </sql>
        </sqlQuery>

       <sqlQuery name="ECNumbersInferred" isCacheable="false" >
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="ec_number"/>
            <column name="length_score"/>
            <column name="blast_score"/>
            <column name="domain_score"/>
            <column name="num_protein_with_ec"/>
            <column name="num_protein_in_group"/>
            <column name="num_genera_with_ec"/>
            <column name="num_genera_in_group"/>

            <sql>
            <![CDATA[
SELECT ta.gene_source_id AS source_id, ta.project_id, ec.ec_number,
    asec.length_score, asec.blast_score, asec.domain_score, asec.num_protein_with_ec,
    asec.num_protein_in_group, asec.num_genera_with_ec,asec.num_genera_in_group
FROM apidbtuning.transcriptattributes ta, sres.enzymeclass ec, dots.aasequenceenzymeclass asec
WHERE ta.aa_sequence_id = asec.aa_sequence_id AND asec.enzyme_class_id = ec.enzyme_class_id
      AND asec.evidence_code = 'OrthoMCLDerived'
         ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- GO terms -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="GOTerms" isCacheable="false" >
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="go_id"/>
            <column name="is_not"/>
            <column name="go_term_name"/>
            <column name="ontology"/>
            <column name="source"/>
            <column name="evidence_code"/>
            <column name="reference"/>
            <column name="evidence_code_parameter"/>
            <column name="sort_key"/>
            <sql>
              <![CDATA[
select source_id, project_id, go_id,  transcript_ids, is_not, go_term_name,
       ontology, source, evidence_code, reference, evidence_code_parameter, sort_key
from apidbTuning.GeneGoTable
              ]]>
            </sql>
        </sqlQuery>

       <sqlQuery name="GOSlim" isCacheable="false" >
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="ontology"/>
            <column name="go_id"/>
            <column name="is_not"/>
            <column name="go_term_name"/>
            <column name="slim_go_id"/>
            <column name="slim_go_term_name"/>
            <column name=""/>
            <sql>
              <![CDATA[
select goslim.*, ga.project_id
from (
select go_term.source_id, go_term.ontology,
       REPLACE(go_term.go_id, 'GO_', 'GO:') as go_id, go_term.go_term_name,
       REPLACE(go_slim.slim_go_id, 'GO_', 'GO:') AS slim_go_id,
       substr(apidb.tab_to_string(set(cast(collect(go_term.is_not)as apidb.varchartab)),''),1,10) as is_not, 
       go_slim.slim_go_term_name
from (select distinct gene_source_id as source_id, ontology, go_id, go_term_id, go_term_name, is_not
      from apidbTuning.GeneGoTerms) go_term,
     (select gsl.go_term_id, ot.source_id as slim_go_id, ot.name as slim_go_term_name
      from apidbTuning.GoSubsetLeaf gsl, sres.OntologyTerm ot
      where gsl.go_subset_term = 'goslim_generic'
        and gsl.subset_leaf_term_id = ot.ontology_term_id) go_slim
where go_term.go_term_id = go_slim.go_term_id(+)
group by source_id, ontology, go_id, go_term_name, slim_go_id, slim_go_term_name
) goslim, apidbtuning.geneattributes ga
where goslim.source_id = ga.source_id
order by goslim.source_id, goslim.ontology, goslim.go_id 
              ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Expression Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ExpressionGraphs" excludeProjects="EuPathDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="project_id_url" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="genus_species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="paralog_number"/>
            <column name="template"/>

            <!--don't show multiple isolates on record page in VB-->
            <sqlParamValue name="geneGroupJoin" excludeProjects="VectorBase,EuPathDB"></sqlParamValue>
            <sqlParamValue name="geneGroupJoin" includeProjects="VectorBase">AND psgene.source_id = psgene.profile_graph_id</sqlParamValue>
            <sql>
            <![CDATA[
SELECT g.*, decode('@PROJECT_ID@', 'UniDB', 'EuPathDB', g.project_id) as project_id_url, decode(lower(is_graph_custom), 'false', 1, 0) as template
    , regexp_substr(graph_ids, '[^,]*') as default_graph_id
    , CASE WHEN graph_ids IS NULL THEN 0 ELSE 1 END AS has_graph_data
    , dpr.SUMMARY , dpr.display_name, dpr.description
    , CASE WHEN g.pmids IS NULL THEN dpr.short_attribution ELSE
      '<a href="http://www.ncbi.nlm.nih.gov/pubmed/' || g.pmids || '">'|| dpr.short_attribution ||'</a>'
      END AS short_attribution
FROM apidbtuning.datasetpresenter dpr, 
     ( SELECT ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species,
             graph_descrip.dataset as dataset_name, 
             (apidb.tab_to_string( SET(CAST(COLLECT( psgene.profile_graph_id ORDER BY ga.source_id) AS apidb.varchartab)), ',')) AS graph_ids,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.dataset_presenter_id as dataset_id,
             apidb.tab_to_string(set(cast(collect(pub.pmid) as apidb.varchartab)), ',') AS pmids,
             decode(lower(dp.subtype), 'rnaseq', 'RNA-Seq', 'array', 'array', 'sage', 'SAGE', 'rtpcr', 'RT-PCR','') as assay_type,
             ga.paralog_number
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt, 
           apidbtuning.datasetPresenter dp,
           apidbtuning.datasetPublication pub,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
           (  select '' as dataset, '' as module,
                     '' as x_axis, '' y_axis,  '' as is_graph_custom,
                     1 as order_num
              from dual
      -- TEMPLATE_ANCHOR genePageGraphDescriptions
      -- TEMPLATE_ANCHOR microarrayGraphDescriptions
           ) graph_descrip
        where ga.source_id = psgene.source_id
          &&geneGroupJoin&&
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and dp.dataset_presenter_id = pub.dataset_presenter_id(+)
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and (dp.type = 'transcript_expression' or lower(dp.subtype) in ('array','rnaseq','rtpcr'))
        GROUP BY ga.source_id, ga.project_id, ga.organism, ga.genus_species, graph_descrip.dataset, 
           tn.name, dp.dataset_presenter_id, module,x_axis,y_axis, is_graph_custom,order_num, 
           dp.subtype,ga.paralog_number,dp.short_attribution
     ) g
     WHERE g.dataset = dpr.name
     ORDER BY g.order_num
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Protein Expression Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ProteinExpressionGraphs"
                 includeProjects="UniDB,AmoebaDB,FungiDB,GiardiaDB,HostDB,PiroplasmaDB,PlasmoDB,ToxoDB,TriTrypDB,TrichDB,VectorBase" >
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_229990</paramValue>
            </testParamValues>

            <column name="source_id" />
            <column name="project_id" />
            <column name="project_id_url" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="genus_species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>
            <![CDATA[

select g.*, decode('@PROJECT_ID@', 'UniDB', 'EuPathDB', g.project_id) as project_id_url, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
select ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species ,
             graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, dp.description, 'quantitative proteomics' as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt, 
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
           (  select '' as dataset, '' as module,
                     '' as x_axis, '' y_axis,  '' as is_graph_custom,
                     1 as order_num
              from dual
       -- TEMPLATE_ANCHOR proteomicsGraphDescriptions
      UNION
select 'tbruTREU927_quantitative_massSpec_Guther_glycosomal_proteome_RSRC' as dataset,
       'Guther::GlycosomeProteome' as module,
       'Confidence Group' as x_axis,
       'Log2(H/L)' as y_axis,
       'true' as is_graph_custom,
       901 as order_num
       from dual
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and nvl(display_category, dp.category) = 'Protein expression'
          and dp.subtype like 'quantitative%'
) g
             ]]>
            </sql>
        </sqlQuery>



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Phenotype Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="PhenotypeGraphs" includeProjects="TriTrypDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="project_id_url" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>
            <![CDATA[
select g.*, decode('@PROJECT_ID@', 'UniDB', 'EuPathDB', g.project_id) as project_id_url, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
select ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species ,
             graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, dp.description, 'RNA-Seq' as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt, 
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
           (        select 'tbruTREU927_RNAi_Horn_rnaSeq_RSRC' as dataset,
       'RNASeq' as module,
       'Rank of each gene by its ratio' as x_axis,
       'Ratio of TPM values for the sample indicated compared to the uninduced control.<br>
        This ratio is proportional to the fitness observed upon RNAi-induced knockdown.<br>
        All ratios are calculated from reads mapping uniquely to the CDS of each gene.<br><br>
        The particular samples and ratios are indicated in the gray bar above each graph:<br>
        - No_Tet: uninduced control<br>
	    - BFD3: bloodstream-form cells grown for 3 days<br>
	    - BFD6: bloodstream-form cells grown for 6 days<br>
	    - PF: insect/procyclic-form cells<br>
	    - DIF: cells induced throughout growth as bloodstream forms, differentiation and growth as procyclic forms.<br><br>
        Please note that values in the data table are the TPM values for each sample, while the plot shows the ratio of the TPM value for the indicated sample compared to the uninduced (NoTet) control.<br><br>' as y_axis,
       'false' as is_graph_custom,
       1 as order_num
       from dual
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and dsnt.name not like '%CDS%' -- TODO:  this is here for the horn dataset
          and ga.genus_species = sn.name
) g
             ]]>
            </sql>
        </sqlQuery>




       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- UserDataset Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

          <sqlQuery name="UserDatasetsTranscriptomicsGraphsDataTable" isCacheable="false" excludeProjects="EuPathDB">
            <paramRef ref="InternalParams.user_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <!--column name="profile_set_display_name"/-->
            <column name="sample_name"/>
            <column name="value"/>
            <column name="unit"/>
            <sql>
            <![CDATA[
select ga.source_id, ga.project_id, ps.user_dataset_id as dataset_id, pan.name as sample_name, naf.value, ps.unit
from apidbtuning.geneattributes ga
   , @VDI_CONTROL_SCHEMA@.availableUserDatasets da
   , @VDI_DATASETS_SCHEMA@.ud_profileset ps
   , @VDI_DATASETS_SCHEMA@.ud_protocolappnode pan
   , @VDI_DATASETS_SCHEMA@.ud_nafeatureexpression naf
where da.user_id = $$user_id$$
and da.user_dataset_id = ps.user_dataset_id
and ps.profile_set_id = pan.profile_set_id
and pan.protocol_app_node_id = naf.PROTOCOL_APP_NODE_ID
and naf.na_feature_id = ga.na_feature_id
             ]]>
            </sql>
          </sqlQuery>




       <sqlQuery name="UserDatasetsTranscriptomicsGraphs" excludeProjects="EuPathDB">
         <paramRef ref="InternalParams.user_id"/>
            <column name="source_id" />
            <column name="project_id" />
            <column name="project_id_url" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>
            <![CDATA[
SELECT DISTINCT g.*, DECODE('@PROJECT_ID@', 'UniDB', 'EuPathDB', g.project_id) AS project_id_url, 
       DECODE(LOWER(is_graph_custom), 'false', 1, 0) AS template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
FROM (SELECT DECODE(ps.unit,'TPM','Transcript levels in TPM (transcripts per million).',
             'FPKM','Transcript levels in FPKM (fragments per kilobase of exon model per million mapped reads).') AS y_axis,
	     ga.source_id, ga.project_id,
             ga.organism AS gene_organism, ga.genus_species, da.name AS dataset_name, ga.source_id AS graph_ids,
             CASE WHEN ga.source_id IS NULL THEN 0 ELSE 1 END AS has_graph_data, ga.organism AS graph_organism,
	     'TRUE' AS mainOpen, 'FALSE' AS dataOpen, 'FALSE' AS has_meta_data, '' AS meta_data_categories,
             graph_descrip.*, '' AS summary, '' AS short_attribution, da.name AS display_name, '' AS description,
	     'RNA-Seq' AS assay_type, da.user_dataset_id AS dataset_id
      FROM apidbtuning.geneattributes ga,
           @VDI_CONTROL_SCHEMA@.AvailableUserDatasets da,
           @VDI_DATASETS_SCHEMA@.UD_NAFEATUREEXPRESSION naf,
           @VDI_DATASETS_SCHEMA@.UD_PROTOCOLAPPNODE pan,
           @VDI_DATASETS_SCHEMA@.UD_PROFILESET ps,
           (SELECT 'UserDatasets::RNASeq' AS module,
                   'Stage/Sample' AS x_axis,
                   'true' AS is_graph_custom,
                   1 AS order_num
            FROM dual
           ) graph_descrip
        WHERE ps.user_dataset_id = da.user_dataset_id
          AND da.user_id = $$user_id$$
          AND ps.profile_set_id = pan.profile_set_id
          AND pan.protocol_app_node_id = naf.protocol_app_node_id
          AND naf.na_feature_id = ga.na_feature_id
) g 
             ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Host Response  Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="HostResponseGraphs" includeProjects="PlasmoDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="project_id_url" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="genus_species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>

<![CDATA[ 
select h.*, datapres.summary, datapres.description
from (
  select distinct g.*, decode('@PROJECT_ID@', 'UniDB', 'EuPathDB', g.project_id) as project_id_url, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
  from (
        select ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species ,
               graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
               case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
               tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
               'FALSE' has_meta_data, '' as meta_data_categories,
               graph_descrip.*, dp.short_attribution, dp.display_name, 'antibody microarray' as assay_type, dp.dataset_presenter_id as dataset_id
        from apidbtuning.geneattributes ga, 
             APIDBTUNING.datasetnametaxon dsnt, 
             apidbtuning.datasetPresenter dp,
             sres.taxonname tn, 
             apidbtuning.taxonspecies ts, 
             sres.taxonname sn,
             apidbtuning.geneGroupProfile psgene,
             (  select '' as dataset, '' as module,
                       '' as x_axis, '' y_axis,  '' as is_graph_custom,
                       1 as order_num
                from dual
        -- TEMPLATE_ANCHOR antibodyArrayGraphDescriptions
             ) graph_descrip
          where ga.source_id = psgene.source_id
            and psgene.dataset_name = dsnt.name
            and dsnt.dataset_presenter_id = dp.dataset_presenter_id
            and graph_descrip.dataset = dp.name
            and dsnt.taxon_id = tn.taxon_id
            and tn.name_class = 'scientific name'
            and dsnt.taxon_id = ts.taxon_id
            and ts.species_taxon_id = sn.taxon_id
            and sn.name_class = 'scientific name'
            and ga.genus_species = sn.name
            and lower(dp.subtype) = 'immune_response'
  ) g
) h,
apidbtuning.datasetpresenter datapres
where datapres.name = h.dataset_name
 ]]>
     
       </sql>

        </sqlQuery>


        <!-- TODO:  need a tuning table here for Orthology Lookup (can't currently because of dblink)-->
       <sqlQuery name="EdaPhenotypeGraphs" includeProjects="ToxoDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="project_id_url" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="plot_configs_json"/>
            <sql>

<![CDATA[ 
select g.*, decode('@PROJECT_ID@', 'UniDB', 'EuPathDB', g.project_id) as project_id_url, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
        select ga.source_id, ga.project_id, 
             ga.organism as gene_organism, ga.genus_species ,
             psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, 
             dp.description, 'Phenotype' as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt, 
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           (WITH dataset_genes as ( 
               SELECT 'tgonGT1_crisprPhenotype_CrisprFunctionalProfiling_RSRC' AS dataset_name , string_value AS source_id
               FROM eda.ATTRIBUTEvalue_SB044A3A170_GNPD@eda av
               WHERE av.attribute_stable_id = 'VAR_bdc8e679'
               UNION
               SELECT 'tgonGT1_crisprPhenotype_CrisprScreen_RSRC' AS dataset_name , string_value AS source_id
               FROM eda.ATTRIBUTEvalue_sd4745ea297_GNPD@eda av
               WHERE av.attribute_stable_id = 'VAR_bdc8e679'
           )
           select distinct other_gene.source_id, p.dataset_name,
               this_gene.source_id as profile_graph_id
          from apidbtuning.OrthologousTranscripts ot
             , dataset_genes p
             , apidbtuning.GeneAttributes this_gene
             , apidbtuning.GeneAttributes other_gene
          where p.source_id = ot.source_id
            and ot.source_id = this_gene.source_id
            and ot.ortho_gene_source_id = other_gene.source_id
            and this_gene.species = other_gene.species
            and ot.is_syntenic = 1
        union 
          select ga.source_id, p.dataset_name, p.source_id as profile_graph_id
          from dataset_genes p, apidbtuning.GeneAttributes ga 
          where p.source_id = ga.source_id
            ) psgene, 
           (  SELECT dataset_name,
                     JSON_ARRAYAGG(
                       JSON_OBJECT(
                         'plotName' VALUE plot_name,
                         'plotType' VALUE plot_type, 
                         'xAxisEntityId' VALUE x_axis_entity_id,
                         'yAxisEntityId' VALUE y_axis_entity_id,
                         'xAxisVariableId' VALUE x_axis_variable_id,
                         'yAxisVariableId' VALUE y_axis_variable_id,
                         'xMin' VALUE x_min,
                         'xMax' VALUE x_max,
                         'yMin' VALUE y_min,
                         'yMax' VALUE y_max
                        )
                       ) AS plot_configs_json
              FROM apidbtuning.edagenegraph
              GROUP BY dataset_name
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset_name = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and dp.type = 'phenotype'
) g
 ]]>
       </sql>

        </sqlQuery>



       <sqlQuery name="PhenotypeScoreGraphs" includeProjects="PlasmoDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="project_id_url" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="has_special_jbrowse"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>

<![CDATA[ 
select g.*, decode('@PROJECT_ID@', 'UniDB', 'EuPathDB', g.project_id) as project_id_url, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
        select ga.source_id, ga.project_id, 
             ga.organism as gene_organism, ga.genus_species ,
             graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, 
             dp.description, 'Phenotype' as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt, 
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
           (  select 'pfal3D7_phenotype_pB_mutagenesis_MIS_MFS_RSRC' as dataset, 'PhenotypeScore' as module,
                     'Genes ranked by score' as x_axis, 'MIS/MFS Scores' y_axis,  'false' as is_graph_custom,
                     'true' as has_special_jbrowse, 1 as order_num
              from dual
              union
            select 'pknoA1H1_phenotype_piggyBac_mutagenesis_MIS_MFS_RSRC' as dataset, 'PhenotypeScore' as module,
                     'Genes ranked by score' as x_axis, 'MIS/MFS Scores' y_axis,  'false' as is_graph_custom,
                     'true' as has_special_jbrowse, 1 as order_num
              from dual
              union
            select 'pberANKA_phenotype_Bushnell_functional_profiling_RSRC' as dataset, 'PhenotypeScore' as module,
                     'Genes ranked by score' as x_axis, 'Relative Growth Rate' y_axis,  'false' as is_graph_custom,
                     'false' as has_special_jbrowse, 1 as order_num
              from dual
              union
            select 'pknoH_phenotype_piggyBac_mutagenesis_HME_MIS_OIS_RSRC' as dataset, 'PhenotypeScore' as module,
                     'Genes ranked by score' as x_axis, 'Relative Growth Rate' y_axis,  'false' as is_graph_custom,
                     'false' as has_special_jbrowse, 1 as order_num
              from dual
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and dp.subtype = 'phenotype'
) g
 ]]>
       </sql>

        </sqlQuery> 




       <sqlQuery name="NcrassaPhenotypeImages" includeProjects="FungiDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="uri"/>
            <column name="morphology"/>
            <column name="physiology"/>
            <column name="Sexual_Development"/>
            <column name="media"/>
            <column name="timepoint"/>
            <column name="location"/>
            <column name="temperature"/>
            <sql>

<![CDATA[ 
select * from (
select ga.source_id, ga.project_id, pan.uri, r.property, r.value
from APIDB.NAFEATUREPHENOTYPE r, apidbtuning.geneattributes ga,
study.protocolappnode pan
where pan.PROTOCOL_APP_NODE_ID = r.PROTOCOL_APP_NODE_ID
and r.NA_FEATURE_ID = ga.NA_FEATURE_ID
)
pivot ( 
 listagg(value, '</br>') within group (order by value)
   for property in ( 'morphology' morphology, 'physiology' physiology, 'Sexual Development' Sexual_Development, 'temperature' temperature, 'location' location, 'timepoint' timepoint, 'media' media)
)
 ]]>
       </sql>

        </sqlQuery>


       <sqlQuery name="TF_KO_PhenotypeImages" includeProjects="FungiDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="uri"/>
            <column name="physiology"/>
            <column name="Media"/>
            <column name="Timepoint"/>
            <column name="Temperature"/>
            <column name="Orthologs"/>
            <sql>

<![CDATA[ 
select * from (
select ga.source_id, ga.project_id, pan.uri, r.property, r.value
from APIDB.NAFEATUREPHENOTYPE r, apidbtuning.geneattributes ga,
study.protocolappnode pan
where pan.PROTOCOL_APP_NODE_ID = r.PROTOCOL_APP_NODE_ID
and r.NA_FEATURE_ID = ga.NA_FEATURE_ID
and pan.URI is not null
)
pivot ( 
 listagg(value, '</br>') within group (order by value)
   for property in ( 'Temperature' Temperature, 'Timepoint' Timepoint, 'Media' Media, 'Orthologs' Orthologs)
 ) 
 ]]>
       </sql>

        </sqlQuery> 


       <sqlQuery name="NcrassaKOPhenotype" includeProjects="FungiDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="mating_type" />
            <column name="basal_hyphae_growth_rate"/>
            <column name="aerial_hyphae_height"/>
            <column name="conidia_number" />
            <column name="conidia_morphology" />
            <column name="protoperithecia_number" />
            <column name="protoperithecial_morphology" />
            <column name="perithecia_number" />
            <column name="perithecia_morphology" />
            <column name="ascospore_number" />
            <column name="ascospore_morphology" />
            <column name="pubmed" />
            <column name="pubmedid" />
            <sql>
<![CDATA[ 
select ga.source_id, ga.project_id, pm.pubmed as pubmedid,
case when pm.pubmed is null then '' else '<a href="https://www.ncbi.nlm.nih.gov/pubmed/?term=' || pm.pubmed || '">' || pm.pubmed || '</a>'end as pubmed, 
nvl(pm.mating_type, 'N/A') as mating_type, pm.basal_hyphae_growth_rate, pm.aerial_hyphae_height, 
pm.conidia_number, pm.conidia_morphology, pm.protoperithecia_number, pm.protoperithecial_morphology, 
pm.perithecia_number, pm.perithecia_morphology, pm.ascospore_number, pm.ascospore_morphology
from apidb.phenotypemutants pm, apidbtuning.geneattributes ga
where ga.na_feature_id = pm.na_feature_id
 ]]>
       </sql>

        </sqlQuery>



       <sqlQuery name="PHI-basePhenotype" includeProjects="FungiDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="phientry" />
            <column name="comutatedgenes" />
            <column name="comments" />
            <column name="disease" />
            <column name="diseasemanifestation" />
            <column name="essentialgene" />
            <column name="experimentaltechnique" />
            <column name="geneinducer" />
            <column name="hostspecies" />
            <column name="hoststrain" />
            <column name="invitrogrowth" />
            <column name="matingdefect" />
            <column name="multiplemutations" />
            <column name="mutantphenotype" />
            <column name="pathogenspecies" />
            <column name="pathogenstrain" />
            <column name="penetrationdefect" />
            <column name="pmid" />
            <column name="postpenetrationdefect" />
            <column name="prepenetrationdefect" />
            <column name="sexualspores" />
            <column name="sporegermination" />
            <column name="tissue" />
            <column name="vegetativespores" />
            <sql>
<![CDATA[
select * from ( 
 select ga.source_id, ga.project_id, pan.uri, r.property, r.value, r.protocol_app_node_id
 from apidb.nafeaturephenotype r, apidbtuning.geneattributes ga,
      study.protocolappnode pan, study.study s , study.studyLink sl
 where pan.protocol_app_node_id = r.protocol_app_node_id
   and s.study_id = sl.study_id
   and sl.protocol_app_node_id = pan.protocol_app_node_id
   and s.name LIKE '%PHI-base_curated_phenotype_NAFeaturePhenotypeGeneric_RSRC'
   and r.na_feature_id = ga.na_feature_id
   and property
       in ('PHI-base entry', 'Co-mutated gene(s)', 'Comments', 'Disease',
           'Disease manifestation', 'Essential gene', 'Experimental technique',
           'Gene inducer', 'Host species', 'Host strain', 'Invitro growth',
           'Mating defect', 'Multiple mutations', 'Mutant Phenotype',
           'Pathogen species', 'Pathogen strain', 'Penetration defect',
           'PMID', 'Postpenetration defect', 'Prepenetration defect',
           'Sexual spores', 'Spore germination', 'Tissue',
           'Vegetative spores' )
) pivot ( 
  listagg(value, '</br>') within group (order by value)
  for property IN (
   'PHI-base entry' phientry, 
   'Co-mutated gene(s)'	comutatedgenes,
   'Comments'	comments,
   'Disease'	disease,
   'Disease manifestation'	diseasemanifestation,
   'Essential gene'	essentialgene,
   'Experimental technique'	experimentaltechnique,
   'Gene inducer'	geneinducer,
   'Host species'	hostspecies,
   'Host strain'	hoststrain,
   'Invitro growth'	invitrogrowth,
   'Mating defect'	matingdefect,
   'Multiple mutations'	multiplemutations,
   'Mutant Phenotype'	mutantphenotype,
   'Pathogen species'	pathogenspecies,
   'Pathogen strain'	pathogenstrain,
   'Penetration defect'	penetrationdefect,
   'PMID'	pmid,
   'Postpenetration defect'	postpenetrationdefect,
   'Prepenetration defect'	prepenetrationdefect,
   'Sexual spores'	sexualspores,
   'Spore germination'	sporegermination,
   'Tissue'	tissue,
   'Vegetative spores'	vegetativespores
   )
)
 ]]>
       </sql>
        </sqlQuery>


       <sqlQuery name="CGD_phenotypes" includeProjects="FungiDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="featuretype" />
            <column name="genename" />
            <column name="cgdid" />
            <column name="reference" />
            <column name="experimenttype" />
            <column name="mutanttype" />
            <column name="allele" />
            <column name="strainbackground" />
            <column name="phenotype" />
            <column name="chemical" />
            <column name="condition" />
            <column name="details" />
            <column name="reporter" />
            <column name="anatomicalstructure" />
            <column name="virulencemodel" />
            <column name="species" />
            <sql>
<![CDATA[
select * from ( 
 select ga.source_id, ga.project_id, pan.uri, r.property, r.value, r.protocol_app_node_id
 from apidb.nafeaturephenotype r, apidbtuning.geneattributes ga,
      study.protocolappnode pan, study.study s , study.studyLink sl
 where pan.protocol_app_node_id = r.protocol_app_node_id
   and s.study_id = sl.study_id
   and sl.protocol_app_node_id = pan.protocol_app_node_id
   and s.name LIKE '%_CGD_pheno_NAFeaturePhenotypeGeneric_RSRC'
   and r.na_feature_id = ga.na_feature_id
   and property
       in ('Feature Type', 'Gene Name', 'CGDID', 'Reference', 'Experiment Type',
           'Mutant Type', 'Allele', 'Strain background', 'Phenotype','Chemical',
           'Condition', 'Details', 'Reporter', 'Anatomical Structure',
           'Virulence Model', 'Species' )
) pivot (
  listagg(value, '</br>') within group (order by value)
  for property IN (
   'Feature Type' featuretype,
   'Gene Name' genename,
   'CGDID' cgdid,
   'Reference' reference,
   'Experiment Type' experimenttype,
   'Mutant Type' mutanttype,
   'Allele' allele,
   'Strain background' strainbackground,
   'Phenotype' phenotype,
   'Chemical' chemical,
   'Condition' condition,
   'Details' details,
   'Reporter' reporter,
   'Anatomical Structure' anatomicalstructure,
   'Virulence Model' virulencemodel,
   'Species' species
   )
)
 ]]>
       </sql>
        </sqlQuery>


       <sqlQuery name="GrowthRatePhenotype" includeProjects="PlasmoDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="phenotype"/>
            <column name="relative_growth_rate"/>
            <column name="confidence"/>
            <column name="expected_variance"/>
            <column name="rgr_ci_low"/>
            <column name="rgr_ci_high"/>
            <column name="times_analyzed"/>
            <column name="construct"/>
            <column name="notes"/>
            <sql>
<![CDATA[ 
select ga.source_id, ga.project_id, 
r.phenotype,r.relative_growth_rate, r.confidence, r.expected_variance,r.rgr_ci_low, r.rgr_ci_high, r.times_analyzed, r.construct, r.notes
from APIDB.phenotypegrowthrate r, apidbtuning.geneattributes ga
where ga.na_feature_id = r.na_feature_id
 ]]>
       </sql>

        </sqlQuery>

       <sqlQuery name="ApolloID" excludeProjects="PlasmoDB,GiardiaDB,MicrosporidiaDB,CryptoDB,FungiDB,TriTrypDB,HostDB">
            <column name="project_id" />
            <column name="source_id" />
            <column name="na_sequence_id" />
            <column name="mapping_start"/>
            <column name="mapping_end"/>
            <column name="seqid"/>
            <column name="apolloid"/>
            <sql>
<![CDATA[ 
select distinct ga.project_id
, ga.source_id
, ga.na_sequence_id
, ga.start_min - 1000 mapping_start
, ga.end_max + 1000 mapping_end
, pw.seqid
, pw.apolloid
from
apidbtuning.ApolloUpdate pw
, apidbtuning.geneattributes ga
where pw.na_sequence_id = ga.na_sequence_id
and pw.type = 'gene'
AND ((ga.start_min <= pw.mapping_start AND pw.mapping_start <= ga.end_max) 
    OR (pw.mapping_end <= ga.start_min AND ga.start_min <= pw.mapping_end))
]]>
       </sql>

        </sqlQuery>

       <sqlQuery name="ApolloProducts" isCacheable="false" excludeProjects="HostDB,TrichDB" >
            <column name="source_id" />
            <column name="project_id" />
            <column name="apollo_transcript_id" />
            <column name="apollo_description" />
            <column name="apollo_owner" />
            <column name="apollo_dbxref" />
            <column name="apollo_symbol" />
            <column name="apollo_go_term" />
            <column name="creation_date" />
            <column name="apollo_owner_details" />
            <sql>
<![CDATA[
           select source_id
                , project_id
                , apollo_description
                , apollo_owner
                , apollo_dbxref
                , apollo_symbol
                , apollo_go_term
                , apollo_transcript_id
                , creation_date  
                , apollo_owner_details
                from apidbtuning.ApolloUpdateGene
 ]]>
       </sql>

        </sqlQuery>

       <sqlQuery name="pfal3D7_phenotype_pB_mutagenesis_MIS_MFS_RSRC" includeProjects="PlasmoDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="score"/>
            <column name="score_type"/>
            <sql>
<![CDATA[ 
select ga.source_id, ga.project_id, r.score, r.score_type
from apidb.phenotypescore r, apidbtuning.geneattributes ga
where ga.na_feature_id = r.na_feature_id
  and r.row_alg_invocation_id in 
  (select distinct s.row_alg_invocation_id
   from study.study s, sres.externaldatabase ed, sres.externaldatabaserelease edr
   where ed.external_database_id = edr.external_database_id
   and s.external_database_release_id=edr.external_database_release_id
   and ed.name='pfal3D7_phenotype_pB_mutagenesis_MIS_MFS_RSRC')
 ]]>
       </sql>
       </sqlQuery>

       <sqlQuery name="pknoH_phenotype_piggyBac_mutagenesis_HME_MIS_OIS_RSRC" includeProjects="PlasmoDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="score"/>
            <column name="score_type"/>
            <sql>
<![CDATA[ 
select ga.source_id, ga.project_id, r.score, r.score_type
from apidb.phenotypescore r, apidbtuning.geneattributes ga
where ga.na_feature_id = r.na_feature_id
  and r.row_alg_invocation_id in 
  (select distinct s.row_alg_invocation_id
   from study.study s, sres.externaldatabase ed, sres.externaldatabaserelease edr
   where ed.external_database_id = edr.external_database_id
   and s.external_database_release_id=edr.external_database_release_id
   and ed.name='pknoH_phenotype_piggyBac_mutagenesis_HME_MIS_OIS_RSRC')
 ]]>
        </sql>
        </sqlQuery>


       <sqlQuery name="pknoA1H1_phenotype_piggyBac_mutagenesis_MIS_MFS_RSRC" includeProjects="PlasmoDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="score"/>
            <column name="score_type"/>
            <sql>
<![CDATA[ 
select ga.source_id, ga.project_id, r.score_type
     , CASE WHEN r.score_type = 'mutability in CDS'
       THEN CASE when r.score = 0 then 'mutable' when r.score = 1 then 'nonmutable' else 'not_determined' end
       ELSE cast(round(r.score, 2) as  VARCHAR(10)) END as score
from apidb.phenotypescore r, apidbtuning.geneattributes ga
where ga.na_feature_id = r.na_feature_id
  and r.row_alg_invocation_id in 
  (select distinct s.row_alg_invocation_id
   from study.study s, sres.externaldatabase ed, sres.externaldatabaserelease edr
   where ed.external_database_id = edr.external_database_id
   and s.external_database_release_id=edr.external_database_release_id
   and ed.name='pknoA1H1_phenotype_piggyBac_mutagenesis_MIS_MFS_RSRC')
 ]]>
        </sql>
        </sqlQuery>


       <sqlQuery name="eQTLPhenotypeGraphs" includeProjects="PlasmoDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="project_id_url" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="genus_species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>

<![CDATA[ 
select g.*, decode('@PROJECT_ID@', 'UniDB', 'EuPathDB', g.project_id) as project_id_url, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
select ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species ,
             graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, dp.description, dp.subtype as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt,
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
            (  select '' as dataset, '' as module,
                     '' as x_axis, '' y_axis,  '' as is_graph_custom,
                     1 as order_num
              from dual
      -- TEMPLATE_ANCHOR phenotypeGraphDescriptions
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and dp.type = 'transcript_expression'
          and lower(dp.subtype) = 'array'
) g
 ]]>
     
       </sql>

        </sqlQuery>



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Phenotype -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

 <sqlQuery name="PhenotypeTable" isCacheable="false" includeProjects="TriTrypDB,EuPathDB,FungiDB,UniDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pubmed_id"/>
            <column name="modification_type"/>
            <column name="allele"/>
            <column name="phenotype"/>
            <column name="phenotype_comment"/>
            <column name="chebi_annotation_extension"/>
            <sql>
    select distinct ga.source_id
              , ga.project_id
              , pm.PUBMED_ID
              , pm.MODIFICATION_TYPE
              , pm.ALLELE
              , case when oen.name is null then CAST (pr.phenotype_post_composition AS VARCHAR2(4000)) 
              else opq.name ||' '||CASE WHEN opq.name = 'lethal' THEN '' ELSE oen.name||' ' END||pr.Timing||' '||ols.name end as phenotype
, case when pr.PHENOTYPE_COMMENT is null then CAST (pr.phenotype_post_composition AS VARCHAR2(4000)) else pr.phenotype_comment end as phenotype_comment
	      , case when pr.CHEBI_ANNOTATION_EXTENSION not like 'CHEBI%' then null else pr.chebi_annotation_extension end as chebi_annotation_extension
              from
              apidbtuning.geneattributes ga
              , APIDB.PHENOTYPEMODEL pm
              , apidb.phenotyperesult pr
              , sres.ontologyterm oen
              , sres.ontologyterm opq
              , sres.ontologyterm ols
              , APIDB.NAFEATUREPHENOTYPEMODEL na
              , sres.externalDatabase ed
              , sres.externalDatabaseRelease edr
	      where ga.na_feature_id = na.na_feature_id
              and pm.external_database_release_id = edr.external_database_release_id
              and edr.external_database_id = ed.external_database_id
              and ed.name like '%_phenotype_VEuPathDB_curated_phenotype_RSRC'
              and pm.phenotype_model_id = na.phenotype_model_id
              and pm.phenotype_model_id = pr.phenotype_model_id
              and pr.PHENOTYPE_ENTITY_TERM_ID = oen.ontology_term_id (+)
              and pr.phenotype_quality_term_id = opq.ontology_term_id (+)
              and pr.LIFE_CYCLE_STAGE_TERM_ID = ols.ONTOLOGY_TERM_ID (+)
UNION
    select distinct ga.source_id
              , ga.project_id
              , pm.PUBMED_ID
              , pm.MODIFICATION_TYPE
              , pm.ALLELE
              , case when oen.name is null then CAST (pr.phenotype_post_composition AS VARCHAR2(4000)) 
              else opq.name ||' '||CASE WHEN opq.name = 'lethal' THEN '' ELSE oen.name||' ' END||pr.Timing||' '||ols.name end as phenotype
, case when pr.PHENOTYPE_COMMENT is null then CAST (pr.phenotype_post_composition AS VARCHAR2(4000)) else pr.phenotype_comment end as phenotype_comment
	      , case when pr.CHEBI_ANNOTATION_EXTENSION not like 'CHEBI%' then null else pr.chebi_annotation_extension end as chebi_annotation_extension
              --, pr.PROTEIN_ANNOTATION_EXTENSION
              from
              apidbtuning.geneattributes ga
              , APIDB.PHENOTYPEMODEL pm
              , apidb.phenotyperesult pr
              , sres.ontologyterm oen
              , sres.ontologyterm opq
              , sres.ontologyterm ols
	      where ga.na_feature_id = pm.na_feature_id
              and pm.phenotype_model_id = pr.phenotype_model_id
              and pr.PHENOTYPE_ENTITY_TERM_ID = oen.ontology_term_id (+)
              and pr.phenotype_quality_term_id = opq.ontology_term_id (+)
              and pr.LIFE_CYCLE_STAGE_TERM_ID = ols.ONTOLOGY_TERM_ID (+)
        </sql>
 </sqlQuery>

 <sqlQuery name="PhenotypeMagnaportheTable" isCacheable="false" includeProjects="FungiDB,EuPathDB,UniDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pubmed_id"/>
            <column name="phenotype"/>
            <column name="phenotype_comment"/>
            <sql>
              select distinct ga.source_id
              , ga.project_id
              , pm.pubmed_id
              , CASE when oql.name  like 'information on putatively essential gene' -- EUPATH_0043245
                      THEN 'putatively essential' || ' ' || oen.name  
                    ELSE oql.name || ' ' || oen.name end AS phenotype
              , pr.phenotype_comment 
              from
              apidbtuning.geneattributes ga
              , apidb.phenotypeModel pm
              , apidb.phenotypeResult pr
              , sres.ontologyterm oql
              , sres.ontologyterm oen
              , apidb.naFeaturePhenotypeModel na
              , sres.externalDatabase ed
              , sres.externalDatabaseRelease edr
	      where ga.na_feature_id = na.na_feature_id
              and pm.external_database_release_id = edr.external_database_release_id
              and edr.external_database_id = ed.external_database_id
              and ed.name = 'mory70-15_phenotype_Magnaporthe_Pheno_RSRC'
              and pm.phenotype_model_id = na.phenotype_model_id
              and pm.phenotype_model_id = pr.phenotype_model_id
              and pr.phenotype_quality_term_id = oql.ontology_term_id (+)
              and pr.phenotype_entity_TERM_ID = oen.ontology_term_id (+)
            </sql>
        </sqlQuery>


       <sqlQuery name="Cellxgene" isCacheable="false" includeProjects="PlasmoDB,TriTrypDB,PiroplasmaDB,ToxoDB,CryptoDB,HostDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="source_ids"/>
            <column name="assay_type"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="display_name"/>
            <column name="dataset_name"/>
            <sql>
            <![CDATA[
                     select ga.source_id
                          , ga.project_id
                          , listagg(cg.source_id, ';') within group (order by cg.source_id) as source_ids
                          , d.name as dataset_name
                          , dsp.display_name
                          , 'scRNA-Seq' as assay_type
                          , to_char(dsp.summary) as summary
                          , dsp.SHORT_ATTRIBUTION
                     from apidbtuning.geneattributes ga
                        , apidb.cellxgene cg
                        , sres.externaldatabaserelease r
                        , sres.externaldatabase d
                        , apidbtuning.datasetpresenter dsp
                     where ga.na_feature_id = cg.na_feature_id
                     and r.EXTERNAL_DATABASE_RELEASE_ID = cg.EXTERNAL_DATABASE_RELEASE_ID
                     and r.external_database_id = d.external_database_id
                     and d.name = dsp.name
                     group by ga.source_id, ga.project_id, d.name, dsp.display_name, to_char(dsp.summary), dsp.short_attribution
            ]]>
            </sql>
        </sqlQuery>


       <sqlQuery name="RodMalPhenotypeTable" isCacheable="false" includeProjects="PlasmoDB,UniDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="rmgmid"/>
            <column name="suc_of_gen_mod"/>
            <column name="pubmed_id"/>
            <column name="mod_type"/>
            <column name="life_cycle_stage"/>
            <column name="phenotype"/>
	    <column name="mutation_description"/>
	    <column name="other_source_id"/>
            <sql>
            <![CDATA[
with mut as(
  SELECT distinct ga.source_id
  , ga.project_id
  , pm.source_id as rmgmid
  , pm.pubmed_id
  , pm.modification_type as mod_type
  , pm.is_successful as suc_of_gen_mod
  , pm.mutation_description
  , ot.name
  , DBMS_LOB.SUBSTR(pr.phenotype_post_composition, 4000, 1) as phenotype1
  , DBMS_LOB.SUBSTR(pr.phenotype_post_composition, 4000, 4001) as phenotype2
  , pm.HAS_MULTIPLE_MUTATIONS as multiple
  , na.NA_FEATURE_ID as id
  , pm.phenotype_model_id
  FROM APIDB.PHENOTYPERESULT pr LEFt OUTER JOIN SRES.ONTOLOGYTERM ot on pr.LIFE_CYCLE_STAGE_TERM_ID = ot.ONTOLOGY_TERM_ID
  , apidb.phenotypemodel pm
  , apidbtuning.geneattributes ga
  ,APIDB.NAFEATUREPHENOTYPEMODEL na
  WHERE pm.PHENOTYPE_MODEL_ID = pr.PHENOTYPE_MODEL_ID
  and na.phenotype_model_id = pm.phenotype_model_id
  AND na.NA_FEATURE_ID = ga.NA_FEATURE_ID
 -- and ga.source_id = 'PF3D7_1030900'
  )

  , knockdown as(
  select distinct genes.source_id
  ,mods.phenotype_model_id as model_id
  from
  apidb.phenotypemodel mods
  ,apidb.nafeaturephenotypemodel nod
  ,apidbtuning.geneattributes genes
  ,mut m
  where mods.phenotype_model_id = m.phenotype_model_id
  and m.phenotype_model_id = nod.phenotype_model_id
  and mods.phenotype_model_id = nod.phenotype_model_id
  and m.id != nod.na_feature_id
  and genes.na_feature_id = nod.na_feature_id
  and m.source_id != genes.source_id
  --and mods.has_multiple_mutations = 1
  )
, results as (SELECT m.source_id
, m.project_id
, m.rmgmid
, m.pubmed_id
, m.mod_type
,CASE
when m.suc_of_gen_mod = 0 then 'NO' else 'YES' end as suc_of_gen_mod
, m.mutation_description
, listagg(m.name, ', ') within group (order by m.name) as life_cycle_stage
, concat(to_clob(phenotype1), to_clob(phenotype2)) as phenotype
, m.phenotype_model_id
FROM mut m
group by m.source_id
, m.project_id
, m.rmgmid
, m.pubmed_id
, m.mod_type
, m.suc_of_gen_mod
, m.mutation_description
, m.phenotype1
, m.phenotype2
,m.phenotype_model_id
order by rmgmid
)
SELECT results.*
,knockdown.source_id as other_source_id
FROM results
LEFT JOIN knockdown ON results.phenotype_model_id = knockdown.model_id
where knockdown.source_id <> results.source_id or knockdown.source_id is null
and project_id = 'PlasmoDB'
             ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Seqedits -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="Seqedits" isCacheable="false">
            <column name="source_id"/>
            <column name="transcript_source_id"/>
            <column name="project_id"/>
            <column name="length_diff"/>
            <column name="type"/>
            <column name="location"/>
            <column name="diff"/>
            <sql>
            <![CDATA[
SELECT ta.gene_source_id AS source_id, ta.source_id AS transcript_source_id, ta.project_id
   --, se.trans_start, se.trans_end, se.start_min, se.end_max,
   , se.length_diff,  ot.name as type
   , ta.sequence_id || ':' || (se.start_min -50) || '..' || (se.end_max+50) as location
   , CASE WHEN (length(se.sequence)=1) 
          THEN  dbms_lob.substr(se.orig_sequence)||' -> '||dbms_lob.substr(se.sequence) 
          ELSE dbms_lob.substr(se.orig_sequence,10) ||'...'|| ' -> ' || dbms_lob.substr(se.sequence,10)||'...'   END as diff
--   , sequence, orig_sequenece
FROM APIDBTUNING.transcriptattributes ta, APIDB.seqedit se, SRES.ontologyterm ot
WHERE ta.has_seqedit = 1
AND ta.protein_source_id = se.source_id
AND ot.ontology_term_id = se.sequence_ontology_id
ORDER BY se.trans_start
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- HTS SNPs Alignment -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="HtsSNPsAlignment" includeProjects="PiroplasmaDB,AmoebaDB,PlasmoDB,ToxoDB,CryptoDB,TriTrypDB,FungiDB,UniDB"
               isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="strain"/>
            <sql>
            <![CDATA[
SELECT distinct ga.source_id, ga.project_id, scs.strain
FROM   apidbtuning.snpChipStrains scs, 
       apidbtuning.geneattributes ga
WHERE  scs.organism = ga.organism
ORDER BY scs.strain
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Mercator Alignment                                           -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="MercatorAlignment" isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="abbrev"/>
            <column name="organism"/>
            <column name="parent"/>
            <sql>
            <![CDATA[
select ga.source_id, ga.project_id, t.*, nvl(o.abbrev, t.organism) as abbrev
from (
         SELECT term as organism, nvl(parentTerm, 'root') as parent
         FROM ApidbTuning.OrganismTree ot, apidbtuning.organismattributes oa
         WHERE ot.organism = oa.organism_name
         AND oa.is_annotated_genome = 1
         GROUP BY term, parentTerm
         ) t, apidbtuning.organismattributes oa, apidb.organism o, 
         apidbtuning.geneattributes ga -- want all genes
where t.organism = oa.organism_name (+)
and oa.PUBLIC_ABBREV = o.PUBLIC_ABBREV (+)
and t.organism != t.parent
order by t.organism
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Interpro -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="InterPro" isCacheable="false">
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="interpro_name"/>
            <column name="interpro_family_id"/>
            <column name="interpro_primary_id"/>
            <column name="interpro_secondary_id"/>
            <column name="interpro_desc"/>
            <column name="interpro_start_min"/>
            <column name="interpro_end_min"/>
            <column name="interpro_e_value"/>
            <sql>
            <![CDATA[
select
  listagg(ir.transcript_source_id, ', ') within group (order by ir.transcript_source_id) as transcript_ids
, ir.gene_source_id as source_id
, ir.project_id
, ir.interpro_db_name AS interpro_name
, ir.interpro_primary_id
, ir.interpro_secondary_id
, ir.interpro_desc
, ir.interpro_start_min
, ir.interpro_end_min
, ir.interpro_e_value
, ir.interpro_family_id
FROM
  ApidbTuning.interproresults ir
group by ir.project_id, ir.gene_source_id, ir.interpro_db_name, ir.interpro_primary_id, ir.interpro_secondary_id, ir.interpro_desc, ir.interpro_start_min, ir.interpro_end_min, ir.interpro_e_value, ir.gene_source_id, ir.interpro_family_id
order by
transcript_ids
, interpro_name
, interpro_start_min
            ]]>
            </sql>
        </sqlQuery>



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Transmembrane Domains -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="TMHMM" isCacheable="false">

            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd7_50</paramValue>
            </testParamValues>
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGGT1_301360</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_120600</paramValue>
            </testParamValues>
            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EIN_088300</paramValue>
            </testParamValues>
            <testParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">ECU07_1760</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="tmf_topology"/>
            <column name="transcript_id"/>
            <column name="tmf_start_min"/>
            <column name="tmf_end_max"/>
            <column name="tmf_sequence"/>
            <sql>
           <![CDATA[
                    SELECT tm.gene_source_id as source_id
                         , tm.project_id
                         , tm.tmf_topology
                         , tm.transcript_source_id as transcript_id
                         , tm.tmf_start_min
                         , tm.tmf_end_max
                         , tm.tmf_sequence
                         FROM ApiDBTuning.TransmembraneDomains tm
           ]]>           
          </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Alias  -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Alias" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="alias"/>
            <column name="db_name"/>
            <column name="project_id"/>
            <column name="id_type"/>
            <sql>
            <![CDATA[
SELECT DISTINCT
  REPLACE(gi.id, ';current=false', '') AS ALIAS
, CASE 
    WHEN gi.database_name LIKE '%from_annotation%'
    THEN 'annotation'
    WHEN gi.database_name LIKE '%MR4Reagents%'
    THEN 'MR4 Reagents'
    WHEN gi.database_name LIKE '%RSRC%'
    THEN ''
    ELSE regexp_replace (gi.database_name,'.*_RSRC')
    END AS db_name
, CASE
    WHEN gi.database_name LIKE '%synonym%'
    THEN 'synonym'
    WHEN gi.database_name LIKE '%primary_genome%'
    THEN 'name'
    WHEN gi.database_name LIKE '%PreviousGeneIDs%'
    THEN 'previous ID'
    WHEN gi.database_name LIKE '%aliases%'
    THEN 'alias'
    ELSE 'alternate ID'
  END AS id_type
, gi.gene AS source_id
, ga.project_id
FROM
  apidbTuning.GeneId gi, apidbtuning.geneattributes ga
WHERE
  gi.gene = ga.source_id AND
  REGEXP_LIKE(gi.id, '(\D)')
  AND gi.database_name NOT LIKE '%gene2Uniprot_RSRC'
  AND gi.union_member != 'same ID'
  AND gi.union_member != 'base ID'
ORDER BY
  id_type asc
, alias asc
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Signal Peptides -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


       <sqlQuery name="SignalP" isCacheable="false">
            <column name="source_id"/>
            <column name="transcript_id"/>
            <column name="project_id"/>
            <column name="spf_start_min"/>
            <column name="spf_end_max"/>
            <sql>
            <![CDATA[
            SELECT DISTINCT
              signalP.transcript_source_id AS transcript_id
            , signalP.gene_source_id AS source_id
            , t.project_id
            , 1 AS spf_start_min
            , signalP.end_max AS spf_end_max
            FROM
              apidbtuning.SignalPeptideDomains signalP,
              apidbtuning.transcriptAttributes t
            WHERE
                t.source_id = signalp.transcript_source_id
               ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- BlastP Hits -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="BlastP" isCacheable="false">
            <column name="transcript_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="blastp_feature_id"/>
            <column name="blastp_name"/>
            <column name="blastp_parent_id"/>
            <column name="blastp_score"/>
            <column name="blastp_start"/>
            <column name="blastp_end"/>
            <column name="blastp_description"/>
            <column name="blastp_expect_value"/>
            <column name="blastp_percent_identity"/>
            <column name="blastp_percent_positive"/>

            <sql>
            <![CDATA[
             select source_id as transcript_id, gene_source_id as source_id, project_id, 
             similarity_id AS blastp_feature_id,
             source_id AS blastp_name, query_id AS blastp_parent_id,
             score AS blastp_score,
             min_query_start AS blastp_start, max_query_end AS blastp_end,
             'E() = ' || pvalue_mant || 'e' || pvalue_exp || ', ' || round(100 * number_identical / total_match_length) || '% identity, ' || description AS blastp_description,
             case when pvalue_mant = 0 then '0' else pvalue_mant || 'e' || pvalue_exp end AS blastp_expect_value,
             round(100 * number_identical / total_match_length) AS blastp_percent_identity,
             round(100 * number_positive / total_match_length) AS blastp_percent_positive
             from ApidbTuning.Blastp
             order by pvalue_exp, pvalue_mant
             ]]>
            </sql>
        </sqlQuery>



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Low Complexity Regions -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


       <sqlQuery name="LowComplexity" isCacheable="false">

            <testParamValues minRows="0" includeProjects="CryptoDB"/>
            <testParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_563160</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">LmjF.02.0480</paramValue>
            </testParamValues>
            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EIN_088300</paramValue>
            </testParamValues>
            <testParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">ECU07_1760</paramValue>
            </testParamValues>
            <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">TA10310</paramValue>
            </testParamValues>

            <column name="transcript_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="lc_name"/>
            <column name="lc_parent_id"/>
            <column name="lc_start_min"/>
            <column name="lc_end_max"/>

            <sql>
            <![CDATA[
             select t.source_id as transcript_id, gf.source_id as source_id, gf.project_id,
             lc.aa_feature_id AS lc_name,
             lc.aa_sequence_id AS lc_parent_id,
             aal.start_min AS lc_start_min, aal.end_max AS lc_end_max
             --substr(aas.sequence, aal.start_min, (aal.end_max-aal.start_min+1)) AS lc_sequence
             --dbms_lob.substr(aas.sequence, (aal.end_max-aal.start_min+1), aal.start_min) AS lc_sequence
             from
             dots.aalocation aal,
             apidbtuning.geneattributes gf,
             dots.transcript t,
             dots.translatedaafeature taf,
             dots.lowcomplexityaafeature lc, 
             dots.aaSequence aas
             where gf.na_feature_id = t.parent_id
             and t.na_feature_id = taf.na_feature_id
             and taf.aa_sequence_id = lc.aa_sequence_id
             and lc.aa_feature_id = aal.aa_feature_id
             and lc.aa_sequence_id = aas.aa_sequence_id
             ORDER BY lc_start_min            
             ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Notes -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO:  this data is missing in plas-rbld currently -->
       <sqlQuery name="Notes"
               isCacheable="false" clobRow="true">

            <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_0222600</paramValue>
            </testParamValues>
            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">CMU_000680</paramValue>
            </testParamValues>
            <testParamValues minRows="0" includeProjects="TrichDB"/>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_8010</paramValue>
            </testParamValues>
            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">ECU07_1485</paramValue>
            </testParamValues>
	    <testParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">ECU02_0880</paramValue>
               <paramValue name="project_id">MicrosporidiaDB</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="comment_string"/>
            <column name="comment_date"/>
            <sql>
              <![CDATA[
                select dbms_lob.substr(nfc.comment_string,4000,1) as comment_string, nf.gene_source_id as source_id, nf.project_id, 
                       listagg(nf.source_id, ', ') within GROUP(ORDER BY  nf.source_id) AS transcript_ids,
                       to_char(nfc.comment_date, 'yyyy-mm-dd') as comment_date
                from dots.NaFeatureComment nfc, ApidbTuning.TranscriptAttributes nf
                where (nf.na_feature_id = nfc.na_feature_id
                  OR nf.gene_na_feature_id = nfc.na_feature_id)
                group by nf.gene_source_id, nf.project_id, dbms_lob.substr(nfc.comment_string,4000,1),nfc.comment_date
                order by nfc.comment_date
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Gene images, such as DBP images -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="CellularLocalization"
                    isCacheable="false" includeProjects="GiardiaDB,TriTrypDB,UniDB">
                  <testParamValues >
                      <paramValue name="source_id">GL50803_15576</paramValue>
                   </testParamValues>
       
                  <column name="source_id"/>
                  <column name="display_id"/>
                  <column name="project_id"/>
                  <column name="image_uri"/>
                  <column name="note"/>
                  <column name="image_type"/>
                   <sql>
                   <![CDATA[
       SELECT DISTINCT image_uri, replace(note, 'GO term: ', '') AS note, 
         image_type, display_order,
         source_id, display_id, project_id
       FROM (
         SELECT DISTINCT img.image_uri, img.note, img.image_type, 
                  ga.source_id, ga.source_id as display_id, img.display_order, ga.project_id
         FROM apidb.nafeatureimage img, apidbtuning.geneattributes ga
         WHERE IMG.na_feature_id = ga.na_feature_id         
         UNION
         SELECT DISTINCT img.image_uri, img.note, img.image_type, 
                 ta.gene_source_id as source_id,
                 ta.source_id as display_id, img.display_order, ta.project_id
         FROM apidb.NAFeatureImage img, apidbtuning.TranscriptAttributes ta
         WHERE img.na_feature_id = ta.na_feature_id
       ) ORDER BY display_id, display_order
       ]]>
                   </sql>
               </sqlQuery> 


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- ToxoDB LOPIT tables -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="LOPITMAP"
                    isCacheable="false" includeProjects="ToxoDB,UniDB">
                  <column name="source_id"/>
                  <column name="project_id"/>
                  <column name="location"/>
                  <column name="probability_MAP"/>
                   <sql>
                   <![CDATA[
SELECT ga.source_id, ga.project_id, replace(pan.name,' (lopit)','') as location , lr.probability_mean as probability_MAP 
FROM study.study s , study.studyLink sl, study.ProtocolAppNode pan, apidb.LopitResults lr, apidbtuning.geneattributes ga        
WHERE s.name in ('TAGM-MAP-Final-Probability')
AND s.study_id = sl.study_id
AND sl.protocol_app_node_id = pan.protocol_app_node_id
AND pan.protocol_app_node_id = lr.protocol_app_node_id
AND ga.na_feature_id = lr.na_feature_id 
       ]]>
                   </sql>
               </sqlQuery> 

 
       <sqlQuery name="LOPITMCMC" isCacheable="false" includeProjects="ToxoDB, UniDB">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="sort_prob"/>
         <column name="location"/>
         <column name="probability_MCMC"/>
         <sql>
	   <![CDATA[
select ga.source_id, ga.project_id,  replace(pan.name,' (lopit)','') as location, lr.probability_mean as probability_MCMC, 2 as sort_prob
from study.study s , study.studyLink sl, study.ProtocolAppNode pan, apidb.LopitResults lr, apidbtuning.geneattributes ga
where s.name in ('TAGM-MCMC-Joint-Probability')
and s.study_id = sl.study_id
and sl.protocol_app_node_id = pan.protocol_app_node_id
and pan.protocol_app_node_id = lr.protocol_app_node_id
and ga.na_feature_id = lr.na_feature_id
and pan.name  = 'outlier (lopit)'
UNION
select ga.source_id, ga.project_id, replace(pan.name,' (lopit)','') as location, lr.probability_mean as probability_MCMC,  lr.probability_mean as sort_prob
from study.study s , study.studyLink sl, study.ProtocolAppNode pan, apidb.LopitResults lr, apidbtuning.geneattributes ga
where s.name in ('TAGM-MCMC-Joint-Probability')
and s.study_id = sl.study_id
and sl.protocol_app_node_id = pan.protocol_app_node_id
and pan.protocol_app_node_id = lr.protocol_app_node_id
and ga.na_feature_id = lr.na_feature_id
and lr.probability_mean >=0.05
and pan.name  != 'outlier (lopit)'
order by sort_prob  DESC
       ]]>
                   </sql>
               </sqlQuery> 


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- TriTrypDB LOPIT table -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

      <sqlQuery name="LOPITtryp" includeProjects="TriTrypDB,UniDB">
         <column name="name"/>
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="location"/>
         <column name="probability_map"/>
         <sql>
         <![CDATA[
SELECT ga.source_id, ga.project_id, s.name,
  REPLACE(pan.name,' (lopit)','') AS location,
  CASE  WHEN (ROUND (lr.probability_mean,3) = 1 ) THEN '1'
       ELSE TO_CHAR(lr.probability_mean,'9.999EEEE') END AS probability_map
FROM study.study i,study.study s,
  study.studyLink sl, study.ProtocolAppNode pan,
  apidb.LopitResults lr, apidbtuning.geneattributes ga
WHERE i.name like 'lopit Study hyperLopit%'
AND s.investigation_id = i.study_id
AND s.study_id = sl.study_id
AND sl.protocol_app_node_id = pan.protocol_app_node_id
AND pan.protocol_app_node_id = lr.protocol_app_node_id
AND ga.na_feature_id = lr.na_feature_id
ORDER BY lr.probability_mean desc
         ]]>
         </sql>
      </sqlQuery> 



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Pathways -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="MetabolicPathways" includeProjects="ToxoDB,PlasmoDB,UniDB"
                   isCacheable="false">
             <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_278740</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_id"/>
            <column name="pathway_name"/>
            <column name="activity"/>

            <sql>
            <![CDATA[
SELECT DISTINCT
  dr.primary_identifier AS pathway_id
, TRIM(REPLACE(DECODE(dr.lowercase_secondary_identifier, NULL, dr.primary_identifier, dr.lowercase_secondary_identifier), CHR(191), '')) AS
  pathway_name
, dr.remark AS activity
, gf.source_id
, gf.project_id
FROM
  apidbtuning.geneattributes gf
, dots.DbRefNaFeature drnf
, sres.DbRef dr
, sres.ExternalDatabaseRelease edr
, sres.ExternalDatabase ed
WHERE
  gf.na_feature_id = drnf.na_feature_id
  AND drnf.db_ref_id = dr.db_ref_id
  AND dr.external_database_release_id = edr.external_database_release_id
  AND edr.external_database_id = ed.external_database_id
  AND ed.name IN('pfal3D7_dbxref_simple_gene2HagaiPathway_RSRC', 'tgonME49_dbxref_protein2Pathways_Feng_RSRC')
ORDER BY
  dr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>

        
        <sqlQuery name="MetabolicPathwaysSres" excludeProjects="EuPathDB"
                   isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_source_id"/>
            <column name="pathway_name"/>
            <column name="reactions"/>
            <column name="enzyme"/>
            <column name="expasy_url"/>
            <column name="pathway_source"/> 
            <column name="exact_match"/>

            <sql>
              <![CDATA[
                SELECT pg.gene_source_id AS source_id
                , pg.project_id
                , pg.pathway_source_id
                , pg.pathway_name
                , pg.reactions
                , pg.enzyme
                , pg.expasy_url
                , pg.pathway_source
                , pg.exact_match
                FROM apidbtuning.pathwaysgenetable pg
                order by pathway_source, lower(pathway_name)
              ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Orthologs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Orthologs"
                  isCacheable="false">

            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_253730</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name ="ortho_gene_source_id"/>
            <column name ="ortho_source_id"/>
            <column name="organism"/>
            <column name="gene_product"/>
            <column name="protein_length"/>
            <column name="is_syntenic"/>
            <column name="is_reference_strain"/>
            <column name="has_comment"/>
            <column name="sort_key"/>

            <sql>
            <![CDATA[
              WITH comments
                   AS (SELECT DISTINCT stable_id
                       FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@
                       WHERE comment_target_id = 'gene'
                         AND review_status_id != 'rejected'
                         AND is_visible = 1)
              SELECT og.source_id
                     , og.project_id
                     , og.ortho_gene_source_id
                     , og.ortho_source_id
                     , og.ortho_product AS gene_product
                     , og.protein_length
                     , og.ortho_organism AS organism
                     , CASE
                            WHEN og.is_syntenic = 1
                              THEN 'yes'
                            ELSE 'no'
                          END AS is_syntenic
                     , CASE 
                         WHEN og.is_reference_strain = 1
                           THEN 'yes'
                         ELSE 'no'
                        END as is_reference_strain
                     , CASE
                         WHEN comments.stable_id IS NULL
                           THEN 'no'
                         ELSE 'yes'
                       END AS has_comment
                     , rpad(lower(og.source_id), 80)
                       || CASE
                            WHEN og.is_syntenic = 1
                              THEN '8yes' -- sort earlier
                            ELSE '9no '   -- sort later
                          END
                       || CASE
                            WHEN comments.stable_id IS NULL
                              THEN '9no ' -- sort later
                            ELSE '8yes'   -- sort earlier
                          END
                       || rpad(lower(og.ortho_gene_source_id), 80) as sort_key
              FROM apidbTuning.OrthologousTranscripts og
                   LEFT OUTER JOIN comments ON og.ortho_source_id = comments.stable_id
              WHERE og.source_id != og.ortho_gene_source_id
            ]]>
            </sql>
       </sqlQuery>

       <sqlQuery name="OrthologsLite"
                  isCacheable="false">

            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_253730</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="ortho_gene_source_id"/>
            <column name="organism"/>
            <column name="gene_product"/>
            <column name="is_syntenic"/>

            <sql>
            <![CDATA[
              SELECT DISTINCT
                     ot.source_id
                     , ot.project_id
                     , ot.ortho_gene_source_id
                     , ot.ortho_product AS gene_product
                     , ot.ortho_organism AS organism
                     , CASE ot.is_syntenic
                         WHEN 0 THEN 'no'
                         ELSE 'yes'
                       END AS is_syntenic
              FROM apidbTuning.OrthologousTranscripts ot
              WHERE ot.source_id != ot.ortho_gene_source_id
            ]]>
            </sql>
       </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Epitopes -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!-- TODO:  check this one.  Tuning table should be transcript level -->
       <sqlQuery name="Epitopes"
                  isCacheable="false">

            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd6_1800</paramValue>
            </testParamValues>
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGVEG_270250</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_6081</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">LmjF.10.0460</paramValue>
            </testParamValues>
            <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">BBOV_IV008150</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="transcript_id"/>
            <column name="project_id"/>
            <column name="iedb_id"/>
            <column name="location"/>
            <column name="sequence"/>
            <column name="name"/>
            <column name="confidence"/>
            <sql>
            <![CDATA[
SELECT
  es.iedb_id
, es.location
, TO_CHAR(es.sequence) AS sequence
, es.name
, es.confidence
, ta.source_id as transcript_id
, ta.gene_source_id as source_id
, ta.project_id
FROM
  ApidbTuning.EpitopeSummary es
, ApidbTuning.transcriptAttributes ta
WHERE
  es.source_id = ta.source_id
ORDER BY
  DECODE(es.confidence, 'Low', 1, 'Medium', 2, 'High', 3, 4) DESC
, es.location
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Splice Sites  -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="SpliceSites" isCacheable="false"  includeProjects="TriTrypDB,UniDB">
            <column name="transript_source_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sample_name"/>
            <column name="utr_len"/>
            <column name="alt_cds_start"/>
            <column name="rel_pos"/>
            <column name="location"/>
            <column name="count_per_million"/>
            <column name="is_unique"/>
            <column name="avg_mismatches"/>
            <column name="is_dominant"/>
            <column name="display_name"/>
            <column name="attribution"/>
            <column name="dataset_presenter_id"/>
            <sql>
            <![CDATA[
                SELECT DISTINCT
                transcript_source_id
                , source_id
                , project_id
                , sample_name
                , location
                , count_per_million
                , avg_mismatches
                , is_unique
                , is_dominant
                , utr_len
                , rel_pos
                , display_name
                , attribution
                , dataset_presenter_id
                , CASE WHEN (rel_pos >= 0) THEN 'yes' ELSE '' END AS alt_cds_start
                FROM (
                    SELECT DISTINCT
                    ta.source_id as transcript_source_id
                    , ta.gene_source_id as source_id
                    , ta.project_id
                    , REPLACE(pan.name, ' [feature_loc] (SpliceSites)', '') as sample_name
                    , sst.location
                    , ssf.count_per_million
                    , ssf.avg_mismatches
                    , decode (sst.is_unique, 1, 'yes', 0, '') as is_unique
                    , decode (sst.is_dominant, 1, 'yes', 0, '') as is_dominant
                    , CASE WHEN (sst.location >= ta.coding_start AND sst.location <= coding_end AND sst.dist_to_cds = sst.dist_to_first_atg)
                        THEN (-1) * sst.dist_to_cds
                        ELSE sst.dist_to_first_atg END as utr_len
                    , CASE WHEN (ta.is_reversed = 0 )
                        THEN (sst.location - ta.coding_start)
                        ELSE (ta.coding_end - sst.location) END as rel_pos
                    , REGEXP_REPLACE (dp.display_name, '\(.+\)', '') as display_name
                    , CASE WHEN (dp.short_display_name like '%Myler%')
                        THEN 'Myler lab' ELSE dp.short_attribution END as attribution
                    , dp.dataset_presenter_id
                    FROM apidbtuning.splicesitetranscripts sst
                    , apidb.splicesitefeature ssf
                    , study.protocolappnode pan
                    , study.studylink sl
                    , study.study s
                    , study.study i
                    , apidbtuning.datasetpresenter dp
                    , apidbtuning.transcriptattributes ta
                    WHERE ssf.na_sequence_id = sst.na_sequence_id
                    AND ssf.type = sst.type
                    AND ssf.strand = sst.strand
                    AND ssf.segment_start = sst.location
                    AND pan.protocol_app_node_id = ssf.protocol_app_node_id
                    AND sl.protocol_app_node_id = pan.protocol_app_node_id
                    AND s.study_id = sl.study_id
                    AND i.study_id = s.investigation_id
                    AND dp.name = replace(i.name, '_PolyA_', '_Spliced_Leader_')
                    AND ta.gene_source_id = sst.gene_source_id
                    AND ssf.type = 'Splice Site'
                    ORDER BY is_dominant, rel_pos, utr_len desc, sample_name, location
                )
            ]]>
	    </sql>
       </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Poly A Sites  -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="PolyASites" isCacheable="false"  includeProjects="TriTrypDB,UniDB">
            <testParamValues>
               <paramValue name="source_id">LmjF.01.0020</paramValue>
            </testParamValues>

            <column name="transcript_source_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sample_name"/>
            <column name="location"/>
            <column name="count_per_million"/>
            <column name="is_unique"/>
            <column name="avg_mismatches"/>
            <column name="is_dominant"/>
            <column name="rel_pos"/>
            <column name="display_name"/>
            <column name="attribution"/>
            <column name="dataset_presenter_id"/>
            <sql>
            <![CDATA[
                SELECT DISTINCT
                ta.source_id as transcript_source_id
                , ta.gene_source_id as source_id
                , ta.project_id
                , REPLACE(pan.name, ' [feature_loc] (SpliceSites)', '') as sample_name
                , sst.location
                , ssf.count_per_million
                , ssf.avg_mismatches
                , decode (sst.is_unique, 1, 'yes', 0, '') as is_unique
                , decode (sst.is_dominant, 1, 'yes', 0, '') as is_dominant
                , CASE WHEN (ta.is_reversed = 1 )
                    THEN (-1 * (sst.location - ta.coding_start))
                    ELSE (-1 * (ta.coding_end - sst.location)) END as rel_pos
                , REGEXP_REPLACE (dp.display_name, '\(.+\)', '') as display_name
                , CASE WHEN (dp.short_display_name like '%Myler%')
                    THEN 'Myler lab' ELSE dp.short_attribution END as attribution
                , dp.dataset_presenter_id
                FROM apidbtuning.splicesitetranscripts sst
                , apidb.splicesitefeature ssf
                , study.protocolappnode pan
                , study.studylink sl
                , study.study s
                , study.study i
                , apidbtuning.datasetpresenter dp
                , apidbtuning.transcriptattributes ta
                WHERE ssf.na_sequence_id = sst.na_sequence_id
                AND ssf.type = sst.type
                AND ssf.strand = sst.strand
                AND ssf.segment_start = sst.location
                AND pan.protocol_app_node_id = ssf.protocol_app_node_id
                AND sl.protocol_app_node_id = pan.protocol_app_node_id
                AND s.study_id = sl.study_id
                AND i.study_id = s.investigation_id
                --TODO Fix this!
                AND (((i.name = 'lmajFriedlin_sbri_myler_PolyA_rnaSeqSplicedLeaderAndPolyASites_RSRC' OR i.name = 'ldonBPK282A1_sbri_myler_rnaSeqSplicedLeaderAndPolyASites_RSRC')
                        AND dp.name = replace(i.name, '_PolyA_', '_Spliced_Leader_') )
                    OR (i.name = 'tbruTREU927_George_Cross_PolyA_rnaSeqSplicedLeaderAndPolyASites_RSRC' AND dp.name = replace(i.name, '_PolyA_', '_Splice_Leader_'))
                    OR (i.name = 'tbruTREU927_Tschudi_Transcriptome_PolyA_rnaSeqSplicedLeaderAndPolyASites_RSRC' AND dp.name = replace(i.name, '_PolyA_', '_Spliced_Leaders_')))
                AND ta.gene_source_id = sst.gene_source_id
                AND ssf.type = 'Poly A'
                ORDER BY is_dominant, rel_pos desc, sample_name, location
            ]]>
	    </sql>
       </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Isolate Overlap  -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO Crypto specific /?  Maybe this should be an attribute? isolate count?-->
<!-- 
       <sqlQuery name="PopsetOverlap" includeProjects="CryptoDB,EuPathDB"
                  isCacheable="false">

            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd6_2090</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="total"/>
            <sql>
            <![CDATA[
            SELECT source_id, '@PROJECT_ID@' as project_id, count(*) as total
            FROM (SELECT DISTINCT gio.gene_source_id as source_id, gio.popset_source_id as popset
                  FROM ApidbTuning.GenePopsetOverlap gio) popsets
            GROUP BY source_id
            ]]>
           </sql>
       </sqlQuery>
-->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Mass spec -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="MassSpec" excludeProjects="EuPathDB"
                  isCacheable="false">

            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EHI_011210</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_17249</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">Tb11.0550</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_230580</paramValue>
            </testParamValues>
           <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">TA19695</paramValue>
            </testParamValues>

            <column name="transcript_ids"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="experiment"/>
            <column name="sample"/>
            <column name="sequence_count"/>
            <column name="spectrum_count"/>
            <column name="data_source"/>
            <sql>
            <![CDATA[
select ms.*, ga.project_id
from apidbtuning.geneattributes ga, 
(
SELECT
  listagg(source_id, ', ') within GROUP(ORDER BY source_id) AS transcript_ids
, gene_source_id as source_id
, experiment
, sample_display_name AS sample
, external_database_name AS data_source
, spectrum_count
, sequence_count
FROM
  apidbtuning.mstranscriptsummary
GROUP BY
  gene_source_id
, experiment
, sample_display_name
, external_database_name
, spectrum_count
, sequence_count
) ms
where ms.source_id = ga.source_id
ORDER BY
  ms.source_id
, ms.experiment
, ms.sample
            ]]>
            </sql>       
        </sqlQuery>
 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Phospho Mass spec -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="MassSpecMod" includeProjects="PlasmoDB,ToxoDB,TriTrypDB,FungiDB,PiroplasmaDB,HostDB,UniDB"
                  isCacheable="false"> 
          <testParamValues includeProjects="ToxoDB">
            <paramValue name="source_id">TGME49_251810</paramValue>
          </testParamValues>
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="modification_site"/>
            <column name="term_name"/>
            <column name="experiment"/>
            <column name="sample"/>
            <column name="residue"/>

<!--
            <column name="sum_spectrum_count"/>
            <column name="distinct_peptides"/>
-->
            <column name="project_id"/>
            <sql>
            <![CDATA[
select ps.*, ga.project_id
from apidbtuning.geneattributes ga, 
(
select   listagg(source_id, ', ') within group(order by source_id) as transcript_ids
, gene_source_id as source_id
       , modification_site
       , experiment
       , sample
       , sum_spectrum_count
       , replace(replace(replace(term_name, '-', ' '), '_', ' '), 'binding site', 'ubiquitin binding site') as term_name
       , residue
       , distinct_peptides
from (
SELECT mss.source_id,
       mss.gene_source_id,
       mss.residue_location + 1 as modification_site,
       mss.experiment,
       mss.sample_display as sample,
       sum(mss.spectrum_count) as sum_spectrum_count,
       mss.modification_type as term_name,
       mss.residue,
       count(*) as distinct_peptides
from  apidbtuning.msmodifiedpeptidesummary mss
group by mss.experiment, mss.sample_display, mss.residue_location, mss.source_id, mss.gene_source_id,mss.modification_type, mss.residue
)
group by gene_source_id, modification_site, experiment, sample, sum_spectrum_count, term_name, residue, distinct_peptides
) ps
where ps.source_id = ga.source_id
order by ps.source_id,ps.residue, ps.experiment, ps.sample
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="MassSpecDownload" excludeProjects="EuPathDB"
                  isCacheable="false" clobRow="true">

            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EHI_011210</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_17249</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">Tb11.0550</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_230580</paramValue>
            </testParamValues>
           <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">TA19695</paramValue>
            </testParamValues>

            <column name="transcript_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="experiment"/>
            <column name="sample"/>
            <column name="sequence"/>
            <column name="spectrum_count"/>
            <column name="protein_start"/>
            <column name="protein_end"/>
            <sql>
            <![CDATA[
                   select ta.source_id as transcript_id, ta.gene_source_id as source_id, ta.project_id,
                     ms.experiment, ms.sample_display_name as sample, ms.peptide_sequence as sequence, 
		     ms.spectrum_count, ms.aa_start_min as protein_start, ms.aa_end_max as protein_end
                   from apidbtuning.mspeptidesummary ms, apidbtuning.transcriptattributes ta
                   where ms.source_id = ta.source_id
                   order by ms.experiment, ms.sample
            ]]>

            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!--Gene Location -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

     <sqlQuery name="GeneLocation" isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sequence_source_id"/>
            <column name="sequence_so_term"/> 
            <column name="start_min"/>
            <column name="end_max"/>
            <column name="strand"/>
            <column name="start_context"/>
            <column name="end_context"/>
            <column name="organismAbbrev"/>
            <column name="lc_project_id"/>
            <sql>
            <![CDATA[
                     SELECT ga.source_id
                          , ga.project_id
                          , fl.sequence_source_id AS sequence_source_id
                          , so.name AS sequence_so_term
                          , fl.start_min AS start_min
                          , fl.end_max AS end_max
                          , DECODE(fl.is_reversed, 0, '+', 1, '-', '.') strand
                          , (fl.start_min - 5000) AS start_context
                          , (fl.end_max + 5000) AS end_context
                          , o.public_abbrev as organismAbbrev
                          , lower(ga.project_id) AS lc_project_id
                     FROM ApidbTuning.GeneAttributes ga
                        , apidb.featurelocation fl
                        , ApidbTuning.GenomicSeqAttributes sa
                        , SRes.OntologyTerm so
                        , apidb.organism o
                     WHERE ga.na_sequence_id = sa.na_sequence_id
                      AND sa.so_id = so.source_id
                      AND ga.na_feature_id = fl.NA_FEATURE_ID
                      AND o.taxon_id = ga.taxon_id
            ]]>
            </sql>
        </sqlQuery>

    
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- SSGCID                                                       -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Ssgcid" isCacheable="false" excludeProjects="HostDB">

            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EHI_011210</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">Tb927.10.2010</paramValue>
            </testParamValues>
            <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">BBOV_IV001230</paramValue>
            </testParamValues>
            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd1_2260</paramValue>
            </testParamValues>
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_239300</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_24068 </paramValue>
            </testParamValues>
            <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_1001000 </paramValue>
            </testParamValues>


            <column name="source_id"/>
            <column name="project_id"/>
            <column name="target"/>
            <column name="status"/>
            <column name="selection_criteria"/>
            <column name="has_clone"/>
            <column name="has_protein"/>
            <sql>
            <![CDATA[
               WITH sbri as (select substr(eupathdb, instr(eupathdb, ':') + 1) as source_id,
                                    decode(substr(eupathdb, 1, instr(eupathdb, ':') - 1),
                                           'TritrypDB', 'TriTrypDB',
                                           substr(eupathdb, 1, instr(eupathdb, ':') - 1))
                                    as project_id,
                                    target, status, selection_criteria,
                                    decode(has_clone, 'true', 'yes', 'false', 'no', 'N/A') as has_clone,
                                    decode(has_protein, 'true', 'yes', 'false', 'no', 'N/A') as has_protein
                             from ApidbTuning.ssgcid)
               SELECT gi.gene as source_id, sbri.project_id, sbri.target, sbri.status,
                      sbri.selection_criteria, sbri.has_clone, sbri.has_protein
               FROM sbri, ApidbTuning.GeneId gi, apidbtuning.geneattributes ga
               WHERE sbri.project_id = ga.project_id
                 AND sbri.source_id = gi.id
                 AND gi.gene = ga.source_id
            ]]>
            </sql>
        </sqlQuery>

    
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- single-row attribute "tables" to put values in GeneDetail    -->
       <!-- where text search can find them                              -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Product" isCacheable="false">
            <column name="transcript_product"/>
            <column name="transcript_ids"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <sql>
            <![CDATA[
SELECT
  gene_source_id AS source_id
, project_id
, transcript_product
, listagg(source_id, ', ') within GROUP(ORDER BY  source_id) AS transcript_ids
FROM
  apidbtuning.transcriptattributes
GROUP BY
  gene_source_id
, project_id
, transcript_product
            ]]>
            </sql>
        </sqlQuery>

       <sqlQuery name="GeneName" isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="gene_name"/>
            <sql>
            <![CDATA[
SELECT
  source_id AS source_id
, project_id
, name AS gene_name
FROM
  apidbTuning.GeneAttributes
            ]]>
            </sql>
        </sqlQuery>
 
        <sqlQuery name="AllProducts" isCacheable="false">
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="product"/>
            <column name="is_alternate"/>
            <column name="reference"/>
            <column name="evidence_code"/>
            <column name="evidence_code_parameter"/>
	    <column name="assigned_by"/>
            <sql>
            <![CDATA[
select source_id, transcript_ids, project_id, product, is_alternate, 
       reference, evidence_code, evidence_code_parameter, assigned_by
from apidbTuning.AllGeneProducts
            ]]>
            </sql>
        </sqlQuery> 

       <sqlQuery name="GeneId" isCacheable="false">
            <column name="gene_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <sql>
            <![CDATA[
SELECT
  ga.source_id
, ga.source_id AS gene_id
, ga.project_id
FROM
  dots.GeneFeature gf
, ApidbTuning.GeneAttributes ga
WHERE
  ga.na_feature_id = gf.na_feature_id
            ]]>
            </sql>
        </sqlQuery>


  <!--===========================================================================-->
  <!--===========================================================================-->
  <!-- PlasmoDB exclusives  -->
  <!--===========================================================================-->
  <!--===========================================================================-->
 

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Y2H interactions -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Y2hInteractions" isCacheable="false" includeProjects="PlasmoDB,EuPathDB,FungiDB,UniDB">

         <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_0102200</paramValue>
         </testParamValues>

         <column name="source_id"/>
         <column name="other_source_id"/>
         <column name="other_product"/>
         <column name="other_gene_source_id"/>
         <column name="project_id"/>
         <column name="bait_start"/>
         <column name="bait_end"/>
         <column name="prey_start"/>
         <column name="prey_end"/>
         <column name="times_observed" />
         <column name="number_of_searches"/>
         <column name="prey_number_of_baits"/>
         <column name="bait_number_of_preys"/>
         <column name="bait_or_prey"/>
         <sql>
            <![CDATA[
SELECT
  bf.source_id
, pf.source_id AS other_source_id
, pf.product AS other_product
, bait_start
, bait_end
, prey_start
, prey_end
, times_observed
, number_of_searches
, NULL AS prey_number_of_baits
, bait_number_of_preys
, 'bait' AS bait_or_prey
, bf.project_id
from
  ApidbTuning.geneAttributes bf
, ApidbTuning.geneAttributes pf
, apidb.GeneInteraction gi
WHERE
  bf.na_feature_id = gi.bait_gene_feature_id
  AND gi.prey_gene_feature_id = pf.na_feature_id
UNION
SELECT
  pf.source_id
, bf.source_id AS other_source_id
, bf.product AS other_product
, bait_start
, bait_end
, prey_start
, prey_end
, times_observed
, number_of_searches
, prey_number_of_baits
, NULL AS bait_number_of_preys
, 'prey' AS bait_or_prey
, pf.project_id
FROM
  apidbtuning.geneattributes bf
, ApidbTuning.GeneAttributes pf
, apidb.GeneInteraction gi
WHERE
  bf.na_feature_id = gi.bait_gene_feature_id
  AND gi.prey_gene_feature_id = pf.na_feature_id
           ]]>
        </sql>
      </sqlQuery>



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Protein expression -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


       <!-- TODO -->

       <!--
       <sqlQuery name="ProteinExpression" isCacheable="false" includeProjects="PlasmoDB,EuPathDB">

        <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PBANKA_140060</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="profile_element"/>
            <column name="element_value"/>
            <sql>
            <![CDATA[
            SELECT REPLACE(pen.name, '_', ' ') as profile_element,
                   DECODE(pe.value, 1, 'yes', 'no') as element_value, 
                   p.source_id, '@PROJECT_ID@' as project_id
            FROM apidb.profileElementName pen,
                 apidb.profileElement pe,
                 apidb.profile p,
                 apidb.profileSet ps
            WHERE ps.name = 'berghei_proteomic_Sinden'
            AND ps.profile_set_id = p.profile_set_id
            AND ps.profile_set_id = pen.profile_set_id
            AND p.profile_id = pe.profile_id
            AND pen.profile_element_name_id = pe.profile_element_name_id
            ORDER BY pen.element_order
            ]]>
            </sql>
        </sqlQuery>
        -->
 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- MR4 reagents -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!--
       <sqlQuery name="Mr4Reagents" isCacheable="false" includeProjects="PlasmoDB,EuPathDB">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="atcc_number"/>
            <column name="reagent_type"/>
            <column name="remark"/>
            <sql>
            <![CDATA[
SELECT
  dbr.primary_identifier AS atcc_number
, dbr.secondary_identifier AS reagent_type
, dbr.remark
, ta.gene_source_id
, ta.project_id
FROM
  apidbtuning.transcriptattributes ta
, dots.aafeature af
, dots.DbRefAAFeature df
, sres.dbref dbr
, sres.ExternalDatabaseRelease edr
, sres.externaldatabase ed
where
  ed.name = 'pfal3D7_dbxref_simple_gene2MR4Reagents_RSRC'
  and edr.external_database_id = ed.external_database_id
  and dbr.external_database_release_id = edr.external_database_release_id
  and dbr.db_ref_id = df.db_ref_id
  AND df.aa_feature_id = af.aa_feature_id  
  AND af.aa_sequence_id = ta.aa_sequence_id
ORDER BY
  dbr.secondary_identifier
, dbr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>
-->

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- plasmo eQTL regions -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

     <sqlQuery name="Plasmo_eQTL_Span_List" isCacheable="false" includeProjects="PlasmoDB,UniDB">
        <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_0300900</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="hapblock_id"/>
            <column name="start_min"/>
            <column name="end_max"/>
            <column name="start_max"/>
            <column name="end_min"/>
            <column name="sequence_id"/>
            <column name="lod_score"/>
            <column name="organism"/>
            <sql>
            <![CDATA[
SELECT
  e.gene_source_id as source_id
, e.project_id
, e.hapblock_id
, e.sequence_id
, e.start_min
, e.end_max
, e.start_max
, e.end_min
, e.organism
, TO_CHAR(e.lod_score, CASE
    WHEN lod_score BETWEEN 1 AND 10
    THEN '9.99'
    ELSE '99.99EEEE'
  END) AS lod_score
FROM
  apidbtuning.eqtlspan e
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Antibody -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!-- TODO -->
       <sqlQuery name="Antibody" isCacheable="false" includeProjects="ToxoDB,CryptoDB,UniDB">
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_255260</paramValue>
            </testParamValues>
            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd6_5430</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="bei_number"/>
            <column name="reagent_type"/>
            <column name="remark"/>
            <sql>
            <![CDATA[
                SELECT dbr.primary_identifier AS bei_number,
                       'Antibody' AS reagent_type,
                       dbr.remark, 
                       gf.source_id, gf.project_id
                FROM apidbtuning.geneattributes gf,
                     dots.DbRefNAFeature df,
                     sres.DbRef dbr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed
                WHERE df.na_feature_id = gf.na_feature_id
                  AND dbr.db_ref_id = df.db_ref_id
                  AND ed.name in ('tgonME49_dbxref_protein2EinsteinAntibodies_RSRC','cparIowaII_dbxref_protein2EinsteinAntibodies_RSRC')
                  AND edr.external_database_id = ed.external_database_id
                  AND dbr.external_database_release_id
                      = edr.external_database_release_id
                ORDER BY dbr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- external database links -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="gene_dbrefs" 
                  isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset"/>
            <column name="link_url"/>
            <column name="ext_id"/>

            <sql>
               <![CDATA[
select distinct * from (
SELECT * FROM (
SELECT 
  edd.dataset_presenter_display_name AS dataset
, ga.source_id
, ga.project_id
, db.primary_identifier AS ext_id
, REPLACE(edr.id_url, 'EXTERNAL_ID_HERE', db.primary_identifier) AS link_url
FROM
   sres.dbref db
, DOTS.dbrefnafeature dbna
, apidbtuning.ExternalDbDatasetPresenter edd
, sres.externaldatabaserelease edr
, ApidbTuning.geneAttributes ga
WHERE
  db.external_database_release_id = edd.external_database_release_id
  AND edr.external_database_release_id = edd.external_database_release_id
  AND dbna.db_ref_id = db.db_ref_id
  AND ga.na_feature_id = dbna.na_feature_id
  AND lower(edd.dataset_presenter_name) NOT LIKE '%nrdb%'
  AND lower(edd.dataset_presenter_name) NOT LIKE '%nafeature_aliases%'
  AND edd.dataset_presenter_name NOT LIKE '%dbxref_simple_gene2HagaiPathway%'
  AND lower(edd.dataset_presenter_name) NOT LIKE '%pubmed%'
  AND edd.dataset_presenter_display_name != 'ApiLoc Predictions'
  AND NOT edd.external_database_name = 'anidFGSCA4_dbxref_unity_EnsemblFungi_RSRC' -- #47248
  AND NOT edd.external_database_name = 'mory70-15_dbxref_unity_EnsemblFungi_RSRC'  -- #46932
)
WHERE dataset != 'Malaria Literature Database' 
AND dataset != 'Ontology Based Pattern Identification'
AND dataset != 'GeneDB: The Sanger Institute Pathogen Genomics Database'
UNION
SELECT
  regexp_replace(replace(replace(regexp_replace(ed.name, '^.*_dbxref_', ''),
                                 '_geneMapping_RSRC', ''),
                         '-Agilent', ''),
                 '_.*$', '')
  as dataset
, ga.source_id
, ga.project_id
, sref.primary_identifier as ext_id
, case
    when ed.name like '%_dbxref_A-%'
      then 'https://www.ebi.ac.uk/biostudies/arrayexpress/arrays/'
           || regexp_replace(replace(replace(replace(ed.name, '_geneMapping_RSRC', ''),
                                             '-Agilent', ''),
                                     '_GenePix', ''),
                             '^.*_dbxref_', '')
    when ed.name like '%_dbxref_GPL%'
      then 'http://ncbi.nlm.nih.gov/geo/query/acc.cgi?acc='
           || regexp_replace(regexp_replace(ed.name, '^.*dbxref_GPL', 'GPL'),
                             '[-_].*$', '')
    else ''
  end as link_url 
FROM SRes.DbRef sref
, DoTS.DbRefNAFeature refea
, SRES.ExternalDatabase ed
, SRES.ExternalDatabaseRelease edr
, ApidbTuning.geneAttributes ga
WHERE sref.external_database_release_id  = edr.external_database_release_id 
  AND ed.external_database_id = edr.external_database_id 
  AND ed.name like '%geneMapping%'
  AND refea.db_ref_id = sref.db_ref_id 
  AND refea.na_feature_id = ga.na_feature_id 
UNION
SELECT 
  edd.dataset_presenter_display_name AS dataset
, ta.gene_source_id
, ta.project_id
, db.primary_identifier AS ext_id
, REPLACE(edr.id_url, 'EXTERNAL_ID_HERE', db.primary_identifier) AS link_url
FROM
   sres.dbref db
, DOTS.dbrefnafeature dbna
, apidbtuning.ExternalDbDatasetPresenter edd
, sres.externaldatabaserelease edr
, ApidbTuning.transcriptAttributes ta
WHERE
  db.external_database_release_id = edd.external_database_release_id
  AND edr.external_database_release_id = edd.external_database_release_id
  AND dbna.db_ref_id = db.db_ref_id
  AND ta.na_feature_id = dbna.na_feature_id
  AND lower(edd.dataset_presenter_name) NOT LIKE '%nrdb%'
  AND lower(edd.dataset_presenter_name) NOT LIKE '%nafeature_aliases%'
  AND edd.dataset_presenter_name NOT LIKE '%dbxref_simple_gene2HagaiPathway%'
  AND lower(edd.dataset_presenter_name) NOT LIKE '%pubmed%'
UNION
SELECT d.name as dataset
, ga.gene_source_id
, ga.project_id
, dbr.primary_identifier AS ext_id
, REPLACE(eru.id_url, '###ID###', dbr.primary_identifier) AS link_url
FROM
   sres.dbref dbr
, DOTS.dbrefnafeature dbrf
, sres.externaldatabaserelease r
, sres.externaldatabase d
, ApidbTuning.transcriptAttributes ga
, APIDB.EXTERNALRESOURCEURL eru
WHERE dbr.external_database_release_id = r.external_database_release_id
and r.external_database_id = d.external_database_id
and dbr.db_ref_id = dbrf.db_ref_id
and dbrf.na_feature_id = ga.na_feature_id
and upper(d.name) = eru.database_name
and d.name not in ('PUBMED')
UNION
SELECT d.name as dataset
, ga.source_id
, ga.project_id
, dbr.primary_identifier AS ext_id
, REPLACE(eru.id_url, '###ID###', dbr.primary_identifier) AS link_url
FROM
   sres.dbref dbr
, DOTS.dbrefnafeature dbrf
, sres.externaldatabaserelease r
, sres.externaldatabase d
, ApidbTuning.geneAttributes ga
, APIDB.EXTERNALRESOURCEURL eru
WHERE dbr.external_database_release_id = r.external_database_release_id
and r.external_database_id = d.external_database_id
and dbr.db_ref_id = dbrf.db_ref_id
and dbrf.na_feature_id = ga.na_feature_id
and upper(d.name) = eru.database_name
and d.name not in ('PUBMED','GeneDB')
UNION
SELECT d.name as dataset
, ta.gene_source_id as source_id
, ta.project_id
, dbr.primary_identifier AS ext_id
, REPLACE(eru.id_url, '###ID###', dbr.primary_identifier) AS link_url
FROM
   sres.dbref dbr
, DOTS.dbrefaafeature dbrf
, Dots.aafeature aaf
, sres.externaldatabaserelease r
, sres.externaldatabase d
, ApidbTuning.transcriptAttributes ta
, APIDB.EXTERNALRESOURCEURL eru
WHERE dbr.external_database_release_id = r.external_database_release_id
and r.external_database_id = d.external_database_id
and dbr.db_ref_id = dbrf.db_ref_id
and dbrf.aa_feature_id = aaf.aa_feature_id
and aaf.aa_sequence_id = ta.aa_sequence_id
and upper(d.name) = eru.database_name
and eru.database_name  not IN ('InterproscanData_RSRC', 'INTERPRO', 'Prints', 'HAMAP', 'SFLD', 'TIGRFAM', 'SUPERFAMILY', 'Pfam', 'PIRSF', 'PROSITE patterns', 'Superfamily', 'PRINTS', 'InterProScan', 'PFAM', 'SMART', 'CDD', 'PANTHER')  
)
  ORDER BY dataset
                ]]>
            </sql>
        </sqlQuery>





       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- protein database links -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO -->
       <sqlQuery name="ProteinDatabase" 
                  isCacheable="false" includeProjects="FungiDB,PlasmoDB,EuPathDB,UniDB">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="accession"/>
            <column name="gi"/>
            <column name="dataset"/>
            <column name="accession_url"/>
            <column name="gi_url"/>
            <sql>
            <![CDATA[
                SELECT dr.primary_identifier AS accession,
                       dr.secondary_identifier AS gi,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity', 'GenBank',
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                           'Protein Data Bank',
                                       'NRDB_ref_dbXRefBySeqIdentity', 'RefSeq',
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                           'Swiss-Prot',
                                       ed.name) AS dataset,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Protein&cmd=search&term='
                                         || dr.primary_identifier,
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                         'http://www.rcsb.org/pdb/navbarsearch.do?newSearch=yes&isAuthorSearch=no&radioset=All&inputQuickSearch='
                                         || dr.primary_identifier
                                         || '&image.x=0&image.y=0&image=Search',
                                       'NRDB_ref_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Protein&cmd=search&term='
                                         || dr.primary_identifier,
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                       'http://www.uniprot.org/uniprot/?query=' || dr.primary_identifier,
                                       ed.name) AS accession_url,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_ref_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       ed.name) AS gi_url, 
                       ta.source_id, ta.gene_source_id, ta.project_id
                FROM dots.GeneFeature gf, dots.DbRefNaFeature drnf,
                     sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed, ApidbTuning.TranscriptAttributes ta
                WHERE gf.na_feature_id = drnf.na_feature_id
                  AND drnf.db_ref_id = dr.db_ref_id
                  AND dr.external_database_release_id
                        = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name in ('NRDB_gb_dbXRefBySeqIdentity',
      /* gets its own section     'NRDB_pdb_dbXRefBySeqIdentity', */
                                  'NRDB_ref_dbXRefBySeqIdentity',
                                  'NRDB_sp_dbXRefBySeqIdentity')
                  AND gf.source_id = ta.gene_source_id
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- SGC 3D structure predictions                                --> 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO:  What is this??
        <sqlQuery name="SGC_3D_Struct" isCacheable="false" includeProjects="CryptoDB">

            <testParamValues>
               <paramValue name="source_id">cgd3_300</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="pdb_id"/>
            <sql>
              <![CDATA[
            SELECT dr.primary_identifier AS pdb_id,
                   gf.source_id, '@PROJECT_ID@' AS project_id
            FROM dots.GeneFeature gf,
                 dots.DbRefNaFeature drnf,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE gf.na_feature_id = drnf.na_feature_id
            AND drnf.db_ref_id = dr.db_ref_id
            AND dr.external_database_release_id = edr.external_database_release_id
            AND edr.external_database_id = ed.external_database_id
            AND ed.name = 'Structural Genomics Consortium 3D Structures'
            ORDER BY dr.primary_identifier
              ]]>
            </sql>
        </sqlQuery>
-->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- 3D structure predictions -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="3dPreds"
                  isCacheable="false" includeProjects="PlasmoDB,EuPathDB,UniDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="search_term"/>
            <column name="pdb_template"/>
            <column name="transcript_ids"/>
            <sql>
            <![CDATA[
SELECT
  ta.gene_source_id AS search_term
,  ta.gene_source_id AS source_id
, dr.primary_identifier AS pdb_template
, ta.project_id
, listagg(ta.source_id, ', ') within GROUP(ORDER BY ta.source_id) AS transcript_ids
FROM
  dots.aafeature aaf
, dots.DbRefaaFeature drnf
, sres.DbRef dr
, sres.ExternalDatabaseRelease edr
, sres.ExternalDatabase ed
, ApidbTuning.TranscriptAttributes ta
WHERE
  aaf.aa_sequence_id = ta.aa_sequence_id
  AND aaf.aa_feature_id = drnf.aa_feature_id
  AND drnf.db_ref_id = dr.db_ref_id
  AND dr.external_database_release_id = edr.external_database_release_id
  AND edr.external_database_id = ed.external_database_id
  AND ed.name = 'pfal3D7_dbxref_simple_gene2PredictedProteinStructures_RSRC'
GROUP BY
  ta.gene_source_id
, ta.project_id
, dr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>
 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- PDB similarities -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO:  check this one.  Tuning table should be transcript level -->
       <sqlQuery name="PdbSimilarities"
                  isCacheable="false">
            
            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EHI_011210</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_103887</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="transcript_id"/>
            <column name="project_id"/>
            <column name="pdb_chain"/>
            <column name="pdb_id"/>
            <column name="pvalue_mant"/>
            <column name="pvalue_exp"/>
            <column name="taxon"/>
            <column name="pdb_title"/>
            <column name="pdb_url"/>
            <column name="percent_identity"/>
            <column name="percent_plasmo_coverage"/>
            <sql>
            <![CDATA[
                SELECT ps.pdb_chain, ps.pdb_title, ps.pdb_id, ps.pvalue_mant,
                       ps.pvalue_exp, ps.taxon, ps.percent_identity,
                       ps.percent_plasmo_coverage, 
                       'https://www.rcsb.org/structure/' || ps.pdb_id as pdb_url,
                       ta.source_id as transcript_id, ta.gene_source_id as source_id, ta.project_id
                FROM ApidbTuning.PdbSimilarity ps, ApidbTuning.TranscriptAttributes ta
                WHERE ps.source_id = ta.source_id
                ORDER BY ps.score DESC
            ]]>
            </sql>
        </sqlQuery>


  <!--===========================================================================-->
  <!--===========================================================================-->
  <!-- GiardiaDB exclusives  -->
  <!--===========================================================================-->
  <!--===========================================================================-->


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- GeneDepreciation - to keep track of gene (un)deprecation -->  
       <!--    Temporarily remove because not loaded in rebuild      -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <!-- sqlQuery name="GeneDeprecation" includeProjects="GiardiaDB">
	    <testParamValues includeProjects="GiardiaDB">
	      <paramValue name="source_id">GL50803_10871</paramValue>
	      <paramValue name="project_id">GiardiaDB</paramValue>
	    </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="action"/>
            <column name="action_date"/>
            <column name="reason"/>
            <sql>
            SELECT gd.*, '@PROJECT_ID@' as project_id
            FROM apidb.geneDeprecation gd, ApidbTuning.GeneAttributes ga 
            WHERE ga.source_id = gd.source_id
            </sql>
        </sqlQuery-->
  <!--===========================================================================-->


       <sqlQuery name="PubMed">
         <testParamValues includeProjects="PlasmoDB">
           <paramValue name="source_id">PF3D7_0523000</paramValue>
         </testParamValues>
         <testParamValues includeProjects="ToxoDB">
           <paramValue name="source_id">TGME49_220400</paramValue>
         </testParamValues>

         <column name="source_id"/>
         <column name="project_id"/>
         <column name="pubmed_id"/>
         <column name="doi"/>
         <column name="title"/>
         <column name="authors"/>
         <sql>
           <![CDATA[
                SELECT DISTINCT gene_source_id as source_id,  project_id, pubmed_id, doi, title,
                   CASE WHEN (length(authors)> 55) THEN dbms_lob.substr(authors,52,1)  || '...'
                        ELSE authors END authors
                FROM ApidbTuning.GenePubmed
           ]]>
         </sql>
       </sqlQuery>

       <sqlQuery name="PubMedForAI" isCacheable="false">
         <testParamValues includeProjects="PlasmoDB">
           <paramValue name="source_id">PF3D7_0523000</paramValue>
         </testParamValues>
         <testParamValues includeProjects="ToxoDB">
           <paramValue name="source_id">TGME49_220400</paramValue>
         </testParamValues>
         <testParamValues includeProjects="CryptoDB">
           <paramValue name="source_id">cgd3_1400</paramValue>
         </testParamValues>
         <testParamValues includeProjects="GiardiaDB">
           <paramValue name="source_id">GL50803_112048</paramValue>
         </testParamValues>
         <testParamValues includeProjects="TrichDB">
           <paramValue name="source_id">TVAG_386080</paramValue>
         </testParamValues>
         <testParamValues includeProjects="TriTrypDB">
           <paramValue name="source_id">Tb927.8.4640</paramValue>
         </testParamValues>

         <column name="source_id"/>
         <column name="project_id"/>
         <column name="pubmed_id"/>
         <column name="pubmed_source"/>
         <sql>
           <![CDATA[
           SELECT source_id, 
                  project_id,
                  pubmed_id, 
                  CASE WHEN pubmed_source_list = 'Curated,User comments' 
                       THEN 'Curated & User comments'
                       ELSE pubmed_source_list 
                  END as pubmed_source
           FROM (
             SELECT source_id, 
                    project_id,
                    pubmed_id,
                    listagg(pubmed_source, ',') within group (order by pubmed_source) as pubmed_source_list
             FROM (
               -- Curated PubMed references
               SELECT gene_source_id as source_id, project_id, pubmed_id, 'Curated' as pubmed_source
               FROM ApidbTuning.GenePubmed
               
               UNION
               
               -- User comment PubMed references  
               SELECT c.stable_id as source_id, c.project_name as project_id, cr.source_id as pubmed_id, 'User comments' as pubmed_source
               FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@ c,
                    @COMMENT_SCHEMA@CommentReference@COMMENT_DBLINK@ cr
               WHERE c.comment_id = cr.comment_id
                 AND cr.database_name = 'pubmed'
                 AND c.comment_target_id = 'gene'
                 AND c.review_status_id not in ('rejected', 'task')
                 AND c.is_visible = 1
                 AND c.stable_id IN (SELECT source_id FROM apidbTuning.GeneAttributes)
             )
             GROUP BY source_id, project_id, pubmed_id
           )
           ORDER BY source_id, pubmed_id
           ]]>
         </sql>
       </sqlQuery>

  <!--===========================================================================-->
  <!--======================Metabolic Pathways - Enzymes Compounds Table=================-->
  <!--===========================================================================-->

      <sqlQuery name="MetabolicPathwayReactions" excludeProjects="EuPathDB">
            <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_1435300</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_source"/>
            <column name="reaction_source_id"/>
            <column name="reaction_url"/>
            <column name="enzyme"/>
            <column name="expasy_url"/>
            <column name="equation"/>
            <column name="equation_text"/>
            <column name="reversible"/>
            <column name="substrates_text"/>
            <column name="products_text"/>
            <column name="pathways"/>
            <column name="exact_match"/>
            <sql>
            <![CDATA[
            SELECT source_id
            , project_id
            , pathway_source
            , reaction_source_id
            , reaction_url
            , enzyme
            , expasy_url
            , equation
            , equation_text
            , reversible
            , substrates_text
            , products_text
            , count(name) as pathways
            , exact_match
            FROM (
                SELECT DISTINCT tp.gene_source_id AS source_id
                , ga.project_id
                , pa.pathway_source
                , pr.reaction_source_id
                , pr.reaction_url
                , pr.enzyme
                , pr.expasy_url
                , pr.equation_html AS equation
                , pr.equation_text
                , DECODE(pr.is_reversible, '1', 'Y', '0', 'N') as reversible
                , pr.substrates_text
                , pr.products_text
                , pa.name
                , DECODE(MAX(exact_match), 1, 'Yes', 0, 'No') AS exact_match
                FROM apidbtuning.pathwayattributes pa
                , apidbtuning.pathwaycompounds pc
                , apidbtuning.pathwayreactions pr
                , apidbtuning.transcriptpathway tp
                , apidbtuning.geneattributes ga
                WHERE tp.ec_number_pathway = pr.enzyme
                AND tp.wildcard_count_gene <= tp.wildcard_count_pathway
                AND pr.reaction_id = pc.reaction_id
                AND pr.ext_db_name = pc.ext_db_name
                AND pr.ext_db_version = pc.ext_db_version
                AND pc.pathway_id = pa.pathway_id
                AND tp.pathway_id = pa.pathway_id
                AND tp.gene_source_id = ga.source_id
                GROUP BY ga.project_id, tp.gene_source_id, pa.pathway_source, pr.reaction_source_id, pr.reaction_url, pr.enzyme, pr.expasy_url
                , pr.equation_html, pr.equation_text, pr.is_reversible, pr.substrates_text, pr.products_text, pa.name
            )
            GROUP BY project_id, source_id, pathway_source, reaction_source_id, reaction_url, enzyme, expasy_url, equation, equation_text
            , reversible, substrates_text, products_text, exact_match
            ORDER BY exact_match desc, pathways desc, reaction_source_id, pathway_source
            ]]>
           </sql>
        </sqlQuery>

      <sqlQuery name="MobileElements" excludeProjects="EuPathDB">
            <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">TVAG_2v0000020</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="mapping_start"/>
            <column name="mapping_end"/>
            <column name="attr"/>
            <sql>
            <![CDATA[
            select ga.source_id, ga.project_id, gff3.mapping_start, gff3.mapping_end,
                   gff3.attr
            from apidb.Gff3, apidbTuning.GeneAttributes ga
            where gff3.na_sequence_id = ga.na_sequence_id
              and gff3.mapping_start < ga.end_max
              and gff3.mapping_end > ga.start_min
              and gff3.sequence_ontology_id
                  in (select ontology_term_id
                      from sres.OntologyTerm
                      where name = 'mobile_genetic_element')
            ]]>
           </sql>
        </sqlQuery>

          <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
          <!-- MetaTable: for each table defined in this record type, this table lists which organisms it applies to            -->
          <!--  (if 0, it applies to all)                                                                                       -->
          <!-- * in ApidbTuning.DatasetNameTaxon:  TAXON_ID is 0 when a dataset applies to all organisms,                       -->
          <!--   for example: the  DS_4d5814c3f2 enzymes dataset, with corresponding table: EcNumbers, has taxon_id 0           -->  
          <!-- * for a given organism, a table may appear in several rows in DatasetModelRef: one row for each relevant dataset -->
          <!--   for example: in Pf3D7, the table "ExpressionGraphs" will be listed for each expression-related dataset         -->
          <!--                                                                                                                  -->
          <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
          <sqlQuery name="MetaTable" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="target_name"/>
            <column name="target_type"/>
            <column name="organisms"/>

            <sql>
            <![CDATA[
            SELECT
              ga.source_id,
              ga.project_id,
              target_name,
              target_type,
            --  listagg(ta.name, ', ') within group (order by ta.name) as organisms
              ta.name as organisms
            FROM
            ( select distinct dmr.target_name, dmr.target_type, tn.name
              FROM ApidbTuning.DatasetNameTaxon dt, ApidbTuning.DatasetModelRef dmr,sres.TaxonName tn
              WHERE dt.dataset_presenter_id = dmr.dataset_presenter_id
                and (dmr.target_type = 'table' or dmr.target_type = 'attribute')
                and  dmr.record_type like 'GeneRecordClasses.GeneRecordClass'
                and dt.taxon_id = tn.taxon_id(+)
                and (tn.name_class is null or tn.name_class = 'scientific name')
            ) ta
            , apidbtuning.GeneAttributes ga
            -- GROUP BY ga.source_id, ga.project_id, target_name, target_type
            ORDER BY ga.source_id,target_name

             ]]>
            </sql>
          </sqlQuery>

          <sqlQuery name="ProteinProperties" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="lc_project_id"/>
            <column name="transcript_id"/>
            <column name="isoelectric_point"/>
            <column name="molecular_weight"/>
            <column name="has_signalp"/>
            <column name="has_tmhmm"/>
            <column name="protein_length"/>
            <column name="organismAbbrev"/>
            <column name="prot_info"/>
            <sql>
            <![CDATA[
SELECT
  gene_source_id as source_id
, ta.source_id AS transcript_id
, isoelectric_point
, molecular_weight
, project_id
, lower(project_id) as lc_project_id
, case when signalp_peptide is null then 'no' else 'yes' end as has_signalp
, case when tm_count > 0 then 'yes' else 'no' end as has_tmhmm
, protein_length
, o.public_abbrev as organismAbbrev
, protein_source_id || '%3A' || '1..' || protein_length as prot_info 
FROM
  apidbtuning.transcriptattributes ta, apidb.organism o
WHERE protein_length >0
AND o.taxon_id = ta.taxon_id
ORDER BY
  ta.source_id
             ]]>
            </sql>
          </sqlQuery>



          <sqlQuery name="ProteinExpressionPBrowse" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="lc_project_id"/>
            <column name="transcript_id"/>
            <column name="protein_gtracks"/>
            <column name="protein_jbrowse_tracks"/>
            <column name="sum_sequence_count"/>
            <column name="unique_sequence_count"/>
            <column name="sum_spectrum_count"/>
            <column name="sample_count"/>
            <column name="organismAbbrev"/>
            <column name="prot_info"/>
            <sql>
            <![CDATA[
SELECT
  ta.source_id as transcript_id
, ta.gene_source_id as source_id
, ta.project_id
, lower(ta.project_id) as lc_project_id
, (apidb.tab_to_string( SET(CAST(collect(track_names ORDER BY order_num, track_names) AS apidb.varchartab)), '%1E')) AS protein_gtracks
, (apidb.tab_to_string( SET(CAST(collect(jbrowse_track_names ORDER BY order_num, jbrowse_track_names) AS apidb.varchartab)), '%2C')) AS protein_jbrowse_tracks
, mssum.sum_sequence_count
, mssum.unique_sequence_count
, mssum.sum_spectrum_count
, mssum.sample_count
, o.public_abbrev as organismAbbrev
, ta.protein_source_id || '%3A' || '1..' || ta.protein_length as prot_info 
FROM
  (select
    'MassSpecPeptides_' ||dsp.name AS track_names
  , dsp.name AS jbrowse_track_names
  , ga.source_id
  , '1' AS order_num
  FROM
    apidb.datasource ds
  , apidbtuning.datasetpresenter dsp
  , APIDB.massspecsummary mss
  , SRES.externaldatabase ed
  , sres.externaldatabaserelease edr
  , APIDBTUNING.transcriptattributes ga
  WHERE
    (
      ds.name LIKE dsp.dataset_name_pattern
      OR ds.name = dsp.name
    )
    AND ds.name LIKE '%_massSpec_%'
    AND ds.type = 'protein_expression'
    AND mss.external_database_release_id = edr.external_database_release_id
    AND edr.external_database_id = ed.external_database_id
    AND ed.name = ds.name
    AND ga.aa_sequence_id = mss.aa_sequence_id
  UNION
  SELECT
    'UnifiedPostTraslationalMod' AS track_names
  , 'UnifiedMassSpecPeptides' AS jbrowse_track_names
  , source_id
  , '2' AS order_num
  FROM
    APIDBTUNING.MSModifiedPeptideSummary
  ) tracks
,(SELECT
    source_id
  , COUNT(mps.peptide_sequence) AS sum_sequence_count
  , COUNT(DISTINCT mps.peptide_sequence) AS unique_sequence_count
  , SUM(mps.spectrum_count) AS sum_spectrum_count
  , COUNT(DISTINCT mps.sample) AS sample_count
  FROM
    apidbtuning.mspeptidesummary mps
  GROUP BY
    source_id
  ) mssum
, apidbtuning.transcriptattributes ta
, apidb.organism o
WHERE
  ta.source_id = tracks.source_id
  AND ta.source_id = mssum.source_id
  AND o.taxon_id = ta.taxon_id
GROUP BY
  ta.source_id
, ta.gene_source_id
, ta.protein_source_id
, ta.project_id
, mssum.sum_sequence_count
, mssum.unique_sequence_count
, mssum.sum_spectrum_count
, mssum.sample_count
, o.public_abbrev
, protein_length

             ]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="Taxonomy" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="name"/>
            <column name="ncbi_tax_id"/>
            <column name="rank"/>
            <column name="other_names"/>
            <sql>
            <![CDATA[
SELECT
  ga.source_id
, ga.project_id
, t.name
, t.ncbi_tax_id
, t.rank
, listagg(tn.name, ',</br>') within group (order by tn.name desc) as other_names
FROM
  ApidbTuning.Taxonomy t
, ApidbTuning.GeneAttributes ga
, (select distinct taxon_id, name 
   from sres.taxonname 
   where name_class not in ('scientific name', 'misnomer', 'misspelling')) tn
WHERE
  t.organism = ga.organism
  and t.taxon_id = tn.taxon_id (+)
GROUP BY ga.source_id, ga.project_id, t.name, t.ncbi_tax_id, t.rank, t.ordernum
ORDER BY
  ordernum DESC
             ]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="Sequences" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="transcript_id"/>
            <column name="transcript_length"/>
            <column name="protein_length"/>
            <column name="is_pseudo"/>
            <column name="gen_rel_intron_utr_coords"/>
            <column name="five_prime_utr_coords"/>
            <column name="three_prime_utr_coords"/>
            <column name="transcript_sequence"/>
            <column name="protein_sequence"/>
            <column name="prot_seq_warn"/>
            <column name="genomic_sequence"/>
            <column name="genomic_sequence_length"/>
            <column name="transcript_type"/>
            <sql>
            <![CDATA[
SELECT
  ta.gene_source_id as source_id
, ta.source_id as transcript_id
, ta.project_id
, ta.length as transcript_length
, CASE WHEN (ta.transcript_type LIKE 'pseudogen%' OR gene_type LIKE 'pseudogen%'
             OR ta.so_term_name LIKE 'pseudogen%')
         THEN NULL
       ELSE ta.protein_length
  END AS protein_length
, ta.is_pseudo
, CASE WHEN (ta.transcript_type LIKE 'pseudogen%' OR gene_type LIKE 'pseudogen%'
             OR ta.so_term_name LIKE 'pseudogen%')
         THEN 'pseudogenic_transcript'
       ELSE ta.transcript_type
  END AS transcript_type
, iuc.gen_rel_intron_utr_coords
, case when ta.five_prime_utr_length > 0 
       then '[1,' || (ta.five_prime_utr_length) || ']'
       else null
  end as five_prime_utr_coords
, case when ta.three_prime_utr_length > 0 
       then '[' || (ta.length - ta.three_prime_utr_length + 1) || ',' || ta.length || ']'
       else null
  end as three_prime_utr_coords
, tx_seq.sequence as transcript_sequence
, CASE WHEN (ta.transcript_type LIKE 'pseudogen%' OR ta.gene_type LIKE 'pseudogen%'
             OR ta.so_term_name LIKE 'pseudogen%')
         THEN NULL
       ELSE ps.sequence END AS protein_sequence
, CASE WHEN ps.sequence like '%*%' 
       THEN 'Genes with internal stop codons (*) may not produce functional proteins and may be pseudogenes.'
       ELSE '' END AS prot_seq_warn
, gseq.genomic_sequence
, gseq.genomic_sequence_length
FROM
  apidbTuning.TranscriptAttributes ta
, apidbTuning.IntronUtrCoords iuc
, apidbTuning.TranscriptSequence tx_seq
, apidbTuning.ProteinSequence ps
, apidbTuning.TranscriptGenomicSequence gseq
where ta.source_id = tx_seq.source_id
and ta.protein_source_id = ps.source_id (+)
and ta.source_id = gseq.source_id
and ta.na_feature_id = iuc.na_feature_id(+)
             ]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="ExpressionGraphsDataTable" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <column name="gene"/>
            <!--column name="profile_set_display_name"/-->
            <column name="sample_name"/>
            <column name="value"/>
            <column name="standard_error"/>
            <column name="percentile_channel1"/>
            <column name="percentile_channel2"/>
            <sql>
            <![CDATA[
                SELECT ggp.source_id
                , ggp.profile_graph_id AS gene
                , dp.dataset_presenter_id as dataset_id
                , d.sample_name
                , d.value
                , d.standard_error
                , d.percentile_channel1
                , d.percentile_channel2
                , ga.project_id
                FROM apidbTuning.ExpressionGraphsData d, apidbTuning.DatasetNameTaxon dp,
                     apidbTuning.GeneGroupProfile ggp, apidbtuning.geneattributes ga
                -- customisation for Hehl datasets
                WHERE ((dp.dataset_presenter_id = 'DS_173528b522' AND d.dataset_id IN ('DS_173528b522', 'DS_e7467c0306'))
                    OR (dp.dataset_presenter_id != 'DS_173528b522' AND d.dataset_id = dp.dataset_presenter_id))
                  AND ggp.source_id = ga.source_id
                  AND dp.name = ggp.dataset_name
                  AND ggp.profile_graph_id = d.source_id
                  AND d.sample_name NOT LIKE '%PaGE'
                ORDER BY ggp.profile_graph_id, d.dataset_id, dp.dataset_presenter_id, d.node_order_num, d.protocol_app_node_id
             ]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="TranscriptionSummary" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="display_name"/>
            <sql>
            <![CDATA[
select distinct p.source_id,
     		ga.project_id,
                dp.display_name || decode(p.profile_set_suffix, null, '', ' - ' || p.profile_set_suffix) || ', ' || dp.short_attribution as display_name
from apidbtuning.profile p, 
     apidbtuning.profilesamples ps, 
     apidbtuning.geneattributes ga,
     apidbtuning.datasetmodelref dmr,
     apidbtuning.datasetpresenter dp
where p.dataset_type = 'transcript_expression' 
and p.dataset_subtype = 'rnaseq' 
and p.source_id = ga.source_id
and p.profile_set_name = ps.study_name
and p.dataset_name = dp.name
and dp.DATASET_PRESENTER_ID = dmr.DATASET_PRESENTER_ID]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="PhenotypeGraphsDataTable" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <!--column name="profile_set_display_name"/-->
            <column name="sample_name"/>
            <column name="value"/>
            <column name="percentile_channel1"/>
            <sql>
            <![CDATA[
select ggp.source_id 
, ga.project_id
, dnt.dataset_presenter_id as dataset_id
, nvl(psdi.profile_set_display_name, ps.name) as profile_set_display_name
, smpl.protocol_app_node_name || ' ' || smpl.profile_set_suffix as sample_name
, round(nfe.value, 2) as value
, round(nfe.percentile_channel1, 2) as percentile_channel1
from results.nafeatureexpression nfe
 , apidbtuning.geneattributes ga
 , study.protocolappnode pan
 , study.studylink sl
 , study.study ps
 , study.study i
 , sres.externaldatabaserelease r
 , sres.externaldatabase d
 , apidbtuning.profilesetdisplayinfo psdi
 , apidbtuning.datasetnametaxon dnt
 , apidbtuning.genegroupprofile ggp
 , apidbtuning.profilesamples smpl
where ga.na_feature_id = nfe.na_feature_id
and ggp.profile_graph_id = ga.source_id
and d.name = ggp.dataset_name
and nfe.protocol_app_node_id = pan.protocol_app_node_id
and pan.protocol_app_node_id = sl.protocol_app_node_id
and sl.study_id = ps.study_id
and ps.investigation_id = i.study_id
and i.external_database_release_id = r.external_database_release_id
and r.external_database_id = d.external_database_id
and ps.name = psdi.profile_set_name (+)
and d.name = dnt.name
and dnt.dataset_presenter_id = 'DS_98fb258539' -- this is the TriTryp RNA-Seq phenotype dataset id
and ps.study_id = smpl.study_id
and smpl.protocol_app_node_id = pan.protocol_app_node_id
and smpl.profile_type = 'values'
order by smpl.node_order_num
             ]]>
            </sql>
          </sqlQuery>



	<sqlQuery name="FacetMetadata" isCacheable="false" >
	  <column name="source_id"/>
	  <column name="project_id"/>
	  <column name="dataset_id"/>
	  <column name="property"/>
	  <column name="property_id"/>
	  <sql>
	  <![CDATA[
select distinct p.source_id
, ga.project_id
, dp.dataset_presenter_id as dataset_id
, mt.property
, mt.property_source_id as property_id
from apidbtuning.metadata m
, apidbtuning.PropertyType mt
, apidbtuning.datasetpresenter dp
, apidbtuning.profile p 
, apidbtuning.geneattributes ga
where m.PROPERTY_ID = mt.PROPERTY_ID 
and mt.type = 'string'
and m.dataset_name like coalesce(dp.dataset_name_pattern, dp.name)
and m.dataset_name = p.dataset_name
and p.source_id = ga.source_id
order by property
	  ]]>
            </sql>
          </sqlQuery>


	<sqlQuery name="ContXAxisMetadata" isCacheable="false" >
          <column name="source_id"/>
          <column name="project_id"/>
          <column name="dataset_id"/>
          <column name="property"/>
          <column name="property_id"/>
          <sql>
          <![CDATA[
select distinct p.source_id
, ga.project_id
, dp.dataset_presenter_id as dataset_id
, mt.property
, mt.property_source_id as property_id
from apidbtuning.metadata m
, apidbtuning.PropertyType mt
, apidbtuning.datasetpresenter dp
, apidbtuning.profile p 
, apidbtuning.geneattributes ga
where m.PROPERTY_ID = mt.PROPERTY_ID 
and mt.type = 'number'
and m.dataset_name like coalesce(dp.dataset_name_pattern, dp.name)
and m.dataset_name = p.dataset_name
and p.source_id = ga.source_id
order by property
          ]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="HostResponseGraphsDataTable" isCacheable="false" includeProjects="PlasmoDB,UniDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <column name="profile_set_display_name"/>
            <column name="sample_name"/>
            <column name="value"/>
            <sql>
            <![CDATA[
select ggp.source_id 
, ga.project_id
, dnt.dataset_presenter_id as dataset_id
, nvl(psdi.profile_set_display_name, ps.name) as profile_set_display_name
, pan.name as sample_name
, round(nfe.value, 2) as value
from results.nafeaturehostresponse nfe
 , apidbtuning.geneattributes ga
 , study.protocolappnode pan
 , study.studylink sl
 , study.study ps
 , study.study i
 , sres.externaldatabaserelease r
 , sres.externaldatabase d
 , apidbtuning.profilesetdisplayinfo psdi
 , apidbtuning.datasetnametaxon dnt
 , apidbtuning.genegroupprofile ggp
where ga.na_feature_id = nfe.na_feature_id
and ggp.profile_graph_id = ga.source_id
and d.name = ggp.dataset_name
and nfe.protocol_app_node_id = pan.protocol_app_node_id
and pan.protocol_app_node_id = sl.protocol_app_node_id
and sl.study_id = ps.study_id
and ps.investigation_id = i.study_id
and i.external_database_release_id = r.external_database_release_id
and r.external_database_id = d.external_database_id
and ps.name = psdi.profile_set_name (+)
and d.name = dnt.name
order by pan.node_order_num
             ]]>
            </sql>
          </sqlQuery>



          <!-- TODO:  this should be made by some process query? or injection -->
          <sqlQuery name="EdaPhenotypeGraphsDataTable" isCacheable="false" includeProjects="ToxoDB,UniDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <column name="variable"/>
            <column name="value"/>
            <sql>
            <![CDATA[
SELECT ga.source_id, ga.project_id, gd.variable, nvl(gd.string_value, nvl(to_char(round(gd.number_value, 4)), to_char(gd.date_value))) AS value, gd.dataset_id
FROM Apidbtuning.geneattributes ga, (
SELECT genes.string_value AS gene, ag.display_name AS variable, av.string_value, AV.NUMBER_VALUE , av.date_value, 'tgonGT1_crisprPhenotype_CrisprFunctionalProfiling_RSRC' AS dataset_id
FROM eda.ATTRIBUTEvalue_SB044A3A170_GNPD@eda av, 
   eda.ATTRIBUTEgraph_SB044A3A170_GNPD@eda ag,
   (SELECT gnpd_stable_id, string_value 
    FROM eda.ATTRIBUTEvalue_SB044A3A170_GNPD@eda av 
    WHERE attribute_stable_id = 'VAR_bdc8e679') genes
   WHERE av.attribute_stable_id = ag.stable_id
   AND AV.GNPD_STABLE_ID = genes.GNPD_STABLE_ID 
   AND AV.ATTRIBUTE_STABLE_ID != 'VAR_bdc8e679'
union
SELECT genes.string_value AS gene, ag.display_name AS variable, av.string_value, AV.NUMBER_VALUE , av.date_value, 'tgonGT1_crisprPhenotype_CrisprScreen_RSRC' AS dataset_id
 FROM eda.ATTRIBUTEvalue_sd4745ea297_GNPD@eda av, 
      eda.ATTRIBUTEgraph_sd4745ea297_GNPD@eda ag,
   (SELECT gnpd_stable_id, string_value 
    FROM eda.ATTRIBUTEvalue_sd4745ea297_GNPD@eda av 
    WHERE attribute_stable_id = 'VAR_bdc8e679') genes
   WHERE av.attribute_stable_id = ag.stable_id
   AND AV.GNPD_STABLE_ID = genes.GNPD_STABLE_ID 
   AND AV.ATTRIBUTE_STABLE_ID != 'VAR_bdc8e679'
   ) gd
   WHERE ga.source_id = gd.gene
             ]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="PhenotypeScoreGraphsDataTable" isCacheable="false" includeProjects="PlasmoDB,UniDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <column name="gene"/>
            <column name="profile_set_display_name"/>
            <column name="sample_name"/>
            <column name="phenotype_score"/>
            <column name="score_type"/>
            <sql>
            <![CDATA[
select distinct ggp.source_id
, ggp.profile_graph_id AS gene
, ga.project_id
, dnt.dataset_presenter_id as dataset_id
, nvl(psdi.profile_set_display_name, ps.name) as profile_set_display_name
, pan.name as sample_name
, CASE WHEN cp.score_type = 'mutability in CDS'
       THEN CASE when cp.score = 0 then 'mutable' when cp.score = 1 then 'nonmutable' else 'not_determined' end
       ELSE cast(round(cp.score, 2) as  VARCHAR(10)) END as phenotype_score
--, round(cp.score, 2) as phenotype_score
, cp.score_type
from apidb.phenotypescore cp
 , apidbtuning.geneattributes ga
 , study.protocolappnode pan
 , study.studylink sl
 , study.study ps
 , study.study i
 , sres.externaldatabaserelease r
 , sres.externaldatabase d
 , apidbtuning.profilesetdisplayinfo psdi
 , apidbtuning.datasetnametaxon dnt
 , apidbtuning.profile p
 , apidbtuning.geneGroupProfile ggp
where ga.na_feature_id = cp.na_feature_id
and p.source_id = ga.source_id
and d.name = p.dataset_name
and cp.protocol_app_node_id = pan.protocol_app_node_id
and pan.protocol_app_node_id = sl.protocol_app_node_id
and sl.study_id = ps.study_id
and ps.investigation_id = i.study_id
and i.external_database_release_id = r.external_database_release_id
and r.external_database_id = d.external_database_id
and ps.name = psdi.profile_set_name (+)
and d.name = dnt.name
and ggp.profile_graph_id = ga.source_id
and d.name in ('pfal3D7_phenotype_pB_mutagenesis_MIS_MFS_RSRC',
               'pknoH_phenotype_piggyBac_mutagenesis_HME_MIS_OIS_RSRC',
               'pknoA1H1_phenotype_piggyBac_mutagenesis_MIS_MFS_RSRC')
UNION
select ggp.source_id
, ggp.profile_graph_id AS gene
, ga.project_id
, dnt.dataset_presenter_id as dataset_id
, nvl(psdi.profile_set_display_name, ps.name) as profile_set_display_name
, pan.name as sample_name
, cast(round(cp.relative_growth_rate, 2) as  VARCHAR(10))   as phenotype_score
, 'relative growth rate' as score_type
from apidb.phenotypegrowthrate cp
 , apidbtuning.geneattributes ga
 , study.protocolappnode pan
 , study.studylink sl
 , study.study ps
 , study.study i
 , sres.externaldatabaserelease r
 , sres.externaldatabase d
 , apidbtuning.profilesetdisplayinfo psdi
 , apidbtuning.datasetnametaxon dnt
 , apidbtuning.profile p
 , apidbtuning.geneGroupProfile ggp
where ga.na_feature_id = cp.na_feature_id
and p.source_id = ga.source_id
and d.name = p.dataset_name
and cp.protocol_app_node_id = pan.protocol_app_node_id
and pan.protocol_app_node_id = sl.protocol_app_node_id
and sl.study_id = ps.study_id
and ps.investigation_id = i.study_id
and i.external_database_release_id = r.external_database_release_id
and r.external_database_id = d.external_database_id
and ps.name = psdi.profile_set_name (+)
and d.name = dnt.name
and ggp.profile_graph_id = ga.source_id
             ]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="PhenotypeScore" includeProjects="EuPathDB,UniDB,PlasmoDB,FungiDB,TriTrypDB" isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="score"/>
            <column name="score_type"/>
            <column name="name"/>
            <sql>
            <![CDATA[
SELECT ga.source_id
     , ga.project_id
     , ps.score_type
     , CASE WHEN ps.score_type = 'mutability in CDS'
            THEN CASE when score = 0 then 'mutable' when score = 1 then 'nonmutable' else 'not_determined' end
            ELSE cast(ps.score as  VARCHAR(10)) END score
     , pan.name
FROM apidbtuning.geneattributes ga
   , apidb.phenotypescore ps
   , study.protocolappnode pan
WHERE ps.protocol_app_node_id = pan.protocol_app_node_id
AND ps.na_feature_id = ga.na_feature_id
ORDER BY pan.name
             ]]>
            </sql>
          </sqlQuery>




       <sqlQuery name="FungiVBOrgLinkoutsTable" includeProjects="FungiDB,VectorBase,UniDB">
            <column name="source_id" />
            <column name="project_id"/>
            <column name="link" />
            <column name="dataset" />
            <sql>
              <![CDATA[
SELECT '@PROJECT_ID@' AS project_id, source_id, link, dataset
FROM (
SELECT 
  ga.source_id,  --from link to self
'<a href = "' || REPLACE(edr.id_url, 'EXTERNAL_ID_HERE', db.primary_identifier) || '" target="_blank">' || ga.source_id || '</a>' AS link,
  edd.dataset_presenter_display_name AS dataset
FROM
  sres.dbref db
, DOTS.dbrefnafeature dbna
, apidbtuning.ExternalDbDatasetPresenter edd
, sres.externaldatabaserelease edr
, apidbtuning.geneattributes ga
WHERE
  db.external_database_release_id = edd.external_database_release_id
  AND edr.external_database_release_id = edd.external_database_release_id
  AND dbna.db_ref_id = db.db_ref_id
  AND ga.na_feature_id = dbna.na_feature_id
  AND ga.organism IN ('Candida albicans SC5314', 'Saccharomyces cerevisiae S288C','Schizosaccharomyces pombe 972h-')
  AND edd.dataset_presenter_display_name  IN ('SGD','PomBase','CGD')
 UNION
SELECT -- from orthologs
og.source_id,
'<a href = "' || REPLACE(edr.id_url, 'EXTERNAL_ID_HERE', db.primary_identifier) || '" target="_blank">' || og.ortho_gene_source_id || '</a>' AS link,
  edd.dataset_presenter_display_name AS dataset 
FROM
  sres.DbRef db
, dots.DbRefNaFeature dbna
, apidbTuning.ExternalDbDatasetPresenter edd
, sres.ExternalDatabaseRelease edr
, apidbTuning.OrthologousTranscripts og
WHERE
  db.external_database_release_id = edd.external_database_release_id
  AND edr.external_database_release_id = edd.external_database_release_id
  AND dbna.db_ref_id = db.db_ref_id
  AND og.ortho_na_feature_id = dbna.na_feature_id
  AND og.source_id != og.ortho_gene_source_id
  AND og.ortho_organism in ('Candida albicans SC5314', 'Saccharomyces cerevisiae S288C','Schizosaccharomyces pombe 972h-')
  AND edd.dataset_presenter_display_name  IN ('SGD','PomBase','CGD')
UNION
SELECT
  og.ortho_gene_source_id as source_id,
  '<a href="https://flybase.org/reports/' || ref.primary_identifier || '.html" target="_blank">' || og.source_id || '</a>' AS link,
  'FlyBase' AS dataset 
FROM
  sres.externalDatabaseRelease edr
, sres.externalDatabase ed
, sres.dbref ref
, dots.dbrefNaFeature dbna
, apidbtuning.GeneAttributes ga
, apidbTuning.OrthologousTranscripts og
WHERE edr.external_database_id = ed.external_database_id
  AND lower(ed.name) like 'flybase%_gene_id'
  AND ref.external_database_release_id = edr.external_database_release_id
  AND dbna.db_ref_id = ref.db_ref_id
  AND ga.na_feature_id = dbna.na_feature_id
  AND ga.organism IN ('Drosophila melanogaster iso-1') 
  AND ga.source_id = og.source_id
)
         ]]>
            </sql>
        </sqlQuery>

    <sqlQuery name="AlphaFoldLinkoutsTable" excludeProjects="EuPathDB">
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="uniprot_id"/>
        <column name="first"/>
        <column name="last"/>
        <column name="prediction_length"/>
        <column name="uniprot_source"/>
        <column name="is_visualization"/>

        <sql>
          <![CDATA[
            SELECT DISTINCT ga.project_id
            , ga.source_id
            , af.uniprot_id
            , af.first_residue_index as first
            , af.last_residue_index as last
            , (af.last_residue_index - af.first_residue_index + 1 ) as prediction_length
            , upg.rank
            , CASE WHEN upg.rank = 1 THEN 'From Annotation'
                WHEN upg.rank = 2 THEN 'SWISSPROT direct link'
                WHEN upg.rank = 3 THEN 'TrEMBL direct link'
                WHEN upg.rank = 4 THEN 'SWISSPROT by sequence similarity'
                WHEN upg.rank = 5 THEN 'TrEMBL by sequence similarity' END as uniprot_source
            , CASE WHEN afg.uniprot_id IS NULL THEN 'No' ELSE 'Yes' END AS is_visualization
            FROM apidbtuning.geneattributes ga
            , apidb.alphafold af
            , apidbtuning.alphafoldgenes afg
            , apidbtuning.uniprotgenes upg
            WHERE ga.source_id = upg.gene_source_id
            AND upg.primary_identifier = af.uniprot_id
            AND af.uniprot_id = afg.uniprot_id (+)
            AND ga.source_id = afg.gene_source_id (+)
            ORDER BY is_visualization desc, upg.rank, prediction_length desc
        ]]>
      </sql>
    </sqlQuery>


   </querySet>
</wdkModel>
