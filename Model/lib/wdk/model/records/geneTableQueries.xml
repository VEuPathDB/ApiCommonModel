<wdkModel>

  <!-- notes

    - so far this is only a unification of p and t.  crypto seemed pretty different

    - the pathways query is diff between t and p, but shouldn't be.  one is wrong.

  -->


  <querySet name="GeneTables" queryType="table" isCacheable="false">

    <defaultTestParamValues includeProjects="PlasmoDB">
      <paramValue name="source_id">%%defaultGene%%</paramValue>
      <paramValue name="project_id">PlasmoDB</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="ToxoDB">
      <paramValue name="source_id">TGME49_221330</paramValue>
      <paramValue name="project_id">ToxoDB</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="CryptoDB">
      <paramValue name="source_id">cgd3_1400</paramValue>
      <paramValue name="project_id">CryptoDB</paramValue>
    </defaultTestParamValues>
    <defaultTestParamValues includeProjects="GiardiaDB">
      <paramValue name="source_id">GL50803_112048</paramValue>
      <paramValue name="project_id">GiardiaDB</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="TrichDB">
      <paramValue name="source_id">TVAG_386080</paramValue>
      <paramValue name="project_id">TrichDB</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="TriTrypDB">
      <paramValue name="source_id">%%defaultGene%%</paramValue>
      <paramValue name="project_id">TriTrypDB</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="AmoebaDB">
      <paramValue name="source_id">EDI_244000</paramValue>
      <paramValue name="project_id">AmoebaDB</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="MicrosporidiaDB">
      <paramValue name="source_id">ECU07_1760</paramValue>
      <paramValue name="project_id">MicrosporidiaDB</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="PiroplasmaDB">
      <paramValue name="source_id">BBOV_IV003850</paramValue>
      <paramValue name="project_id">PiroplasmaDB</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="HostDB">
      <paramValue name="source_id">%%defaultGene%%</paramValue>
      <paramValue name="project_id">HostDB</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="FungiDB,SchistoDB,UniDB,VectorBase,InitDB">
      <paramValue name="source_id"></paramValue>
      <paramValue name="project_id"></paramValue>
    </defaultTestParamValues>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Subcellular Location Gene Lists -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="SubcelluarLocationGeneLists">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="gene_list"/>
      <column name="dataset_presenter_id"/>
      <column name="dataset_presenter_display_name"/>
      <sql>
        <![CDATA[
        select distinct ga.source_id
        , ga.project_id
                   , replace(pan.name,' (subcellular_localization)','') as gene_list
                    , ed.dataset_presenter_id
                    , ed.DATASET_PRESENTER_DISPLAY_NAME
              from apidb.nafeaturelist fl
          , webready.GeneAttributes ga
          , study.studylink sl
          , study.protocolappnode pan
          , study.study s
          , APIDBTUNING.EXTERNALDBDATASETPRESENTER ed
        where sl.protocol_app_node_id = fl.protocol_app_node_id
        and sl.study_id=  s.study_id
        and fl.na_feature_id = ga.na_feature_id
        and sl.PROTOCOL_APP_NODE_ID = pan.PROTOCOL_APP_NODE_ID
        and s.EXTERNAL_DATABASE_RELEASE_ID = ed.EXTERNAL_DATABASE_RELEASE_ID
        and ed.dataset_presenter_name like '%subcellular_localization_%'
         ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Function Prediction Gene Lists -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="FunctionPredictionGeneLists">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="gene_list"/>
      <column name="dataset_presenter_id"/>
      <column name="dataset_presenter_display_name"/>
      <sql>
        <![CDATA[
        select distinct ga.source_id
        , ga.project_id
                   , replace(pan.name,' (functional_data)','') as gene_list
                    , ed.dataset_presenter_id
                    , ed.DATASET_PRESENTER_DISPLAY_NAME
              from apidb.nafeaturelist fl
          , webready.GeneAttributes ga
          , study.studylink sl
          , study.protocolappnode pan
          , study.study s
          , APIDBTUNING.EXTERNALDBDATASETPRESENTER ed
        where sl.protocol_app_node_id = fl.protocol_app_node_id
        and sl.study_id=  s.study_id
        and fl.na_feature_id = ga.na_feature_id
        and sl.PROTOCOL_APP_NODE_ID = pan.PROTOCOL_APP_NODE_ID
        and s.EXTERNAL_DATABASE_RELEASE_ID = ed.EXTERNAL_DATABASE_RELEASE_ID
        and ed.dataset_presenter_name like '%functional_data_%'
         ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- protein source ids -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="ProteinSourceIDs">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="protein_source_id"/>
      <sql>
        <![CDATA[
          SELECT ta.gene_source_id as source_id,ta.project_id, ta.protein_source_id
          FROM webready.TranscriptAttributes ta
          WHERE protein_source_id IS NOT NULL
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="StringDBProtein">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="protein_source_id"/>
      <column name="jsonString"/>

      <sql>
        <![CDATA[
          WITH hasOverlap AS (
            SELECT DISTINCT count(*) AS ct
            FROM webready.TaxonSpecies ts, webready.GeneAttributes ga, sres.taxon t, APIDBTUNING.stringdb ss
            WHERE ga.taxon_id = ts.taxon_id
              AND ts.SPECIES_TAXON_ID = t.taxon_id
              AND ss.ncbi_tax_id = t.ncbi_tax_id
          )
          SELECT ta.gene_source_id AS source_id
            , ta.project_id
            , ta.protein_source_id
            , (
              SELECT '['
                       || string_agg('[' || ncbi_tax_id || ', "' || official_name_ncbi || '"]', ', ' ORDER BY official_name_ncbi)
                       || ']' AS json
              FROM apidbTuning.Stringdb
              WHERE is_eupath_organism = 1
            ) AS jsonString
          FROM webready.TranscriptAttributes ta
          WHERE ( SELECT ct FROM hasOverlap ) > 0
            AND protein_source_id IS NOT NULL
         ]]>
      </sql>
    </sqlQuery>



    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Gene Transcripts -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="GeneTranscripts">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="transcript_id"/>
      <column name="exon_count"/>
      <column name="length"/>
      <column name="protein_length"/>
      <column name="transcript_type"/>
      <sql>
        <!-- transcripts must be ordered alphabetically, as expected by client -->
        <![CDATA[
          SELECT gene_source_id as source_id
               , source_id as transcript_id
               , project_id as project_id
               , exon_count
               , length
               , CASE WHEN (transcript_type LIKE 'pseudogen%' OR gene_type LIKE 'pseudogen%' OR so_term_name LIKE 'pseudogen%') THEN NULL ELSE protein_length END AS protein_length
               , CASE WHEN (transcript_type LIKE 'pseudogen%' OR gene_type LIKE 'pseudogen%' OR so_term_name LIKE 'pseudogen%') THEN 'pseudogenic_transcript'
                      ELSE transcript_type END AS transcript_type
               --, so_term_name
               --, transcript_product
          FROM webready.TranscriptAttributes
          ORDER by source_id
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Gene Model -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <!-- this query is used by gene dump -->
       <!-- TODO:  Need to figure out how to get rid of macro here -->
       <sqlQuery name="GeneModelDump" isCacheable="false">
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="type"/>
            <column name="sequence_id"/>
            <column name="gm_start"/>
            <column name="gm_end"/>
            <column name="strand"/>
            <sql>
              <![CDATA[
                SELECT source_id
                  , '@PROJECT_ID@' AS project_id
                  , sequence_id
                  , gm_start
                  , gm_end
                  , type
                  , CASE is_reversed WHEN 0 THEN '+' WHEN 1 THEN '-' ELSE '.' END strand
                  , transcript_ids
                FROM webready.GeneModelDump
                 -- NOTE:  The order here is very important!  changing this will impact the SRT tool
                ORDER BY CASE WHEN is_reversed = 1 THEN -1 * gm_start ELSE gm_start END
              ]]>
            </sql>
        </sqlQuery>

    <!-- TODO:  need to check what happened to this table.  Should be like transcriptgenomicsequencesplit
           <sqlQuery name="GeneModelSequence" isCacheable="false" excludeProjects="EuPathDB">
                <testParamValues includeProjects="MicrosporidiaDB">
                   <paramValue name="source_id">EBI_27499</paramValue>
                   <paramValue name="project_id">MicrosporidiaDB</paramValue>
                </testParamValues>

                <column name="source_id"/>
                <column name="gene_source_id"/>
                <column name="project_id"/>
                <column name="sequence"/>
                <sql>
                    select source_id, '@PROJECT_ID@' AS project_id,
                       gene_genomic_sequence as sequence
                    FROM apidb.GENEGENOMICSEQUENCE_SPLIT
                    order by start_min
                </sql>
            </sqlQuery>
    -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Tables for protein attributes  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


    <sqlQuery name="ECNumbers" isCacheable="false" >
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="transcript_ids"/>
      <column name="ec_number"/>
      <column name="ec_description"/>
      <column name="ec_source"/>
      <column name="expasy_url"/>

      <sql>
        <![CDATA[
          SELECT ta.gene_source_id AS source_id
            , ta.project_id
            , string_agg(ta.source_id, ', ' ORDER BY ta.source_id) AS transcript_ids
            , ec.ec_number
            , ec.description AS ec_description
            , CASE asec.evidence_code
                WHEN 'OrthoMCLDerived' THEN 'computationally inferred from orthology'
                WHEN 'gb' THEN 'GenBank'
                WHEN 'Hagai' THEN 'MPMP'
                ELSE evidence_code
            END AS ec_source
            , 'https://enzyme.expasy.org/EC/' || ec.ec_number as expasy_url
          FROM
            webready.TranscriptAttributes ta
            , sres.enzymeclass ec
            , dots.aasequenceenzymeclass asec
          WHERE ta.aa_sequence_id = asec.aa_sequence_id
            AND asec.enzyme_class_id = ec.enzyme_class_id
            AND ((ta.orthomcl_name IS NULL AND asec.evidence_code != 'OrthoMCLDerived') OR ta.orthomcl_name IS NOT NULL)
          GROUP BY ta.gene_source_id
              , ta.project_id
              , ec.ec_number
              , ec.description
              , asec.evidence_code
              , ec.ec_number_1
              , ec.ec_number_2
              , ec.ec_number_3
              , ec.ec_number_4
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="ECNumbersInferred" isCacheable="false" >
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="ec_number"/>
      <column name="length_score"/>
      <column name="blast_score"/>
      <column name="domain_score"/>
      <column name="num_protein_with_ec"/>
      <column name="num_protein_in_group"/>
      <column name="num_genera_with_ec"/>
      <column name="num_genera_in_group"/>

      <sql>
        <![CDATA[
          SELECT ta.gene_source_id AS source_id, ta.project_id, ec.ec_number,
              asec.length_score, asec.blast_score, asec.domain_score, asec.num_protein_with_ec,
              asec.num_protein_in_group, asec.num_genera_with_ec,asec.num_genera_in_group
          FROM webready.TranscriptAttributes ta, sres.enzymeclass ec, dots.aasequenceenzymeclass asec
          WHERE ta.aa_sequence_id = asec.aa_sequence_id AND asec.enzyme_class_id = ec.enzyme_class_id
            AND asec.evidence_code = 'OrthoMCLDerived'
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GO terms -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GOTerms" isCacheable="false" >
      <column name="source_id"/>
      <column name="transcript_ids"/>
      <column name="project_id"/>
      <column name="go_id"/>
      <column name="is_not"/>
      <column name="go_term_name"/>
      <column name="ontology"/>
      <column name="source"/>
      <column name="evidence_code"/>
      <column name="reference"/>
      <column name="evidence_code_parameter"/>
      <column name="sort_key"/>
      <sql>
        <![CDATA[
          SELECT source_id, project_id, go_id,  transcript_ids, is_not, go_term_name,
                 ontology, source, evidence_code, reference, evidence_code_parameter, sort_key
          FROM webready.GeneGoTable
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GOSlim" isCacheable="false" >
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="ontology"/>
      <column name="go_id"/>
      <column name="is_not"/>
      <column name="go_term_name"/>
      <column name="slim_go_id"/>
      <column name="slim_go_term_name"/>
      <column name=""/>
      <sql>
        <![CDATA[
          SELECT goslim.*, ga.project_id
          FROM
            (
              SELECT go_term.source_id
                , go_term.ontology
                , REPLACE(go_term.go_id, 'GO_', 'GO:') AS go_id
                , go_term.go_term_name
                , REPLACE(go_slim.slim_go_id, 'GO_', 'GO:') AS slim_go_id
                , substr(string_agg(go_term.is_not, ''), 1, 10) AS is_not
                , go_slim.slim_go_term_name
              FROM (
                  SELECT DISTINCT
                    gene_source_id AS source_id
                    , ontology
                    , go_id
                    , go_term_id
                    , go_term_name
                    , is_not
                  FROM webready.GeneGoTerms
                ) go_term
                LEFT JOIN (
                  SELECT gsl.go_term_id, ot.source_id AS slim_go_id, ot.name AS slim_go_term_name
                  FROM apidbTuning.GoSubsetLeaf gsl, sres.OntologyTerm ot
                  WHERE gsl.go_subset_term = 'goslim_generic'
                    AND gsl.subset_leaf_term_id = ot.ontology_term_id
                ) go_slim
                  ON go_term.go_term_id = go_slim.go_term_id
              GROUP BY source_id, ontology, go_id, go_term_name, slim_go_id, slim_go_term_name
            ) goslim
            , webready.GeneAttributes ga
          WHERE goslim.source_id = ga.source_id
          ORDER BY goslim.source_id, goslim.ontology, goslim.go_id
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Expression Graphs -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ExpressionGraphs" excludeProjects="EuPathDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="project_id_url" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="genus_species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
            <column name="has_meta_data"/>
            <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="paralog_number"/>
            <column name="template"/>

      <!--don't show multiple isolates on record page in VB-->
      <sqlParamValue name="geneGroupJoin" excludeProjects="VectorBase,EuPathDB"></sqlParamValue>
      <sqlParamValue name="geneGroupJoin" includeProjects="VectorBase">AND psgene.source_id = psgene.profile_graph_id</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT g.*
            , CASE '@PROJECT_ID@' WHEN 'UniDB' THEN 'EuPathDB' ELSE g.project_id END as project_id_url
            , CASE lower(is_graph_custom) WHEN 'false' THEN 1 ELSE 0 END as template
            , SPLIT_PART(graph_ids, ',', 1) AS default_graph_id
            , CASE WHEN graph_ids IS NULL THEN 0 ELSE 1 END AS has_graph_data
            , dpr.SUMMARY , dpr.display_name, dpr.description
            , CASE WHEN g.pmids IS NULL THEN dpr.short_attribution ELSE
                    '<a href="http://www.ncbi.nlm.nih.gov/pubmed/' || g.pmids || '">'|| dpr.short_attribution ||'</a>'
              END AS short_attribution
          FROM apidbtuning.datasetpresenter dpr,
            ( SELECT ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species,
                graph_descrip.dataset as dataset_name,
                string_agg(psgene.profile_graph_id, ',' ORDER BY ga.source_id) AS graph_ids,
                tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
                'FALSE' has_meta_data, '' as meta_data_categories,
                graph_descrip.*, dp.dataset_presenter_id as dataset_id,
                string_agg(pub.pmid, ',') AS pmids,
                CASE lower(dp.subtype)
                  WHEN'rnaseq' THEN 'RNA-Seq'
                  WHEN'array' THEN 'array'
                  WHEN'sage' THEN 'SAGE'
                  WHEN'rtpcr' THEN 'RT-PCR'
                  ELSE '' END as assay_type,
                ga.paralog_number
              from webready.GeneAttributes ga,
                APIDBTUNING.datasetnametaxon dsnt,
                apidbtuning.datasetPresenter dp
                  LEFT JOIN apidbtuning.datasetPublication pub ON dp.dataset_presenter_id = pub.dataset_presenter_id,
                sres.taxonname tn,
                webready.TaxonSpecies ts,
                sres.taxonname sn,
                apidbtuning.geneGroupProfile psgene,
                (  SELECT '' as dataset, '' as module,
                     '' as x_axis, '' y_axis,  '' as is_graph_custom,
                     1 as order_num
                  -- TEMPLATE_ANCHOR genePageGraphDescriptions
                  -- TEMPLATE_ANCHOR microarrayGraphDescriptions
                ) graph_descrip
              WHERE ga.source_id = psgene.source_id
                &&geneGroupJoin&&
                AND psgene.dataset_name = dsnt.name
                AND dsnt.dataset_presenter_id = dp.dataset_presenter_id
                AND graph_descrip.dataset = dp.name
                AND dsnt.taxon_id = tn.taxon_id
                AND tn.name_class = 'scientific name'
                AND dsnt.taxon_id = ts.taxon_id
                AND ts.species_taxon_id = sn.taxon_id
                AND sn.name_class = 'scientific name'
                AND ga.genus_species = sn.name
                AND (dp.type = 'transcript_expression' or lower(dp.subtype) in ('array','rnaseq','rtpcr'))
              GROUP BY ga.source_id, ga.project_id, ga.organism, ga.genus_species, graph_descrip.dataset,
                tn.name, dp.dataset_presenter_id, module,x_axis,y_axis, is_graph_custom,order_num,
                dp.subtype,ga.paralog_number,dp.short_attribution
            ) g
          WHERE g.dataset = dpr.name
          ORDER BY g.order_num
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Protein Expression Graphs -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ProteinExpressionGraphs"
                 includeProjects="UniDB,AmoebaDB,FungiDB,GiardiaDB,HostDB,PiroplasmaDB,PlasmoDB,ToxoDB,TriTrypDB,TrichDB,VectorBase" >
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_229990</paramValue>
            </testParamValues>

      <column name="source_id" />
      <column name="project_id" />
      <column name="project_id_url" />
      <column name="graph_ids" />
      <column name="default_graph_id" />
      <column name="module" />
      <column name="genus_species" />
      <column name="mainOpen" />
      <column name="dataOpen" />
      <column name="display_name" />
      <column name="description" />
      <column name="x_axis" />
      <column name="y_axis" />
      <column name="has_graph_data"/>
      <column name="has_meta_data"/>
      <column name="meta_data_categories"/>
      <column name="dataset_name"/>
      <column name="dataset_id"/>
      <column name="is_graph_custom"/>
      <column name="summary"/>
      <column name="short_attribution"/>
      <column name="assay_type"/>
      <column name="template"/>
      <sql>
        <![CDATA[
          SELECT g.*
            , CASE '@PROJECT_ID@' WHEN 'UniDB' THEN 'EuPathDB' ELSE g.project_id END AS project_id_url
            , CASE lower(is_graph_custom) WHEN 'false' THEN 1 ELSE 0 END AS template
            , SPLIT_PART(graph_ids, ',', 1) AS default_graph_id
          FROM
            (
              SELECT ga.source_id
                , ga.project_id
                , ga.organism AS gene_organism
                , ga.genus_species
                , graph_descrip.dataset AS dataset_name
                , psgene.profile_graph_id AS graph_ids
                , CASE WHEN psgene.profile_graph_id IS NULL THEN 0 ELSE 1 END AS has_graph_data
                , tn.name AS graph_organism
                , 'TRUE' AS mainOpen
                , 'FALSE' AS dataOpen
                , 'FALSE' has_meta_data
                , '' AS meta_data_categories
                , graph_descrip.*
                , dp.summary
                , dp.short_attribution
                , dp.display_name
                , dp.description
                , 'quantitative proteomics' AS assay_type
                , dp.dataset_presenter_id AS dataset_id
              FROM
                webready.GeneAttributes ga
                , APIDBTUNING.datasetnametaxon dsnt
                , apidbtuning.datasetPresenter dp
                , sres.taxonname tn
                , webready.TaxonSpecies ts
                , sres.taxonname sn
                , apidbtuning.geneGroupProfile psgene
                , (
                SELECT '' AS dataset
                  , '' AS module
                  , '' AS x_axis
                  , '' y_axis
                  , '' AS is_graph_custom
                  , 1 AS order_num
                  -- TEMPLATE_ANCHOR proteomicsGraphDescriptions
                UNION
                SELECT 'tbruTREU927_quantitative_massSpec_Guther_glycosomal_proteome_RSRC' AS dataset
                  , 'Guther::GlycosomeProteome' AS module
                  , 'Confidence Group' AS x_axis
                  , 'Log2(H/L)' AS y_axis
                  , 'true' AS is_graph_custom
                  , 901 AS order_num
              ) graph_descrip
              WHERE ga.source_id = psgene.source_id
                AND psgene.dataset_name = dsnt.name
                AND dsnt.dataset_presenter_id = dp.dataset_presenter_id
                AND graph_descrip.dataset = dp.name
                AND dsnt.taxon_id = tn.taxon_id
                AND tn.name_class = 'scientific name'
                AND dsnt.taxon_id = ts.taxon_id
                AND ts.species_taxon_id = sn.taxon_id
                AND sn.name_class = 'scientific name'
                AND ga.genus_species = sn.name
                AND coalesce(display_category, dp.category) = 'Protein expression'
                AND dp.subtype LIKE 'quantitative%'
            ) g
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Phenotype Graphs -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="PhenotypeGraphs" includeProjects="TriTrypDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="project_id_url" />
      <column name="graph_ids" />
      <column name="default_graph_id" />
      <column name="module" />
      <column name="species" />
      <column name="mainOpen" />
      <column name="dataOpen" />
      <column name="display_name" />
      <column name="description" />
      <column name="x_axis" />
      <column name="y_axis" />
      <column name="has_graph_data"/>
      <column name="has_meta_data"/>
      <column name="meta_data_categories"/>
      <column name="dataset_name"/>
      <column name="dataset_id"/>
      <column name="is_graph_custom"/>
      <column name="summary"/>
      <column name="short_attribution"/>
      <column name="assay_type"/>
      <column name="template"/>
      <sql>
        <![CDATA[
          SELECT g.*
            , CASE '@PROJECT_ID@' WHEN 'UniDB' THEN 'EuPathDB' ELSE g.project_id END AS project_id_url
            , CASE lower(is_graph_custom) WHEN 'false' THEN 1 ELSE 0 END AS template
            , SPLIT_PART(graph_ids, ',', 1) AS default_graph_id
          FROM
            (
              SELECT ga.source_id
                , ga.project_id
                , ga.organism AS gene_organism
                , ga.genus_species
                , graph_descrip.dataset AS dataset_name
                , psgene.profile_graph_id AS graph_ids
                , CASE WHEN psgene.profile_graph_id IS NULL THEN 0 ELSE 1 END AS has_graph_data
                , tn.name AS graph_organism
                , 'TRUE' AS mainOpen
                , 'FALSE' AS dataOpen
                , 'FALSE' has_meta_data
                , '' AS meta_data_categories
                , graph_descrip.*
                , dp.summary
                , dp.short_attribution
                , dp.display_name
                , dp.description
                , 'RNA-Seq' AS assay_type
                , dp.dataset_presenter_id AS dataset_id
              FROM
                webready.GeneAttributes ga
                , APIDBTUNING.datasetnametaxon dsnt
                , apidbtuning.datasetPresenter dp
                , sres.taxonname tn
                , webready.TaxonSpecies ts
                , sres.taxonname sn
                , apidbtuning.geneGroupProfile psgene
                , (
                SELECT 'tbruTREU927_RNAi_Horn_rnaSeq_RSRC' AS dataset
                  , 'RNASeq' AS module
                  , 'Rank of each gene by its ratio' AS x_axis
                  , 'Ratio of TPM values for the sample indicated compared to the uninduced control.<br>
                     This ratio is proportional to the fitness observed upon RNAi-induced knockdown.<br>
                     All ratios are calculated from reads mapping uniquely to the CDS of each gene.<br><br>
                     The particular samples and ratios are indicated in the gray bar above each graph:<br>
                     - No_Tet: uninduced control<br>
                     - BFD3: bloodstream-form cells grown for 3 days<br>
                     - BFD6: bloodstream-form cells grown for 6 days<br>
                     - PF: insect/procyclic-form cells<br>
                     - DIF: cells induced throughout growth as bloodstream forms, differentiation and growth as procyclic forms.<br><br>
                     Please note that values in the data table are the TPM values for each sample, while the plot shows the ratio of the TPM value for the indicated sample compared to the uninduced (NoTet) control.<br><br>' AS y_axis
                  , 'false' AS is_graph_custom
                  , 1 AS order_num
              ) graph_descrip
              WHERE ga.source_id = psgene.source_id
                AND psgene.dataset_name = dsnt.name
                AND dsnt.dataset_presenter_id = dp.dataset_presenter_id
                AND graph_descrip.dataset = dp.name
                AND dsnt.taxon_id = tn.taxon_id
                AND tn.name_class = 'scientific name'
                AND dsnt.taxon_id = ts.taxon_id
                AND ts.species_taxon_id = sn.taxon_id
                AND sn.name_class = 'scientific name'
                AND dsnt.name NOT LIKE '%CDS%' -- TODO:  this is here for the horn dataset
                AND ga.genus_species = sn.name
            ) g
        ]]>
      </sql>
    </sqlQuery>




    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- UserDataset Graphs -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="UserDatasetsTranscriptomicsGraphsDataTable" isCacheable="false" excludeProjects="EuPathDB">
      <paramRef ref="InternalParams.user_id"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="dataset_id"/>
      <!--column name="profile_set_display_name"/-->
      <column name="sample_name"/>
      <column name="value"/>
      <column name="unit"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id, ga.project_id, ps.user_dataset_id as dataset_id, pan.name as sample_name, naf.value, ps.unit
          FROM webready.GeneAttributes ga
            , @VDI_CONTROL_SCHEMA@.availableUserDatasets da
            , @VDI_DATASETS_SCHEMA@.ud_profileset ps
            , @VDI_DATASETS_SCHEMA@.ud_protocolappnode pan
            , @VDI_DATASETS_SCHEMA@.ud_nafeatureexpression naf
          WHERE da.user_id = $$user_id$$
            and da.user_dataset_id = ps.user_dataset_id
            and ps.profile_set_id = pan.profile_set_id
            and pan.protocol_app_node_id = naf.PROTOCOL_APP_NODE_ID
            and naf.na_feature_id = ga.na_feature_id
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="UserDatasetsTranscriptomicsGraphs" excludeProjects="EuPathDB">
      <paramRef ref="InternalParams.user_id"/>
      <column name="source_id" />
      <column name="project_id" />
      <column name="project_id_url" />
      <column name="graph_ids" />
      <column name="default_graph_id" />
      <column name="module" />
      <column name="species" />
      <column name="mainOpen" />
      <column name="dataOpen" />
      <column name="display_name" />
      <column name="description" />
      <column name="x_axis" />
      <column name="y_axis" />
      <column name="has_graph_data"/>
      <column name="has_meta_data"/>
      <column name="meta_data_categories"/>
      <column name="dataset_name"/>
      <column name="dataset_id"/>
      <column name="is_graph_custom"/>
      <column name="summary"/>
      <column name="short_attribution"/>
      <column name="assay_type"/>
      <column name="template"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT
            g.*
            , CASE '@PROJECT_ID@' WHEN 'UniDB' THEN 'EuPathDB' ELSE g.project_id END AS project_id_url
            , CASE lower(is_graph_custom) WHEN 'false' THEN 1 ELSE 0 END AS template
            , SPLIT_PART(graph_ids, ',', 1) AS default_graph_id
          FROM
            (
              SELECT
                CASE ps.unit
                  WHEN 'TPM' THEN 'Transcript levels in TPM (transcripts per million).'
                  WHEN 'FPKM' THEN 'Transcript levels in FPKM (fragments per kilobase of exon model per million mapped reads).'
                END AS y_axis
                , ga.source_id
                , ga.project_id
                , ga.organism AS gene_organism
                , ga.genus_species
                , da.name AS dataset_name
                , ga.source_id AS graph_ids
                , CASE WHEN ga.source_id IS NULL THEN 0 ELSE 1 END AS has_graph_data
                , ga.organism AS graph_organism
                , 'TRUE' AS mainOpen
                , 'FALSE' AS dataOpen
                , 'FALSE' AS has_meta_data
                , '' AS meta_data_categories
                , graph_descrip.*
                , '' AS summary
                , '' AS short_attribution
                , da.name AS display_name
                , '' AS description
                , 'RNA-Seq' AS assay_type
                , da.user_dataset_id AS dataset_id
              FROM
                webready.GeneAttributes ga
                , @VDI_CONTROL_SCHEMA@.AvailableUserDatasets da
                ,  @VDI_DATASETS_SCHEMA@.UD_NAFEATUREEXPRESSION naf
                , @VDI_DATASETS_SCHEMA@.UD_PROTOCOLAPPNODE pan
                , @VDI_DATASETS_SCHEMA@.UD_PROFILESET ps
                , (
                  SELECT 'UserDatasets::RNASeq' AS module
                    , 'Stage/Sample' AS x_axis
                    , 'true' AS is_graph_custom
                    , 1 AS order_num
                ) graph_descrip
              WHERE ps.user_dataset_id = da.user_dataset_id
                AND da.user_id = $$user_id$$
                AND ps.profile_set_id = pan.profile_set_id
                AND pan.protocol_app_node_id = naf.protocol_app_node_id
                AND naf.na_feature_id = ga.na_feature_id
            ) g
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Host Response  Graphs -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="HostResponseGraphs" includeProjects="PlasmoDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="project_id_url" />
      <column name="graph_ids" />
      <column name="default_graph_id" />
      <column name="module" />
      <column name="genus_species" />
      <column name="mainOpen" />
      <column name="dataOpen" />
      <column name="display_name" />
      <column name="description" />
      <column name="x_axis" />
      <column name="y_axis" />
      <column name="has_graph_data"/>
      <column name="has_meta_data"/>
      <column name="meta_data_categories"/>
      <column name="dataset_name"/>
      <column name="dataset_id"/>
      <column name="is_graph_custom"/>
      <column name="summary"/>
      <column name="short_attribution"/>
      <column name="assay_type"/>
      <column name="template"/>
      <sql>
        <![CDATA[
          SELECT h.*, datapres.summary, datapres.description
          FROM
            (
              SELECT DISTINCT
                g.*
                , CASE '@PROJECT_ID@' WHEN 'UniDB' THEN 'EuPathDB' ELSE g.project_id END AS project_id_url
                , CASE lower(is_graph_custom) WHEN 'false' THEN 1 ELSE 0 END AS template
            , SPLIT_PART(graph_ids, ',', 1) AS default_graph_id
              FROM
                (
                  SELECT ga.source_id
                    , ga.project_id
                    , ga.organism AS gene_organism
                    , ga.genus_species
                    , graph_descrip.dataset AS dataset_name
                    , psgene.profile_graph_id AS graph_ids
                    , CASE WHEN psgene.profile_graph_id IS NULL THEN 0 ELSE 1 END AS has_graph_data
                    , tn.name AS graph_organism
                    , 'TRUE' AS mainOpen
                    , 'FALSE' AS dataOpen
                    , 'FALSE' has_meta_data
                    , '' AS meta_data_categories
                    , graph_descrip.*
                    , dp.short_attribution
                    , dp.display_name
                    , 'antibody microarray' AS assay_type
                    , dp.dataset_presenter_id AS dataset_id
                  FROM
                    webready.GeneAttributes ga
                    , APIDBTUNING.datasetnametaxon dsnt
                    , apidbtuning.datasetPresenter dp
                    , sres.taxonname tn
                    , webready.TaxonSpecies ts
                    , sres.taxonname sn
                    , apidbtuning.geneGroupProfile psgene
                    , (
                    SELECT '' AS dataset
                      , '' AS module
                      , '' AS x_axis
                      , '' y_axis
                      , '' AS is_graph_custom
                      , 1 AS order_num
                    -- TEMPLATE_ANCHOR antibodyArrayGraphDescriptions
                  ) graph_descrip
                  WHERE ga.source_id = psgene.source_id
                    AND psgene.dataset_name = dsnt.name
                    AND dsnt.dataset_presenter_id = dp.dataset_presenter_id
                    AND graph_descrip.dataset = dp.name
                    AND dsnt.taxon_id = tn.taxon_id
                    AND tn.name_class = 'scientific name'
                    AND dsnt.taxon_id = ts.taxon_id
                    AND ts.species_taxon_id = sn.taxon_id
                    AND sn.name_class = 'scientific name'
                    AND ga.genus_species = sn.name
                    AND lower(dp.subtype) = 'immune_response'
                ) g
            ) h
            , apidbtuning.datasetpresenter datapres
          WHERE datapres.name = h.dataset_name
        ]]>
      </sql>
    </sqlQuery>


        <!-- TODO:  need a tuning table here for Orthology Lookup (can't currently because of dblink)-->
       <sqlQuery name="EdaPhenotypeGraphs" includeProjects="ToxoDB,UniDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="project_id_url" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="plot_configs_json"/>
            <sql>

<![CDATA[ 
select g.*, decode('@PROJECT_ID@', 'UniDB', 'EuPathDB', g.project_id) as project_id_url, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
        select ga.source_id, ga.project_id,
             ga.organism as gene_organism, ga.genus_species ,
             psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name,
             dp.description, 'Phenotype' as assay_type, dp.dataset_presenter_id as dataset_id
      from webready.GeneAttributes ga,
           APIDBTUNING.datasetnametaxon dsnt,
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn,
           webready.TaxonSpecies ts,
           sres.taxonname sn,
           (WITH dataset_genes as (
               SELECT 'tgonGT1_crisprPhenotype_CrisprFunctionalProfiling_RSRC' AS dataset_name , string_value AS source_id
               FROM eda.ATTRIBUTEvalue_SB044A3A170_GNPD@eda av
               WHERE av.attribute_stable_id = 'VAR_bdc8e679'
               UNION
               SELECT 'tgonGT1_crisprPhenotype_CrisprScreen_RSRC' AS dataset_name , string_value AS source_id
               FROM eda.ATTRIBUTEvalue_sd4745ea297_GNPD@eda av
               WHERE av.attribute_stable_id = 'VAR_bdc8e679'
           )
           select distinct other_gene.source_id, p.dataset_name,
               this_gene.source_id as profile_graph_id
          from apidbtuning.OrthologousTranscripts ot
             , dataset_genes p
             , webready.GeneAttributes this_gene
             , webready.GeneAttributes other_gene
          where p.source_id = ot.source_id
            and ot.source_id = this_gene.source_id
            and ot.ortho_gene_source_id = other_gene.source_id
            and this_gene.species = other_gene.species
            and ot.is_syntenic = 1
        union
          select ga.source_id, p.dataset_name, p.source_id as profile_graph_id
          from dataset_genes p, webready.GeneAttributes ga
          where p.source_id = ga.source_id
            ) psgene,
           (  SELECT dataset_name,
                     JSON_ARRAYAGG(
                       JSON_OBJECT(
                         'plotName' VALUE plot_name,
                         'plotType' VALUE plot_type,
                         'xAxisEntityId' VALUE x_axis_entity_id,
                         'yAxisEntityId' VALUE y_axis_entity_id,
                         'xAxisVariableId' VALUE x_axis_variable_id,
                         'yAxisVariableId' VALUE y_axis_variable_id,
                         'xMin' VALUE x_min,
                         'xMax' VALUE x_max,
                         'yMin' VALUE y_min,
                         'yMax' VALUE y_max
                        )
                       ) AS plot_configs_json
              FROM apidbtuning.edagenegraph
              GROUP BY dataset_name
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset_name = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and dp.type = 'phenotype'
) g
 ]]>
       </sql>

        </sqlQuery>


    <sqlQuery name="PhenotypeScoreGraphs" includeProjects="PlasmoDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="project_id_url" />
      <column name="graph_ids" />
      <column name="default_graph_id" />
      <column name="module" />
      <column name="species" />
      <column name="mainOpen" />
      <column name="dataOpen" />
      <column name="display_name" />
      <column name="description" />
      <column name="x_axis" />
      <column name="y_axis" />
      <column name="has_graph_data"/>
      <column name="has_meta_data"/>
      <column name="meta_data_categories"/>
      <column name="dataset_name"/>
      <column name="dataset_id"/>
      <column name="is_graph_custom"/>
      <column name="has_special_jbrowse"/>
      <column name="summary"/>
      <column name="short_attribution"/>
      <column name="assay_type"/>
      <column name="template"/>
      <sql>

        <![CDATA[
          SELECT g.*
            , CASE '@PROJECT_ID@' WHEN 'UniDB' THEN 'EuPathDB' ELSE g.project_id END AS project_id_url
            , CASE lower(is_graph_custom) WHEN 'false' THEN 1 ELSE 0 END AS template
            , SPLIT_PART(graph_ids, ',', 1) AS default_graph_id
          FROM
            (
              SELECT ga.source_id
                , ga.project_id
                , ga.organism AS gene_organism
                , ga.genus_species
                , graph_descrip.dataset AS dataset_name
                , psgene.profile_graph_id AS graph_ids
                , CASE WHEN psgene.profile_graph_id IS NULL THEN 0 ELSE 1 END AS has_graph_data
                , tn.name AS graph_organism
                , 'TRUE' AS mainOpen
                , 'FALSE' AS dataOpen
                , 'FALSE' has_meta_data
                , '' AS meta_data_categories
                , graph_descrip.*
                , dp.summary
                , dp.short_attribution
                , dp.display_name
                , dp.description
                , 'Phenotype' AS assay_type
                , dp.dataset_presenter_id AS dataset_id
              FROM
                webready.GeneAttributes ga
                , APIDBTUNING.datasetnametaxon dsnt
                , apidbtuning.datasetPresenter dp
                , sres.taxonname tn
                , webready.TaxonSpecies ts
                , sres.taxonname sn
                , apidbtuning.geneGroupProfile psgene
                , (
                    SELECT 'pfal3D7_phenotype_pB_mutagenesis_MIS_MFS_RSRC' AS dataset
                      , 'PhenotypeScore' AS module
                      , 'Genes ranked by score' AS x_axis
                      , 'MIS/MFS Scores' y_axis
                      , 'false' AS is_graph_custom
                      , 'true' AS has_special_jbrowse
                      , 1 AS order_num
                    UNION
                    SELECT 'pknoA1H1_phenotype_piggyBac_mutagenesis_MIS_MFS_RSRC' as dataset
                      , 'PhenotypeScore' as module
                      , 'Genes ranked by score' as x_axis
                      , 'MIS/MFS Scores' y_axis
                      ,  'false' as is_graph_custom
                      ,  'true' as has_special_jbrowse
                      , 1 as order_num
                    UNION
                    SELECT 'pberANKA_phenotype_Bushnell_functional_profiling_RSRC' AS dataset
                      , 'PhenotypeScore' AS module
                      , 'Genes ranked by score' AS x_axis
                      , 'Relative Growth Rate' y_axis
                      , 'false' AS is_graph_custom
                      , 'false' AS has_special_jbrowse
                      , 1 AS order_num
                    UNION
                    SELECT 'pknoH_phenotype_piggyBac_mutagenesis_HME_MIS_OIS_RSRC' as dataset
                      , 'PhenotypeScore' as module
                      , 'Genes ranked by score' as x_axis
                      , 'Relative Growth Rate' y_axis
                      , 'false' as is_graph_custom
                      , 'false' as has_special_jbrowse
                      , 1 as order_num
                  ) graph_descrip
              WHERE ga.source_id = psgene.source_id
                AND psgene.dataset_name = dsnt.name
                AND dsnt.dataset_presenter_id = dp.dataset_presenter_id
                AND graph_descrip.dataset = dp.name
                AND dsnt.taxon_id = tn.taxon_id
                AND tn.name_class = 'scientific name'
                AND dsnt.taxon_id = ts.taxon_id
                AND ts.species_taxon_id = sn.taxon_id
                AND sn.name_class = 'scientific name'
                AND ga.genus_species = sn.name
                AND dp.subtype = 'phenotype'
            ) g
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="NcrassaPhenotypeImages" includeProjects="FungiDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="uri"/>
      <column name="morphology"/>
      <column name="physiology"/>
      <column name="Sexual_Development"/>
      <column name="media"/>
      <column name="timepoint"/>
      <column name="location"/>
      <column name="temperature"/>
      <sql>
        <![CDATA[
          SELECT source_id, project_id, uri
            ,  string_agg(morphology, '<br/>' ORDER by morphology) AS morphology
            ,  string_agg(physiology, '<br/>' ORDER by physiology) AS physiology
            ,  string_agg(Sexual_Development, '<br/>' ORDER by Sexual_Development) AS Sexual_Development
            ,  string_agg(temperature, '<br/>' ORDER by temperature) AS temperature
            ,  string_agg(location, '<br/>' ORDER by location) AS location
            ,  string_agg(timepoint, '<br/>' ORDER by timepoint) AS timepoint
            ,  string_agg(media, '<br/>' ORDER by media) AS media
          FROM (
            SELECT ga.source_id, ga.project_id, pan.uri
              , CASE WHEN property = 'morphology' THEN value END AS morphology
              , CASE WHEN property = 'physiology' THEN value END AS physiology
              , CASE WHEN property = 'Sexual Development' THEN value END AS Sexual_Development
              , CASE WHEN property = 'temperature' THEN value END AS temperature
              , CASE WHEN property = 'location' THEN value END AS location
              , CASE WHEN property = 'timepoint' THEN value END AS timepoint
              , CASE WHEN property = 'media' THEN value END AS media
            FROM APIDB.NAFEATUREPHENOTYPE r, webready.GeneAttributes ga,
              study.protocolappnode pan
            WHERE pan.PROTOCOL_APP_NODE_ID = r.PROTOCOL_APP_NODE_ID
              AND r.NA_FEATURE_ID = ga.NA_FEATURE_ID
          ) pivot
          GROUP BY source_id, project_id, uri
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="TF_KO_PhenotypeImages" includeProjects="FungiDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="uri"/>
      <column name="physiology"/>
      <column name="Media"/>
      <column name="Timepoint"/>
      <column name="Temperature"/>
      <column name="Orthologs"/>
      <sql>

        <![CDATA[
          SELECT source_id, project_id, uri
            ,  string_agg(Temperature, '<br/>' ORDER by Temperature) AS Temperature
            ,  string_agg(Timepoint, '<br/>' ORDER by Timepoint) AS Timepoint
            ,  string_agg(Media, '<br/>' ORDER by Media) AS Media
            ,  string_agg(Orthologs, '<br/>' ORDER by Orthologs) AS Orthologs
          FROM (
            SELECT ga.source_id, ga.project_id, pan.uri
              , CASE WHEN property = 'Temperature' THEN value END AS Temperature
              , CASE WHEN property = 'Timepoint' THEN value END AS Timepoint
              , CASE WHEN property = 'Media' THEN value END AS Media
              , CASE WHEN property = 'Orthologs' THEN value END AS Orthologs
            FROM APIDB.NAFEATUREPHENOTYPE r, webready.GeneAttributes ga,
              study.protocolappnode pan
            WHERE pan.PROTOCOL_APP_NODE_ID = r.PROTOCOL_APP_NODE_ID
              AND r.NA_FEATURE_ID = ga.NA_FEATURE_ID
              AND pan.URI is not null
          ) pivot
          GROUP BY source_id, project_id, uri
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="NcrassaKOPhenotype" includeProjects="FungiDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="mating_type" />
      <column name="basal_hyphae_growth_rate"/>
      <column name="aerial_hyphae_height"/>
      <column name="conidia_number" />
      <column name="conidia_morphology" />
      <column name="protoperithecia_number" />
      <column name="protoperithecial_morphology" />
      <column name="perithecia_number" />
      <column name="perithecia_morphology" />
      <column name="ascospore_number" />
      <column name="ascospore_morphology" />
      <column name="pubmed" />
      <column name="pubmedid" />
      <sql>
        <![CDATA[
          SELECT ga.source_id
            , ga.project_id
            , pm.pubmed AS pubmedid
            , CASE WHEN pm.pubmed IS NULL THEN ''
                   ELSE '<a href="https://www.ncbi.nlm.nih.gov/pubmed/?term=' || pm.pubmed || '">' || pm.pubmed || '</a>'
              END AS pubmed
            , coalesce(pm.mating_type, 'N/A') AS mating_type
            , pm.basal_hyphae_growth_rate
            , pm.aerial_hyphae_height
            , pm.conidia_number
            , pm.conidia_morphology
            , pm.protoperithecia_number
            , pm.protoperithecial_morphology
            , pm.perithecia_number
            , pm.perithecia_morphology
            , pm.ascospore_number
            , pm.ascospore_morphology
          FROM apidb.phenotypemutants pm, webready.GeneAttributes ga
          WHERE ga.na_feature_id = pm.na_feature_id
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="PHI-basePhenotype" includeProjects="FungiDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="phientry" />
      <column name="comutatedgenes" />
      <column name="comments" />
      <column name="disease" />
      <column name="diseasemanifestation" />
      <column name="essentialgene" />
      <column name="experimentaltechnique" />
      <column name="geneinducer" />
      <column name="hostspecies" />
      <column name="hoststrain" />
      <column name="invitrogrowth" />
      <column name="matingdefect" />
      <column name="multiplemutations" />
      <column name="mutantphenotype" />
      <column name="pathogenspecies" />
      <column name="pathogenstrain" />
      <column name="penetrationdefect" />
      <column name="pmid" />
      <column name="postpenetrationdefect" />
      <column name="prepenetrationdefect" />
      <column name="sexualspores" />
      <column name="sporegermination" />
      <column name="tissue" />
      <column name="vegetativespores" />
      <sql>
        <![CDATA[
          SELECT source_id, project_id, uri
            , string_agg(phientry, '<br/>' ORDER BY phientry) AS phientry
            , string_agg(comutatedgenes, '<br/>' ORDER BY comutatedgenes) AS comutatedgenes
            , string_agg(comments, '<br/>' ORDER BY comments) AS comments
            , string_agg(disease, '<br/>' ORDER BY disease) AS disease
            , string_agg(diseasemanifestation, '<br/>' ORDER BY diseasemanifestation) AS diseasemanifestation
            , string_agg(essentialgene, '<br/>' ORDER BY essentialgene) AS essentialgene
            , string_agg(experimentaltechnique, '<br/>' ORDER BY experimentaltechnique) AS experimentaltechnique
            , string_agg(geneinducer, '<br/>' ORDER BY geneinducer) AS geneinducer
            , string_agg(hostspecies, '<br/>' ORDER BY hostspecies) AS hostspecies
            , string_agg(hoststrain, '<br/>' ORDER BY hoststrain) AS hoststrain
            , string_agg(invitrogrowth, '<br/>' ORDER BY invitrogrowth) AS invitrogrowth
            , string_agg(matingdefect, '<br/>' ORDER BY matingdefect) AS matingdefect
            , string_agg(multiplemutations, '<br/>' ORDER BY multiplemutations) AS multiplemutations
            , string_agg(mutantphenotype, '<br/>' ORDER BY mutantphenotype) AS mutantphenotype
            , string_agg(pathogenspecies, '<br/>' ORDER BY pathogenspecies) AS pathogenspecies
            , string_agg(pathogenstrain, '<br/>' ORDER BY pathogenstrain) AS pathogenstrain
            , string_agg(penetrationdefect, '<br/>' ORDER BY penetrationdefect) AS penetrationdefect
            , string_agg(pmid, '<br/>' ORDER BY pmid) AS pmid
            , string_agg(postpenetrationdefect, '<br/>' ORDER BY postpenetrationdefect) AS postpenetrationdefect
            , string_agg(prepenetrationdefect, '<br/>' ORDER BY prepenetrationdefect) AS prepenetrationdefect
            , string_agg(sexualspores, '<br/>' ORDER BY sexualspores) AS sexualspores
            , string_agg(sporegermination, '<br/>' ORDER BY sporegermination) AS sporegermination
            , string_agg(tissue, '<br/>' ORDER BY tissue) AS tissue
            , string_agg(vegetativespores, '<br/>' ORDER BY vegetativespores) AS vegetativespores
          FROM (
            SELECT ga.source_id, ga.project_id, pan.uri, r.protocol_app_node_id
              , CASE WHEN property = 'PHI-base entry' THEN value END AS phientry
              , CASE WHEN property = 'Co-mutated gene(s)'	THEN value END AS comutatedgenes
              , CASE WHEN property = 'Comments'	THEN value END AS comments
              , CASE WHEN property = 'Disease'	THEN value END AS disease
              , CASE WHEN property = 'Disease manifestation'	THEN value END AS diseasemanifestation
              , CASE WHEN property = 'Essential gene'	THEN value END AS essentialgene
              , CASE WHEN property = 'Experimental technique'	THEN value END AS experimentaltechnique
              , CASE WHEN property = 'Gene inducer'	THEN value END AS geneinducer
              , CASE WHEN property = 'Host species'	THEN value END AS hostspecies
              , CASE WHEN property = 'Host strain'	THEN value END AS hoststrain
              , CASE WHEN property = 'Invitro growth'	THEN value END AS invitrogrowth
              , CASE WHEN property = 'Mating defect'	THEN value END AS matingdefect
              , CASE WHEN property = 'Multiple mutations'	THEN value END AS multiplemutations
              , CASE WHEN property = 'Mutant Phenotype'	THEN value END AS mutantphenotype
              , CASE WHEN property = 'Pathogen species'	THEN value END AS pathogenspecies
              , CASE WHEN property = 'Pathogen strain'	THEN value END AS pathogenstrain
              , CASE WHEN property = 'Penetration defect'	THEN value END AS penetrationdefect
              , CASE WHEN property = 'PMID'	THEN value END AS pmid
              , CASE WHEN property = 'Postpenetration defect'	THEN value END AS postpenetrationdefect
              , CASE WHEN property = 'Prepenetration defect'	THEN value END AS prepenetrationdefect
              , CASE WHEN property = 'Sexual spores'	THEN value END AS sexualspores
              , CASE WHEN property = 'Spore germination'	THEN value END AS sporegermination
              , CASE WHEN property = 'Tissue'	THEN value END AS tissue
              , CASE WHEN property = 'Vegetative spores'	THEN value END AS vegetativespores
            FROM APIDB.NAFEATUREPHENOTYPE r, webready.GeneAttributes ga,
              study.protocolappnode pan, study.study s, study.studylink sl
            WHERE pan.PROTOCOL_APP_NODE_ID = r.PROTOCOL_APP_NODE_ID
              and s.study_id = sl.study_id
              and sl.protocol_app_node_id = pan.protocol_app_node_id
              and s.name LIKE '%PHI-base_curated_phenotype_NAFeaturePhenotypeGeneric_RSRC'
              AND r.NA_FEATURE_ID = ga.NA_FEATURE_ID
              AND property IN (
                  'PHI-base entry', 'Co-mutated gene(s)', 'Comments', 'Disease',
                  'Disease manifestation', 'Essential gene', 'Experimental technique',
                  'Gene inducer', 'Host species', 'Host strain', 'Invitro growth',
                  'Mating defect', 'Multiple mutations', 'Mutant Phenotype',
                  'Pathogen species', 'Pathogen strain', 'Penetration defect',
                  'PMID', 'Postpenetration defect', 'Prepenetration defect',
                  'Sexual spores', 'Spore germination', 'Tissue',
                  'Vegetative spores'
              )
          ) pivot
          GROUP BY source_id, project_id, uri
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="CGD_phenotypes" includeProjects="FungiDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="featuretype" />
      <column name="genename" />
      <column name="cgdid" />
      <column name="reference" />
      <column name="experimenttype" />
      <column name="mutanttype" />
      <column name="allele" />
      <column name="strainbackground" />
      <column name="phenotype" />
      <column name="chemical" />
      <column name="condition" />
      <column name="details" />
      <column name="reporter" />
      <column name="anatomicalstructure" />
      <column name="virulencemodel" />
      <column name="species" />
      <sql>
        <![CDATA[
           SELECT source_id, project_id, uri
            , STRING_AGG(featuretype, '<br/>' ORDER BY featuretype) AS featuretype
            , STRING_AGG(genename, '<br/>' ORDER BY genename) AS genename
            , STRING_AGG(cgdid, '<br/>' ORDER BY cgdid) AS cgdid
            , STRING_AGG(reference, '<br/>' ORDER BY reference) AS reference
            , STRING_AGG(experimenttype, '<br/>' ORDER BY experimenttype) AS experimenttype
            , STRING_AGG(mutanttype, '<br/>' ORDER BY mutanttype) AS mutanttype
            , STRING_AGG(allele, '<br/>' ORDER BY allele) AS allele
            , STRING_AGG(strainbackground, '<br/>' ORDER BY strainbackground) AS strainbackground
            , STRING_AGG(phenotype, '<br/>' ORDER BY phenotype) AS phenotype
            , STRING_AGG(chemical, '<br/>' ORDER BY chemical) AS chemical
            , STRING_AGG(condition, '<br/>' ORDER BY condition) AS condition
            , STRING_AGG(details, '<br/>' ORDER BY details) AS details
            , STRING_AGG(reporter, '<br/>' ORDER BY reporter) AS reporter
            , STRING_AGG(anatomicalstructure, '<br/>' ORDER BY anatomicalstructure) AS anatomicalstructure
            , STRING_AGG(virulencemodel, '<br/>' ORDER BY virulencemodel) AS virulencemodel
            , STRING_AGG(species, '<br/>' ORDER BY species) AS species
          FROM (
            SELECT ga.source_id, ga.project_id, pan.uri
              , CASE WHEN property = 'Feature Type' THEN value AS featuretype
              , CASE WHEN property = 'Gene Name' THEN value AS genename
              , CASE WHEN property = 'CGDID' THEN value AS cgdid
              , CASE WHEN property = 'Reference' THEN value AS reference
              , CASE WHEN property = 'Experiment Type' THEN value AS experimenttype
              , CASE WHEN property = 'Mutant Type' THEN value AS mutanttype
              , CASE WHEN property = 'Allele' THEN value AS allele
              , CASE WHEN property = 'Strain background' THEN value AS strainbackground
              , CASE WHEN property = 'Phenotype' THEN value AS phenotype
              , CASE WHEN property = 'Chemical' THEN value AS chemical
              , CASE WHEN property = 'Condition' THEN value AS condition
              , CASE WHEN property = 'Details' THEN value AS details
              , CASE WHEN property = 'Reporter' THEN value AS reporter
              , CASE WHEN property = 'Anatomical Structure' THEN value AS anatomicalstructure
              , CASE WHEN property = 'Virulence Model' THEN value AS virulencemodel
              , CASE WHEN property = 'Species' THEN value AS species
           from apidb.nafeaturephenotype r, webready.GeneAttributes ga,
                study.protocolappnode pan, study.study s , study.studyLink sl
           where pan.protocol_app_node_id = r.protocol_app_node_id
             and s.study_id = sl.study_id
             and sl.protocol_app_node_id = pan.protocol_app_node_id
             and s.name LIKE '%_CGD_pheno_NAFeaturePhenotypeGeneric_RSRC'
             and r.na_feature_id = ga.na_feature_id
             and property IN (
                 'Feature Type', 'Gene Name', 'CGDID', 'Reference', 'Experiment Type',
                     'Mutant Type', 'Allele', 'Strain background', 'Phenotype','Chemical',
                     'Condition', 'Details', 'Reporter', 'Anatomical Structure',
                     'Virulence Model', 'Species'
                 )
          ) pivot
          GROUP BY source_id, project_id, uri
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GrowthRatePhenotype" includeProjects="PlasmoDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="phenotype"/>
      <column name="relative_growth_rate"/>
      <column name="confidence"/>
      <column name="expected_variance"/>
      <column name="rgr_ci_low"/>
      <column name="rgr_ci_high"/>
      <column name="times_analyzed"/>
      <column name="construct"/>
      <column name="notes"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id, ga.project_id,
            r.phenotype,r.relative_growth_rate, r.confidence, r.expected_variance,r.rgr_ci_low, r.rgr_ci_high, r.times_analyzed, r.construct, r.notes
          FROM APIDB.phenotypegrowthrate r, webready.GeneAttributes ga
          WHERE ga.na_feature_id = r.na_feature_id
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="ApolloID" excludeProjects="PlasmoDB,GiardiaDB,MicrosporidiaDB,CryptoDB,FungiDB,TriTrypDB,HostDB">
      <column name="project_id" />
      <column name="source_id" />
      <column name="na_sequence_id" />
      <column name="mapping_start"/>
      <column name="mapping_end"/>
      <column name="seqid"/>
      <column name="apolloid"/>
      <sql>
        <![CDATA[
          SELECT distinct ga.project_id
            , ga.source_id
            , ga.na_sequence_id
            , ga.start_min - 1000 mapping_start
            , ga.end_max + 1000 mapping_end
            , pw.seqid
            , pw.apolloid
          FROM
            apidbtuning.ApolloUpdate pw
            , webready.GeneAttributes ga
          WHERE pw.na_sequence_id = ga.na_sequence_id
            AND pw.type = 'gene'
            AND ((ga.start_min <= pw.mapping_start AND pw.mapping_start <= ga.end_max)
                OR (pw.mapping_end <= ga.start_min AND ga.start_min <= pw.mapping_end))
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="ApolloProducts" isCacheable="false" excludeProjects="HostDB,TrichDB" >
      <column name="source_id" />
      <column name="project_id" />
      <column name="apollo_transcript_id" />
      <column name="apollo_description" />
      <column name="apollo_owner" />
      <column name="apollo_dbxref" />
      <column name="apollo_symbol" />
      <column name="apollo_go_term" />
      <column name="creation_date" />
      <column name="apollo_owner_details" />
      <sql>
        <![CDATA[
          SELECT source_id
            , project_id
            , apollo_description
            , apollo_owner
            , apollo_dbxref
            , apollo_symbol
            , apollo_go_term
            , apollo_transcript_id
            , creation_date
            , apollo_owner_details
          FROM apidbtuning.ApolloUpdateGene
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="pfal3D7_phenotype_pB_mutagenesis_MIS_MFS_RSRC" includeProjects="PlasmoDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="score"/>
      <column name="score_type"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id, ga.project_id, r.score, r.score_type
          FROM APIDB.phenotypescore r, webready.GeneAttributes ga
          WHERE ga.na_feature_id = r.na_feature_id
            AND r.ROW_ALG_INVOCATION_ID IN (
              SELECT DISTINCT s.ROW_ALG_INVOCATION_ID
              FROM study.study s, sres.externaldatabase ed, sres.externaldatabaserelease edr
              WHERE ed.EXTERNAL_DATABASE_ID = edr.EXTERNAL_DATABASE_ID
                AND s.EXTERNAL_DATABASE_RELEASE_ID = edr.EXTERNAL_DATABASE_RELEASE_ID
                AND ed.name = 'pfal3D7_phenotype_pB_mutagenesis_MIS_MFS_RSRC'
            )
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="pknoH_phenotype_piggyBac_mutagenesis_HME_MIS_OIS_RSRC" includeProjects="PlasmoDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="score"/>
      <column name="score_type"/>
      <sql>
        <![CDATA[
          select ga.source_id, ga.project_id, r.score, r.score_type
          from apidb.phenotypescore r, webready.GeneAttributes ga
          where ga.na_feature_id = r.na_feature_id
            and r.row_alg_invocation_id in
            (select distinct s.row_alg_invocation_id
             from study.study s, sres.externaldatabase ed, sres.externaldatabaserelease edr
             where ed.external_database_id = edr.external_database_id
             and s.external_database_release_id=edr.external_database_release_id
             and ed.name='pknoH_phenotype_piggyBac_mutagenesis_HME_MIS_OIS_RSRC')
         ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="pknoA1H1_phenotype_piggyBac_mutagenesis_MIS_MFS_RSRC" includeProjects="PlasmoDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="score"/>
      <column name="score_type"/>
      <sql>
        <![CDATA[
          select ga.source_id, ga.project_id, r.score_type
               , CASE WHEN r.score_type = 'mutability in CDS'
                 THEN CASE when r.score = 0 then 'mutable' when r.score = 1 then 'nonmutable' else 'not_determined' end
                 ELSE round(r.score, 2)::VARCHAR END as score
          from apidb.phenotypescore r, webready.GeneAttributes ga
          where ga.na_feature_id = r.na_feature_id
            and r.row_alg_invocation_id in
            (select distinct s.row_alg_invocation_id
             from study.study s, sres.externaldatabase ed, sres.externaldatabaserelease edr
             where ed.external_database_id = edr.external_database_id
             and s.external_database_release_id=edr.external_database_release_id
             and ed.name='pknoA1H1_phenotype_piggyBac_mutagenesis_MIS_MFS_RSRC')
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="eQTLPhenotypeGraphs" includeProjects="PlasmoDB,UniDB">
      <column name="source_id" />
      <column name="project_id" />
      <column name="project_id_url" />
      <column name="graph_ids" />
      <column name="default_graph_id" />
      <column name="module" />
      <column name="genus_species" />
      <column name="mainOpen" />
      <column name="dataOpen" />
      <column name="display_name" />
      <column name="description" />
      <column name="x_axis" />
      <column name="y_axis" />
      <column name="has_graph_data"/>
      <column name="has_meta_data"/>
      <column name="meta_data_categories"/>
      <column name="dataset_name"/>
      <column name="dataset_id"/>
      <column name="is_graph_custom"/>
      <column name="summary"/>
      <column name="short_attribution"/>
      <column name="assay_type"/>
      <column name="template"/>
      <sql>
        <![CDATA[
          SELECT g.*
            , CASE '@PROJECT_ID@' WHEN 'UniDB' THEN 'EuPathDB' ELSE g.project_id END AS project_id_url
            , CASE lower(is_graph_custom) WHEN 'false' THEN 1 ELSE 0 END AS template
            , SPLIT_PART(graph_ids, ',', 1) AS default_graph_id
          FROM
            (
              SELECT ga.source_id
                , ga.project_id
                , ga.organism AS gene_organism
                , ga.genus_species
                , graph_descrip.dataset AS dataset_name
                , psgene.profile_graph_id AS graph_ids
                , CASE WHEN psgene.profile_graph_id IS NULL THEN 0 ELSE 1 END AS has_graph_data
                , tn.name AS graph_organism
                , 'TRUE' AS mainOpen
                , 'FALSE' AS dataOpen
                , 'FALSE' has_meta_data
                , '' AS meta_data_categories
                , graph_descrip.*
                , dp.summary
                , dp.short_attribution
                , dp.display_name
                , dp.description
                , dp.subtype AS assay_type
                , dp.dataset_presenter_id AS dataset_id
              FROM
                webready.GeneAttributes ga
                , APIDBTUNING.datasetnametaxon dsnt
                , apidbtuning.datasetPresenter dp
                , sres.taxonname tn
                , webready.TaxonSpecies ts
                , sres.taxonname sn
                , apidbtuning.geneGroupProfile psgene
                , (
                SELECT '' AS dataset
                  , '' AS module
                  , '' AS x_axis
                  , '' y_axis
                  , '' AS is_graph_custom
                  , 1 AS order_num
                -- TEMPLATE_ANCHOR phenotypeGraphDescriptions
              ) graph_descrip
              WHERE ga.source_id = psgene.source_id
                AND psgene.dataset_name = dsnt.name
                AND dsnt.dataset_presenter_id = dp.dataset_presenter_id
                AND graph_descrip.dataset = dp.name
                AND dsnt.taxon_id = tn.taxon_id
                AND tn.name_class = 'scientific name'
                AND dsnt.taxon_id = ts.taxon_id
                AND ts.species_taxon_id = sn.taxon_id
                AND sn.name_class = 'scientific name'
                AND ga.genus_species = sn.name
                AND dp.type = 'transcript_expression'
                AND lower(dp.subtype) = 'array'
            ) g
        ]]>
      </sql>
    </sqlQuery>




    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Phenotype -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="PhenotypeTable" isCacheable="false" includeProjects="TriTrypDB,EuPathDB,FungiDB,UniDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="pubmed_id"/>
      <column name="modification_type"/>
      <column name="allele"/>
      <column name="phenotype"/>
      <column name="phenotype_comment"/>
      <column name="chebi_annotation_extension"/>
      <sql>
        <![CDATA[
            SELECT DISTINCT
              ga.source_id
              , ga.project_id
              , pm.PUBMED_ID
              , pm.MODIFICATION_TYPE
              , pm.ALLELE
              , CASE WHEN oen.name IS NULL THEN CAST(pr.phenotype_post_composition AS VARCHAR(4000))
                     ELSE opq.name || ' ' || CASE WHEN opq.name = 'lethal' THEN '' ELSE oen.name || ' ' END || pr.Timing || ' ' ||
                          ols.name
                END AS phenotype
              , CASE WHEN pr.PHENOTYPE_COMMENT IS NULL THEN CAST(pr.phenotype_post_composition AS VARCHAR(4000))
                     ELSE pr.phenotype_comment
                END AS phenotype_comment
              , CASE WHEN pr.CHEBI_ANNOTATION_EXTENSION NOT LIKE 'CHEBI%' THEN NULL
                     ELSE pr.chebi_annotation_extension
                END AS chebi_annotation_extension
            FROM
              APIDB.PHENOTYPEMODEL pm
                INNER JOIN APIDB.NAFEATUREPHENOTYPEMODEL na ON pm.phenotype_model_id = na.phenotype_model_id
                INNER JOIN webready.GeneAttributes ga ON ga.na_feature_id = na.na_feature_id
                INNER JOIN sres.externalDatabaseRelease edr ON pm.external_database_release_id = edr.external_database_release_id
                INNER JOIN sres.externalDatabase ed ON edr.external_database_id = ed.external_database_id
                INNER JOIN apidb.phenotyperesult pr ON pm.phenotype_model_id = pr.phenotype_model_id
                LEFT JOIN sres.ontologyterm oen ON pr.PHENOTYPE_ENTITY_TERM_ID = oen.ontology_term_id
                LEFT JOIN sres.ontologyterm opq ON pr.phenotype_quality_term_id = opq.ontology_term_id
                LEFT JOIN sres.ontologyterm ols ON pr.LIFE_CYCLE_STAGE_TERM_ID = ols.ONTOLOGY_TERM_ID
            WHERE ed.name LIKE '%_phenotype_VEuPathDB_curated_phenotype_RSRC'
          UNION
            SELECT DISTINCT
              ga.source_id
              , ga.project_id
              , pm.PUBMED_ID
              , pm.MODIFICATION_TYPE
              , pm.ALLELE
              , CASE WHEN oen.name IS NULL THEN CAST(pr.phenotype_post_composition AS VARCHAR(4000))
                     ELSE opq.name || ' ' || CASE WHEN opq.name = 'lethal' THEN '' ELSE oen.name || ' ' END || pr.Timing || ' ' ||
                          ols.name
                END AS phenotype
              , CASE WHEN pr.PHENOTYPE_COMMENT IS NULL THEN CAST(pr.phenotype_post_composition AS VARCHAR(4000))
                     ELSE pr.phenotype_comment
                END AS phenotype_comment
              , CASE WHEN pr.CHEBI_ANNOTATION_EXTENSION NOT LIKE 'CHEBI%' THEN NULL
                     ELSE pr.chebi_annotation_extension
                END AS chebi_annotation_extension
              --, pr.PROTEIN_ANNOTATION_EXTENSION
            FROM
              webready.GeneAttributes ga
                INNER JOIN APIDB.PHENOTYPEMODEL pm ON ga.na_feature_id = pm.na_feature_id
                INNER JOIN apidb.phenotyperesult pr ON pm.phenotype_model_id = pr.phenotype_model_id
                LEFT JOIN sres.ontologyterm oen ON pr.PHENOTYPE_ENTITY_TERM_ID = oen.ontology_term_id
                LEFT JOIN sres.ontologyterm opq ON pr.phenotype_quality_term_id = opq.ontology_term_id
                LEFT JOIN sres.ontologyterm ols ON pr.LIFE_CYCLE_STAGE_TERM_ID = ols.ONTOLOGY_TERM_ID
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="PhenotypeMagnaportheTable" isCacheable="false" includeProjects="FungiDB,EuPathDB,UniDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="pubmed_id"/>
      <column name="phenotype"/>
      <column name="phenotype_comment"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT
            ga.source_id
            , ga.project_id
            , pm.pubmed_id
            , CASE WHEN oql.name LIKE 'information on putatively essential gene' -- EUPATH_0043245
                     THEN 'putatively essential' || ' ' || oen.name
                   ELSE oql.name || ' ' || oen.name
              END AS phenotype
            , pr.phenotype_comment
          FROM
            apidb.phenotypeModel pm
              INNER JOIN apidb.naFeaturePhenotypeModel na ON pm.phenotype_model_id = na.phenotype_model_id
              INNER JOIN webready.GeneAttributes ga ON ga.na_feature_id = na.na_feature_id
              INNER JOIN sres.externalDatabaseRelease edr ON pm.external_database_release_id = edr.external_database_release_id
              INNER JOIN sres.externalDatabase ed ON edr.external_database_id = ed.external_database_id
              INNER JOIN apidb.phenotypeResult pr ON pm.phenotype_model_id = pr.phenotype_model_id
              LEFT JOIN sres.ontologyterm oql ON pr.phenotype_quality_term_id = oql.ontology_term_id
              LEFT JOIN sres.ontologyterm oen ON pr.phenotype_entity_TERM_ID = oen.ontology_term_id
          WHERE ed.name = 'mory70-15_phenotype_Magnaporthe_Pheno_RSRC'
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="Cellxgene" isCacheable="false" includeProjects="PlasmoDB,TriTrypDB,PiroplasmaDB,ToxoDB,CryptoDB,HostDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="source_ids"/>
      <column name="assay_type"/>
      <column name="summary"/>
      <column name="short_attribution"/>
      <column name="display_name"/>
      <column name="dataset_name"/>
      <sql>
        <![CDATA[
	SELECT 
	    ga.source_id
	    , ga.project_id
	    , string_agg(cg.source_id, ';' ORDER BY cg.source_id) AS source_ids
	    , d.name AS dataset_name
	    , dsp.display_name
	    , 'scRNA-Seq' AS assay_type
	    , dsp.summary
	    , dsp.short_attribution
	FROM webready.GeneAttributes ga
	JOIN apidb.cellxgene cg ON ga.na_feature_id = cg.na_feature_id
	JOIN sres.externaldatabaserelease r ON cg.external_database_release_id = r.external_database_release_id
	JOIN sres.externaldatabase d ON r.external_database_id = d.external_database_id
	JOIN apidbtuning.datasetpresenter dsp ON d.name = dsp.name
	GROUP BY ga.source_id, ga.project_id, d.name, dsp.display_name, dsp.summary, dsp.short_attribution
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="RodMalPhenotypeTable" isCacheable="false" includeProjects="PlasmoDB,UniDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="rmgmid"/>
      <column name="suc_of_gen_mod"/>
      <column name="pubmed_id"/>
      <column name="mod_type"/>
      <column name="life_cycle_stage"/>
      <column name="phenotype"/>
      <column name="mutation_description"/>
      <column name="other_source_id"/>
      <sql>
        <![CDATA[
          WITH mut AS (
            SELECT DISTINCT
              ga.source_id
              , ga.project_id
              , pm.source_id AS rmgmid
              , pm.pubmed_id
              , pm.modification_type AS mod_type
              , pm.is_successful AS suc_of_gen_mod
              , pm.mutation_description
              , ot.name
              , SUBSTR(pr.phenotype_post_composition, 1, 4000) AS phenotype1
              , SUBSTR(pr.phenotype_post_composition, 4001, 4000) AS phenotype2
              , pm.HAS_MULTIPLE_MUTATIONS AS multiple
              , na.NA_FEATURE_ID AS id
              , pm.phenotype_model_id
            FROM
              APIDB.PHENOTYPERESULT pr
                LEFT OUTER JOIN SRES.ONTOLOGYTERM ot ON pr.LIFE_CYCLE_STAGE_TERM_ID = ot.ONTOLOGY_TERM_ID
              , apidb.phenotypemodel pm
              , webready.GeneAttributes ga
              , APIDB.NAFEATUREPHENOTYPEMODEL na
            WHERE pm.PHENOTYPE_MODEL_ID = pr.PHENOTYPE_MODEL_ID
              AND na.phenotype_model_id = pm.phenotype_model_id
              AND na.NA_FEATURE_ID = ga.NA_FEATURE_ID
            -- and ga.source_id = 'PF3D7_1030900'
          )
           , knockdown AS (
            SELECT DISTINCT
              genes.source_id
              , mods.phenotype_model_id AS model_id
            FROM
              apidb.phenotypemodel mods
              , apidb.nafeaturephenotypemodel nod
              , webready.GeneAttributes genes
              , mut m
            WHERE mods.phenotype_model_id = m.phenotype_model_id
              AND m.phenotype_model_id = nod.phenotype_model_id
              AND mods.phenotype_model_id = nod.phenotype_model_id
              AND m.id != nod.na_feature_id
              AND genes.na_feature_id = nod.na_feature_id
              AND m.source_id != genes.source_id
            --and mods.has_multiple_mutations = 1
          )
          , results AS (
            SELECT m.source_id
              , m.project_id
              , m.rmgmid
              , m.pubmed_id
              , m.mod_type
              , CASE
              WHEN m.suc_of_gen_mod = 0 THEN 'NO'
              ELSE 'YES'
                END AS suc_of_gen_mod
              , m.mutation_description
              , string_agg(m.name, ', ' ORDER BY m.name) AS life_cycle_stage
              , concat(phenotype1, phenotype2) AS phenotype
              , m.phenotype_model_id
            FROM mut m
            GROUP BY m.source_id
              , m.project_id
              , m.rmgmid
              , m.pubmed_id
              , m.mod_type
              , m.suc_of_gen_mod
              , m.mutation_description
              , m.phenotype1
              , m.phenotype2
              , m.phenotype_model_id
            ORDER BY rmgmid
          )
          SELECT results.*
            , knockdown.source_id AS other_source_id
          FROM
            results
              LEFT JOIN knockdown ON results.phenotype_model_id = knockdown.model_id
          WHERE knockdown.source_id <> results.source_id OR knockdown.source_id IS NULL
            AND project_id = 'PlasmoDB'
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Seqedits -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="Seqedits" isCacheable="false">
      <column name="source_id"/>
      <column name="transcript_source_id"/>
      <column name="project_id"/>
      <column name="length_diff"/>
      <column name="type"/>
      <column name="location"/>
      <column name="diff"/>
      <sql>
        <![CDATA[
          SELECT ta.gene_source_id AS source_id
            , ta.source_id AS transcript_source_id
            , ta.project_id
            --, se.trans_start, se.trans_end, se.start_min, se.end_max,
            , se.length_diff
            , ot.name AS type
            , ta.sequence_id || ':' || (se.start_min - 50) || '..' || (se.end_max + 50) AS location
            , CASE WHEN (length(se.sequence) = 1)
                     THEN se.orig_sequence || ' -> ' || se.sequence
                   ELSE substr(se.orig_sequence, 1, 10) || '...' || ' -> ' || substr(se.sequence, 1, 10) || '...'
              END AS diff
            --   , sequence, orig_sequenece
          FROM webready.TranscriptAttributes ta, APIDB.seqedit se, SRES.ontologyterm ot
          WHERE ta.has_seqedit = 1
            AND ta.protein_source_id = se.source_id
            AND ot.ontology_term_id = se.sequence_ontology_id
          ORDER BY se.trans_start
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- HTS SNPs Alignment -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="HtsSNPsAlignment" includeProjects="PiroplasmaDB,AmoebaDB,PlasmoDB,ToxoDB,CryptoDB,TriTrypDB,FungiDB,UniDB"
              isCacheable="false">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="strain"/>
      <sql>
        <![CDATA[
          SELECT distinct ga.source_id, ga.project_id, scs.strain
          FROM   apidbtuning.snpChipStrains scs,
                 webready.GeneAttributes ga
          WHERE  scs.organism = ga.organism
          ORDER BY scs.strain
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Mercator Alignment                                           -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="MercatorAlignment" isCacheable="false">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="abbrev"/>
      <column name="organism"/>
      <column name="parent"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id, ga.project_id, t.*, coalesce(o.abbrev, t.organism) AS abbrev
          FROM
            (
              SELECT term AS organism, coalesce(parentTerm, 'root') AS parent
              FROM ApidbTuning.OrganismTree ot, apidbtuning.organismattributes oa
              WHERE ot.organism = oa.organism_name
                AND oa.is_annotated_genome = 1
              GROUP BY term, parentTerm
            ) t
            LEFT JOIN apidbtuning.organismattributes oa ON t.organism = oa.organism_name
            LEFT JOIN apidb.organism o ON oa.PUBLIC_ABBREV = o.PUBLIC_ABBREV
            , webready.GeneAttributes ga -- want all genes
          WHERE t.organism != t.parent
          ORDER BY t.organism
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Interpro -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="InterPro" isCacheable="false">
      <column name="source_id"/>
      <column name="transcript_ids"/>
      <column name="project_id"/>
      <column name="interpro_name"/>
      <column name="interpro_family_id"/>
      <column name="interpro_primary_id"/>
      <column name="interpro_secondary_id"/>
      <column name="interpro_desc"/>
      <column name="interpro_start_min"/>
      <column name="interpro_end_min"/>
      <column name="interpro_e_value"/>
      <sql>
        <![CDATA[
          SELECT string_agg(ir.transcript_source_id, ', ' ORDER BY ir.transcript_source_id) AS transcript_ids
            , ir.gene_source_id AS source_id
            , '@PROJECT_ID@' as project_id
            , ir.interpro_db_name AS interpro_name
            , ir.interpro_primary_id
            , ir.interpro_secondary_id
            , ir.interpro_desc
            , ir.interpro_start_min
            , ir.interpro_end_min
            , ir.interpro_e_value
            , ir.interpro_family_id
          FROM
            apidb.interproresults ir
          GROUP BY ir.gene_source_id, ir.interpro_db_name, ir.interpro_primary_id, ir.interpro_secondary_id,
            ir.interpro_desc, ir.interpro_start_min, ir.interpro_end_min, ir.interpro_e_value, ir.gene_source_id,
            ir.interpro_family_id
          ORDER BY transcript_ids
              , interpro_name
              , interpro_start_min
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Transmembrane Domains -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="TMHMM" isCacheable="false">

      <testParamValues includeProjects="CryptoDB">
        <paramValue name="source_id">cgd7_50</paramValue>
      </testParamValues>
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGGT1_301360</paramValue>
      </testParamValues>
      <testParamValues includeProjects="TrichDB">
        <paramValue name="source_id">TVAG_120600</paramValue>
      </testParamValues>
      <testParamValues includeProjects="AmoebaDB">
        <paramValue name="source_id">EIN_088300</paramValue>
      </testParamValues>
      <testParamValues includeProjects="MicrosporidiaDB">
        <paramValue name="source_id">ECU07_1760</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="project_id"/>
      <column name="tmf_topology"/>
      <column name="transcript_id"/>
      <column name="tmf_start_min"/>
      <column name="tmf_end_max"/>
      <column name="tmf_sequence"/>
      <sql>
        <![CDATA[
          SELECT tm.gene_source_id as source_id
               , tm.project_id
               , tm.tmf_topology
               , tm.transcript_source_id as transcript_id
               , tm.tmf_start_min
               , tm.tmf_end_max
               , tm.tmf_sequence
          FROM webready.TransmembraneDomains tm
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Alias  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="Alias" isCacheable="false" excludeProjects="EuPathDB">
      <column name="source_id"/>
      <column name="alias"/>
      <column name="db_name"/>
      <column name="project_id"/>
      <column name="id_type"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT
            REPLACE(gi.id, ';current=false', '') AS ALIAS
            , CASE
                WHEN gi.database_name LIKE '%from_annotation%'
                THEN 'annotation'
                WHEN gi.database_name LIKE '%MR4Reagents%'
                THEN 'MR4 Reagents'
                WHEN gi.database_name LIKE '%RSRC%'
                THEN ''
                ELSE regexp_replace (gi.database_name,'.*_RSRC','')
            END AS db_name
            , CASE
              WHEN gi.database_name LIKE '%synonym%'
              THEN 'synonym'
              WHEN gi.database_name LIKE '%primary_genome%'
              THEN 'name'
              WHEN gi.database_name LIKE '%PreviousGeneIDs%'
              THEN 'previous ID'
              WHEN gi.database_name LIKE '%aliases%'
              THEN 'alias'
              ELSE 'alternate ID'
            END AS id_type
            , gi.gene AS source_id
            , ga.project_id
          FROM
            webready.GeneId gi, webready.GeneAttributes ga
          WHERE
            gi.gene = ga.source_id
            AND REGEXP_LIKE(gi.id, '(\D)')
            AND gi.database_name NOT LIKE '%gene2Uniprot_RSRC'
            AND gi.union_member != 'same ID'
            AND gi.union_member != 'base ID'
          ORDER BY
              id_type asc
            , alias asc
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Signal Peptides -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


    <sqlQuery name="SignalP" isCacheable="false">
      <column name="source_id"/>
      <column name="transcript_id"/>
      <column name="project_id"/>
      <column name="spf_start_min"/>
      <column name="spf_end_max"/>
      <column name="spf_version"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT
            spd.transcript_source_id AS transcript_id
          , spd.gene_source_id AS source_id
          , t.project_id
          , 1 AS spf_start_min
          , spd.end_max AS spf_end_max
          , spd.algorithm_name AS spf_version
          FROM
            webready.SignalPeptideDomains spd,
            webready.TranscriptAttributes t
          WHERE
              t.source_id = spd.transcript_source_id
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- BlastP Hits -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="BlastP" isCacheable="false">
      <column name="transcript_id"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="blastp_feature_id"/>
      <column name="blastp_name"/>
      <column name="blastp_parent_id"/>
      <column name="blastp_score"/>
      <column name="blastp_start"/>
      <column name="blastp_end"/>
      <column name="blastp_description"/>
      <column name="blastp_expect_value"/>
      <column name="blastp_percent_identity"/>
      <column name="blastp_percent_positive"/>

      <sql>
        <![CDATA[
          SELECT source_id AS transcript_id
            , gene_source_id AS source_id
            , project_id
            , similarity_id AS blastp_feature_id
            , source_id AS blastp_name
            , query_id AS blastp_parent_id
            , score AS blastp_score
            , min_query_start AS blastp_start
            , max_query_end AS blastp_end
            , 'E() = ' || pvalue_mant || 'e' || pvalue_exp || ', ' || round(100 * number_identical / total_match_length) ||
              '% identity, ' || description AS blastp_description
            , CASE WHEN pvalue_mant = 0 THEN '0' ELSE pvalue_mant || 'e' || pvalue_exp END AS blastp_expect_value
            , round(100 * number_identical / total_match_length) AS blastp_percent_identity
            , round(100 * number_positive / total_match_length) AS blastp_percent_positive
          FROM ApidbTuning.Blastp
          ORDER BY pvalue_exp, pvalue_mant
        ]]>
      </sql>
    </sqlQuery>



    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Low Complexity Regions -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


    <sqlQuery name="LowComplexity" isCacheable="false">

      <testParamValues minRows="0" includeProjects="CryptoDB"/>
      <testParamValues includeProjects="TrichDB">
        <paramValue name="source_id">TVAG_563160</paramValue>
      </testParamValues>
      <testParamValues includeProjects="TriTrypDB">
        <paramValue name="source_id">LmjF.02.0480</paramValue>
      </testParamValues>
      <testParamValues includeProjects="AmoebaDB">
        <paramValue name="source_id">EIN_088300</paramValue>
      </testParamValues>
      <testParamValues includeProjects="MicrosporidiaDB">
        <paramValue name="source_id">ECU07_1760</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PiroplasmaDB">
        <paramValue name="source_id">TA10310</paramValue>
      </testParamValues>

      <column name="transcript_id"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="lc_name"/>
      <column name="lc_parent_id"/>
      <column name="lc_start_min"/>
      <column name="lc_end_max"/>

      <sql>
        <![CDATA[
          SELECT t.source_id AS transcript_id
            , gf.source_id AS source_id
            , gf.project_id
            , lc.aa_feature_id AS lc_name
            , lc.aa_sequence_id AS lc_parent_id
            , aal.start_min AS lc_start_min
            , aal.end_max AS lc_end_max
            --substr(aas.sequence, aal.start_min, (aal.end_max-aal.start_min+1)) AS lc_sequence
            --dbms_lob.substr(aas.sequence, (aal.end_max-aal.start_min+1), aal.start_min) AS lc_sequence
          FROM
            dots.aalocation aal
            , webready.GeneAttributes gf
            , dots.transcript t
            , dots.translatedaafeature taf
            , dots.lowcomplexityaafeature lc
            , dots.aaSequence aas
          WHERE gf.na_feature_id = t.parent_id
            AND t.na_feature_id = taf.na_feature_id
            AND taf.aa_sequence_id = lc.aa_sequence_id
            AND lc.aa_feature_id = aal.aa_feature_id
            AND lc.aa_sequence_id = aas.aa_sequence_id
          ORDER BY lc_start_min
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Notes -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!-- TODO:  this data is missing in plas-rbld currently -->
    <sqlQuery name="Notes"
              isCacheable="false" clobRow="true">

      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="source_id">PF3D7_0222600</paramValue>
      </testParamValues>
      <testParamValues includeProjects="CryptoDB">
        <paramValue name="source_id">CMU_000680</paramValue>
      </testParamValues>
      <testParamValues minRows="0" includeProjects="TrichDB"/>
      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="source_id">GL50803_8010</paramValue>
      </testParamValues>
      <testParamValues includeProjects="AmoebaDB">
        <paramValue name="source_id">ECU07_1485</paramValue>
      </testParamValues>
      <testParamValues includeProjects="MicrosporidiaDB">
        <paramValue name="source_id">ECU02_0880</paramValue>
        <paramValue name="project_id">MicrosporidiaDB</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="transcript_ids"/>
      <column name="project_id"/>
      <column name="comment_string"/>
      <column name="comment_date"/>
      <sql>
        <![CDATA[
          SELECT substr(nfc.comment_string, 1, 4000) AS comment_string
            , nf.gene_source_id AS source_id
            , nf.project_id
            , string_agg(nf.source_id, ', ' ORDER BY nf.source_id) AS transcript_ids
            , to_char(nfc.comment_date, 'yyyy-mm-dd') AS comment_date
          FROM dots.NaFeatureComment nfc, webready.TranscriptAttributes nf
          WHERE (nf.na_feature_id = nfc.na_feature_id
            OR nf.gene_na_feature_id = nfc.na_feature_id)
          GROUP BY nf.gene_source_id, nf.project_id, substr(nfc.comment_string, 1, 4000), nfc.comment_date
          ORDER BY nfc.comment_date
        ]]>
      </sql>
    </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Gene images, such as DBP images -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="CellularLocalization"
              isCacheable="false" includeProjects="GiardiaDB,TriTrypDB,UniDB">
      <testParamValues >
        <paramValue name="source_id">GL50803_15576</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="display_id"/>
      <column name="project_id"/>
      <column name="image_uri"/>
      <column name="note"/>
      <column name="image_type"/>
      <sql>
        <![CDATA[
         SELECT DISTINCT image_uri, replace(note, 'GO term: ', '') AS note,
           image_type, display_order,
           source_id, display_id, project_id
         FROM (
           SELECT DISTINCT img.image_uri, img.note, img.image_type,
                    ga.source_id, ga.source_id as display_id, img.display_order, ga.project_id
           FROM apidb.nafeatureimage img, webready.GeneAttributes ga
           WHERE IMG.na_feature_id = ga.na_feature_id
           UNION
           SELECT DISTINCT img.image_uri, img.note, img.image_type,
                   ta.gene_source_id as source_id,
                   ta.source_id as display_id, img.display_order, ta.project_id
           FROM apidb.NAFeatureImage img, webready.TranscriptAttributes ta
           WHERE img.na_feature_id = ta.na_feature_id
         ) ORDER BY display_id, display_order
       ]]>
      </sql>
    </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- ToxoDB LOPIT tables -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


    <sqlQuery name="LOPITMAP"
              isCacheable="false" includeProjects="ToxoDB, UniDB">

      <column name="source_id"/>
      <column name="project_id"/>
      <column name="location"/>
      <column name="probability_MAP"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id, ga.project_id, replace(pan.name,' (lopit)','') as location , lr.probability_mean as probability_MAP
          FROM study.study s , study.studyLink sl, study.ProtocolAppNode pan, apidb.LopitResults lr, webready.GeneAttributes ga
          WHERE s.name in ('TAGM-MAP-Final-Probability')
            AND s.study_id = sl.study_id
            AND sl.protocol_app_node_id = pan.protocol_app_node_id
            AND pan.protocol_app_node_id = lr.protocol_app_node_id
            AND ga.na_feature_id = lr.na_feature_id
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="LOPITMCMC"     isCacheable="false" includeProjects="ToxoDB, UniDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="sort_prob"/>
      <column name="location"/>
      <column name="probability_MCMC"/>
      <sql>
        <![CDATA[
            SELECT ga.source_id
              , ga.project_id
              , replace(pan.name, ' (lopit)', '') AS location
              , lr.probability_mean AS probability_MCMC
              , 2 AS sort_prob
            FROM
              study.study s
              , study.studyLink sl
              , study.ProtocolAppNode pan
              , apidb.LopitResults lr
              , webready.GeneAttributes ga
            WHERE s.name IN ('TAGM-MCMC-Joint-Probability')
              AND s.study_id = sl.study_id
              AND sl.protocol_app_node_id = pan.protocol_app_node_id
              AND pan.protocol_app_node_id = lr.protocol_app_node_id
              AND ga.na_feature_id = lr.na_feature_id
              AND pan.name = 'outlier (lopit)'
          UNION
            SELECT ga.source_id
              , ga.project_id
              , replace(pan.name, ' (lopit)', '') AS location
              , lr.probability_mean AS probability_MCMC
              , lr.probability_mean AS sort_prob
            FROM
              study.study s
              , study.studyLink sl
              , study.ProtocolAppNode pan
              , apidb.LopitResults lr
              , webready.GeneAttributes ga
            WHERE s.name IN ('TAGM-MCMC-Joint-Probability')
              AND s.study_id = sl.study_id
              AND sl.protocol_app_node_id = pan.protocol_app_node_id
              AND pan.protocol_app_node_id = lr.protocol_app_node_id
              AND ga.na_feature_id = lr.na_feature_id
              AND lr.probability_mean >= 0.05
              AND pan.name != 'outlier (lopit)'
            ORDER BY sort_prob DESC
       ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- TriTrypDB LOPIT table -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="LOPITtryp" includeProjects="TriTrypDB,UniDB">
      <column name="name"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="location"/>
      <column name="probability_map"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id, ga.project_id, s.name,
            REPLACE(pan.name,' (lopit)','') AS location,
            CASE  WHEN (ROUND (lr.probability_mean,3) = 1 ) THEN '1'
                 ELSE TO_CHAR(lr.probability_mean,'9.999EEEE') END AS probability_map
          FROM study.study i,study.study s,
            study.studyLink sl, study.ProtocolAppNode pan,
            apidb.LopitResults lr, webready.GeneAttributes ga
          WHERE i.name like 'lopit Study hyperLopit%'
          AND s.investigation_id = i.study_id
          AND s.study_id = sl.study_id
          AND sl.protocol_app_node_id = pan.protocol_app_node_id
          AND pan.protocol_app_node_id = lr.protocol_app_node_id
          AND ga.na_feature_id = lr.na_feature_id
          ORDER BY lr.probability_mean desc
         ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Pathways -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="MetabolicPathways" includeProjects="ToxoDB,PlasmoDB,UniDB"
              isCacheable="false">
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGME49_278740</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="project_id"/>
      <column name="pathway_id"/>
      <column name="pathway_name"/>
      <column name="activity"/>

      <sql>
        <![CDATA[
          SELECT DISTINCT
            dr.primary_identifier AS pathway_id
            , TRIM(REPLACE(
                CASE dr.lowercase_secondary_identifier WHEN NULL THEN dr.primary_identifier ELSE dr.lowercase_secondary_identifier END
                , CHR(191)
                ,''
              )) AS pathway_name
            , dr.remark AS activity
            , gf.source_id
            , gf.project_id
          FROM
            webready.GeneAttributes gf
            , dots.DbRefNaFeature drnf
            , sres.DbRef dr
            , sres.ExternalDatabaseRelease edr
            , sres.ExternalDatabase ed
          WHERE gf.na_feature_id = drnf.na_feature_id
            AND drnf.db_ref_id = dr.db_ref_id
            AND dr.external_database_release_id = edr.external_database_release_id
            AND edr.external_database_id = ed.external_database_id
            AND ed.name IN ('pfal3D7_dbxref_simple_gene2HagaiPathway_RSRC', 'tgonME49_dbxref_protein2Pathways_Feng_RSRC')
          ORDER BY dr.primary_identifier
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="MetabolicPathwaysSres" excludeProjects="EuPathDB"
              isCacheable="false">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="pathway_source_id"/>
      <column name="pathway_name"/>
      <column name="reactions"/>
      <column name="enzyme"/>
      <column name="expasy_url"/>
      <column name="pathway_source"/>
      <column name="exact_match"/>

      <sql>
        <![CDATA[
          SELECT pg.gene_source_id AS source_id
            , pg.project_id
            , pg.pathway_source_id
            , pg.pathway_name
            , pg.reactions
            , pg.enzyme
            , pg.expasy_url
            , pg.pathway_source
            , pg.exact_match
          FROM webready.PathwaysGeneTable pg
          ORDER BY pathway_source, lower(pathway_name)
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Orthologs -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="Orthologs"
              isCacheable="false">

      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGME49_253730</paramValue>
      </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name ="ortho_gene_source_id"/>
            <column name ="ortho_source_id"/>
            <column name="organism"/>
            <column name="gene_product"/>
            <column name="protein_length"/>
            <column name="is_syntenic"/>
            <column name="is_reference_strain"/>
            <column name="has_comment"/>
            <column name="sort_key"/>

      <sql>
        <![CDATA[
          WITH comments AS (
                 SELECT DISTINCT
                   stable_id
                 FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@
                 WHERE comment_target_id = 'gene'
                     AND review_status_id != 'rejected'
                     AND is_visible = 1
          )
          SELECT og.source_id
            , og.project_id
            , og.ortho_gene_source_id
            , og.ortho_source_id
            , og.ortho_product AS gene_product
            , og.protein_length
            , og.ortho_organism AS organism
            , CASE
              WHEN og.is_syntenic = 1
                THEN 'yes'
              ELSE 'no'
            END AS is_syntenic
            , CASE
                WHEN og.is_reference_strain = 1
                  THEN 'yes'
                ELSE 'no'
                  END AS is_reference_strain
                , CASE
                WHEN comments.stable_id IS NULL
                  THEN 'no'
                ELSE 'yes'
              END AS has_comment
            , rpad(lower(og.source_id), 80)
                || CASE
                WHEN og.is_syntenic = 1
                  THEN '8yes' -- sort earlier
                ELSE '9no ' -- sort later
                   END
                || CASE
                WHEN comments.stable_id IS NULL
                  THEN '9no ' -- sort later
                ELSE '8yes' -- sort earlier
                   END
                || rpad(lower(og.ortho_gene_source_id), 80)
            AS sort_key
          FROM
            apidbTuning.OrthologousTranscripts og
              LEFT OUTER JOIN comments ON og.ortho_source_id = comments.stable_id
          WHERE og.source_id != og.ortho_gene_source_id
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="OrthologsLite"
              isCacheable="false">

      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGME49_253730</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="project_id"/>
      <column name="ortho_gene_source_id"/>
      <column name="organism"/>
      <column name="gene_product"/>
      <column name="is_syntenic"/>

            <sql>
            <![CDATA[
              SELECT DISTINCT
                     ot.source_id
                     , ot.project_id
                     , ot.ortho_gene_source_id
                     , ot.ortho_product AS gene_product
                     , ot.ortho_organism AS organism
                     , CASE ot.is_syntenic
                         WHEN 0 THEN 'no'
                         ELSE 'yes'
                       END AS is_syntenic
              FROM apidbTuning.OrthologousTranscripts ot
              WHERE ot.source_id != ot.ortho_gene_source_id
            ]]>
            </sql>
       </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Epitopes -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- TODO:  check this one.  Tuning table should be transcript level -->
    <sqlQuery name="Epitopes"
              isCacheable="false">

      <testParamValues includeProjects="CryptoDB">
        <paramValue name="source_id">cgd6_1800</paramValue>
      </testParamValues>
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGVEG_270250</paramValue>
      </testParamValues>
      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="source_id">GL50803_6081</paramValue>
      </testParamValues>
      <testParamValues includeProjects="TriTrypDB">
        <paramValue name="source_id">LmjF.10.0460</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PiroplasmaDB">
        <paramValue name="source_id">BBOV_IV008150</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="transcript_id"/>
      <column name="project_id"/>
      <column name="iedb_id"/>
      <column name="peptide_source_protein"/>
      <column name="location"/>
      <column name="sequence"/>
      <column name="name"/>
      <column name="IEDB_Description"/>
      <column name="mismatches"/>
      <column name="protein_match"/>
      <column name="taxon_match"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT
	  	ta.project_id
		, ae.iedb_id
		, ta.source_id as transcript_id
		, ta.gene_source_id as source_id
		, mt.sequence
		, mt.secondary_identifier as "peptide_source_protein"
		, concat( ae.start_min, '-', ae.end_max) as location
		, ta.organism as name
		, mt.description as "IEDB_Description"
		,CASE
                WHEN ae.mismatches = 1 THEN 'Yes'
                WHEN ae.mismatches = 0 THEN 'No'
                END AS mismatches
                ,CASE
                WHEN ae.protein_match = 1 THEN 'Yes'
                WHEN ae.protein_match = 0 THEN 'No'
                END AS protein_match
                ,CASE
                WHEN ae.taxon_match = 1 THEN 'Yes'
                WHEN ae.taxon_match = 0 THEN 'No'
                END AS taxon_match
	FROM
		dots.motifaasequence mt
		, apidb.aasequenceepitope ae
		, dots.translatedaasequence t
		, webready.TranscriptAttributes ta
	WHERE
		ae.iedb_id = cast (mt.source_id as int) and
		ae.aa_sequence_id = t.aa_sequence_id
		and ta.protein_source_id = t.source_id
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Splice Sites  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SpliceSites" isCacheable="false"  includeProjects="TriTrypDB,UniDB">
      <column name="transript_source_id"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="sample_name"/>
      <column name="utr_len"/>
      <column name="alt_cds_start"/>
      <column name="rel_pos"/>
      <column name="location"/>
      <column name="count_per_million"/>
      <column name="is_unique"/>
      <column name="avg_mismatches"/>
      <column name="is_dominant"/>
      <column name="display_name"/>
      <column name="attribution"/>
      <column name="dataset_presenter_id"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT
            transcript_source_id
            , source_id
            , project_id
            , sample_name
            , location
            , count_per_million
            , avg_mismatches
            , is_unique
            , is_dominant
            , utr_len
            , rel_pos
            , display_name
            , attribution
            , dataset_presenter_id
            , CASE WHEN (rel_pos >= 0) THEN 'yes' ELSE '' END AS alt_cds_start
          FROM (
              SELECT DISTINCT
                ta.source_id AS transcript_source_id
                , ta.gene_source_id AS source_id
                , ta.project_id
                , REPLACE(pan.name, ' [feature_loc] (SpliceSites)', '') AS sample_name
                , sst.location
                , ssf.count_per_million
                , ssf.avg_mismatches
                , CASE sst.is_unique WHEN 1 THEN 'yes' WHEN 0 THEN '' END AS is_unique
                , CASE sst.is_dominant WHEN 1 THEN 'yes' WHEN 0 THEN '' END AS is_dominant
                , CASE WHEN (sst.location >= ta.coding_start AND sst.location <= coding_end AND
                             sst.dist_to_cds = sst.dist_to_first_atg)
                         THEN (-1) * sst.dist_to_cds
                       ELSE sst.dist_to_first_atg
                  END AS utr_len
                , CASE WHEN (ta.is_reversed = 0)
                         THEN (sst.location - ta.coding_start)
                       ELSE (ta.coding_end - sst.location)
                  END AS rel_pos
                , REGEXP_REPLACE(dp.display_name, '\(.+\)', '') AS display_name
                , CASE WHEN (dp.short_display_name LIKE '%Myler%')
                         THEN 'Myler lab'
                       ELSE dp.short_attribution
                  END AS attribution
                , dp.dataset_presenter_id
              FROM
                apidbtuning.splicesitetranscripts sst
                , apidb.splicesitefeature ssf
                , study.protocolappnode pan
                , study.studylink sl
                , study.study s
                , study.study i
                , apidbtuning.datasetpresenter dp
                , webready.TranscriptAttributes ta
              WHERE ssf.na_sequence_id = sst.na_sequence_id
                AND ssf.type = sst.type
                AND ssf.strand = sst.strand
                AND ssf.segment_start = sst.location
                AND pan.protocol_app_node_id = ssf.protocol_app_node_id
                AND sl.protocol_app_node_id = pan.protocol_app_node_id
                AND s.study_id = sl.study_id
                AND i.study_id = s.investigation_id
                AND dp.name = replace(i.name, '_PolyA_', '_Spliced_Leader_')
                AND ta.gene_source_id = sst.gene_source_id
                AND ssf.type = 'Splice Site'
              ORDER BY is_dominant, rel_pos, utr_len DESC, sample_name, location
            ) t
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Poly A Sites  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="PolyASites" isCacheable="false"  includeProjects="TriTrypDB,UniDB">
      <testParamValues>
        <paramValue name="source_id">LmjF.01.0020</paramValue>
      </testParamValues>

      <column name="transcript_source_id"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="sample_name"/>
      <column name="location"/>
      <column name="count_per_million"/>
      <column name="is_unique"/>
      <column name="avg_mismatches"/>
      <column name="is_dominant"/>
      <column name="rel_pos"/>
      <column name="display_name"/>
      <column name="attribution"/>
      <column name="dataset_presenter_id"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT
            ta.source_id as transcript_source_id
            , ta.gene_source_id as source_id
            , ta.project_id
            , REPLACE(pan.name, ' [feature_loc] (SpliceSites)', '') as sample_name
            , sst.location
            , ssf.count_per_million
            , ssf.avg_mismatches
            , CASE sst.is_unique WHEN 1 THEN 'yes' WHEN 0 THEN '' END AS is_unique
            , CASE sst.is_dominant WHEN 1 THEN 'yes' WHEN 0 THEN '' END AS is_dominant
            , CASE WHEN (ta.is_reversed = 1 )
                THEN (-1 * (sst.location - ta.coding_start))
                ELSE (-1 * (ta.coding_end - sst.location)) END as rel_pos
            , REGEXP_REPLACE (dp.display_name, '\(.+\)', '') as display_name
            , CASE WHEN (dp.short_display_name like '%Myler%')
                THEN 'Myler lab' ELSE dp.short_attribution END as attribution
            , dp.dataset_presenter_id
          FROM apidbtuning.splicesitetranscripts sst
            , apidb.splicesitefeature ssf
            , study.protocolappnode pan
            , study.studylink sl
            , study.study s
            , study.study i
            , apidbtuning.datasetpresenter dp
            , webready.TranscriptAttributes ta
          WHERE ssf.na_sequence_id = sst.na_sequence_id
            AND ssf.type = sst.type
            AND ssf.strand = sst.strand
            AND ssf.segment_start = sst.location
            AND pan.protocol_app_node_id = ssf.protocol_app_node_id
            AND sl.protocol_app_node_id = pan.protocol_app_node_id
            AND s.study_id = sl.study_id
            AND i.study_id = s.investigation_id
            --TODO Fix this!
            AND (((i.name = 'lmajFriedlin_sbri_myler_PolyA_rnaSeqSplicedLeaderAndPolyASites_RSRC' OR i.name = 'ldonBPK282A1_sbri_myler_rnaSeqSplicedLeaderAndPolyASites_RSRC')
                    AND dp.name = replace(i.name, '_PolyA_', '_Spliced_Leader_') )
                OR (i.name = 'tbruTREU927_George_Cross_PolyA_rnaSeqSplicedLeaderAndPolyASites_RSRC' AND dp.name = replace(i.name, '_PolyA_', '_Splice_Leader_'))
                OR (i.name = 'tbruTREU927_Tschudi_Transcriptome_PolyA_rnaSeqSplicedLeaderAndPolyASites_RSRC' AND dp.name = replace(i.name, '_PolyA_', '_Spliced_Leaders_')))
            AND ta.gene_source_id = sst.gene_source_id
            AND ssf.type = 'Poly A'
          ORDER BY is_dominant, rel_pos desc, sample_name, location
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate Overlap  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!-- TODO Crypto specific /?  Maybe this should be an attribute? isolate count?-->
    <!--
           <sqlQuery name="PopsetOverlap" includeProjects="CryptoDB,EuPathDB"
                      isCacheable="false">

                <testParamValues includeProjects="CryptoDB">
                   <paramValue name="source_id">cgd6_2090</paramValue>
                </testParamValues>

                <column name="source_id"/>
                <column name="gene_source_id"/>
                <column name="project_id"/>
                <column name="total"/>
                <sql>
                <![CDATA[
                SELECT source_id, '@PROJECT_ID@' as project_id, count(*) as total
                FROM (SELECT DISTINCT gio.gene_source_id as source_id, gio.popset_source_id as popset
                      FROM ApidbTuning.GenePopsetOverlap gio) popsets
                GROUP BY source_id
                ]]>
               </sql>
           </sqlQuery>
    -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Mass spec -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="MassSpec" excludeProjects="EuPathDB"
              isCacheable="false">

      <testParamValues includeProjects="AmoebaDB">
        <paramValue name="source_id">EHI_011210</paramValue>
      </testParamValues>
      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="source_id">GL50803_17249</paramValue>
      </testParamValues>
      <testParamValues includeProjects="TriTrypDB">
        <paramValue name="source_id">Tb11.0550</paramValue>
      </testParamValues>
      <testParamValues includeProjects="TrichDB">
        <paramValue name="source_id">TVAG_230580</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PiroplasmaDB">
        <paramValue name="source_id">TA19695</paramValue>
      </testParamValues>

      <column name="transcript_ids"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="experiment"/>
      <column name="sample"/>
      <column name="sequence_count"/>
      <column name="spectrum_count"/>
      <column name="data_source"/>
      <sql>
        <![CDATA[
          SELECT ms.*, ga.project_id
          FROM
            webready.GeneAttributes ga
            , ( SELECT source_id AS transcript_ids
                  , gene_source_id AS source_id
                  , experiment
                  , sample_display_name AS sample
                  , external_database_name AS data_source
                  , count(spectrum_count) AS spectrum_count
                  , count(distinct peptide_sequence) AS sequence_count
                FROM
                  apidbtuning.msPeptideSummary
                GROUP BY source_id
                  , gene_source_id
                  , experiment
                  , sample_display_name
                  , external_database_name
            ) ms
          WHERE ms.source_id = ga.source_id
          ORDER BY ms.source_id, ms.experiment, ms.sample
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Phospho Mass spec -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="MassSpecMod" includeProjects="PlasmoDB,ToxoDB,TriTrypDB,FungiDB,PiroplasmaDB,HostDB,UniDB"
              isCacheable="false">
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGME49_251810</paramValue>
      </testParamValues>
      <column name="source_id"/>
      <column name="transcript_ids"/>
      <column name="modification_site"/>
      <column name="term_name"/>
      <column name="experiment"/>
      <column name="sample"/>
      <column name="residue"/>

      <!--
                  <column name="sum_spectrum_count"/>
                  <column name="distinct_peptides"/>
      -->
      <column name="project_id"/>
      <sql>
        <![CDATA[
          SELECT ps.*, ga.project_id
          FROM
            webready.GeneAttributes ga
            , (
                SELECT string_agg(source_id, ', ' ORDER BY source_id) AS transcript_ids
                  , gene_source_id AS source_id
                  , modification_site
                  , experiment
                  , sample
                  , sum_spectrum_count
                  , replace(replace(replace(term_name, '-', ' '), '_', ' '), 'binding site',
                            'ubiquitin binding site') AS term_name
                  , residue
                  , distinct_peptides
                FROM (
                    SELECT mss.source_id
                      , mss.gene_source_id
                      , mss.aa_start_min AS modification_site
                      , mss.experiment
                      , mss.sample_display_name AS sample
                      , sum(mss.spectrum_count) AS sum_spectrum_count
                      , mss.modification_type AS term_name
                      , mss.residue
                      , count(*) AS distinct_peptides
                    FROM apidbtuning.msmodifiedpeptidesummary mss
                    GROUP BY mss.experiment, mss.sample_display_name, mss.aa_start_min, mss.source_id, mss.gene_source_id,
                      mss.modification_type, mss.residue
                  ) t
                GROUP BY gene_source_id, modification_site, experiment, sample, sum_spectrum_count, term_name, residue,
                  distinct_peptides
              ) ps
          WHERE ps.source_id = ga.source_id
          ORDER BY ps.source_id, ps.residue, ps.experiment, ps.sample
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="MassSpecDownload" excludeProjects="EuPathDB"
              isCacheable="false" clobRow="true">

      <testParamValues includeProjects="AmoebaDB">
        <paramValue name="source_id">EHI_011210</paramValue>
      </testParamValues>
      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="source_id">GL50803_17249</paramValue>
      </testParamValues>
      <testParamValues includeProjects="TriTrypDB">
        <paramValue name="source_id">Tb11.0550</paramValue>
      </testParamValues>
      <testParamValues includeProjects="TrichDB">
        <paramValue name="source_id">TVAG_230580</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PiroplasmaDB">
        <paramValue name="source_id">TA19695</paramValue>
      </testParamValues>

      <column name="transcript_id"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="experiment"/>
      <column name="sample"/>
      <column name="sequence"/>
      <column name="spectrum_count"/>
      <column name="protein_start"/>
      <column name="protein_end"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id as transcript_id, ta.gene_source_id as source_id, ta.project_id,
                 ms.experiment, ms.sample_display_name as sample, ms.peptide_sequence as sequence,
		         ms.spectrum_count, ms.aa_start_min as protein_start, ms.aa_end_max as protein_end
          FROM apidbtuning.mspeptidesummary ms, webready.TranscriptAttributes ta
          WHERE ms.source_id = ta.source_id
          ORDER by ms.experiment, ms.sample
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--Gene Location -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneLocation" isCacheable="false">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="sequence_source_id"/>
      <column name="sequence_so_term"/>
      <column name="start_min"/>
      <column name="end_max"/>
      <column name="strand"/>
      <column name="start_context"/>
      <column name="end_context"/>
      <column name="organismAbbrev"/>
      <column name="lc_project_id"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id
              , ga.project_id
              , fl.sequence_source_id AS sequence_source_id
              , so.name AS sequence_so_term
              , fl.start_min AS start_min
              , fl.end_max AS end_max
              , CASE fl.is_reversed WHEN 0 THEN '+' WHEN 1 THEN '-' ELSE '.' END strand
              , (fl.start_min - 5000) AS start_context
              , (fl.end_max + 5000) AS end_context
              , o.public_abbrev as organismAbbrev
              , lower(ga.project_id) AS lc_project_id
          FROM webready.GeneAttributes ga
            , apidb.featurelocation fl
            , webready.GenomicSeqAttributes sa
            , SRes.OntologyTerm so
            , apidb.organism o
          WHERE ga.na_sequence_id = sa.na_sequence_id
            AND sa.so_id = so.source_id
            AND ga.na_feature_id = fl.NA_FEATURE_ID
            AND o.taxon_id = ga.taxon_id
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- SSGCID                                                       -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="Ssgcid" isCacheable="false" excludeProjects="HostDB">

      <testParamValues includeProjects="AmoebaDB">
        <paramValue name="source_id">EHI_011210</paramValue>
      </testParamValues>
      <testParamValues includeProjects="TriTrypDB">
        <paramValue name="source_id">Tb927.10.2010</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PiroplasmaDB">
        <paramValue name="source_id">BBOV_IV001230</paramValue>
      </testParamValues>
      <testParamValues includeProjects="CryptoDB">
        <paramValue name="source_id">cgd1_2260</paramValue>
      </testParamValues>
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGME49_239300</paramValue>
      </testParamValues>
      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="source_id">GL50803_24068 </paramValue>
      </testParamValues>
      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="source_id">PF3D7_1001000 </paramValue>
      </testParamValues>


      <column name="source_id"/>
      <column name="project_id"/>
      <column name="target"/>
      <column name="status"/>
      <column name="selection_criteria"/>
      <column name="has_clone"/>
      <column name="has_protein"/>
      <sql>
        <![CDATA[
          WITH sbri AS (
            SELECT
             substr(eupathdb, strpos(eupathdb, ':') + 1) AS source_id
             , CASE substr(eupathdb, 1, nullif(strpos(eupathdb, ':') - 1, -1))
                 WHEN 'TritrypDB' THEN 'TriTrypDB'
                 ELSE substr(eupathdb, 1, nullif(strpos(eupathdb, ':') - 1, -1))
               END AS project_id
             , target
             , status
             , selection_criteria
             , CASE has_clone WHEN 'true' THEN 'yes' WHEN 'false' THEN 'no' ELSE 'N/A' END AS has_clone
             , CASE has_protein WHEN 'true' THEN 'yes' WHEN 'false' THEN 'no' ELSE 'N/A' END AS has_protein
            FROM ApidbTuning.ssgcid
          )
          SELECT gi.gene AS source_id
            , sbri.project_id
            , sbri.target
            , sbri.status
            , sbri.selection_criteria
            , sbri.has_clone
            , sbri.has_protein
          FROM sbri, webready.GeneId gi, webready.GeneAttributes ga
          WHERE sbri.project_id = ga.project_id
            AND sbri.source_id = gi.id
            AND gi.gene = ga.source_id
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- single-row attribute "tables" to put values in GeneDetail    -->
    <!-- where text search can find them                              -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="Product" isCacheable="false">
      <column name="transcript_product"/>
      <column name="transcript_ids"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <sql>
        <![CDATA[
          SELECT gene_source_id AS source_id
            , project_id
            , transcript_product
            , string_agg(source_id, ', ' ORDER BY source_id) AS transcript_ids
          FROM
            webready.TranscriptAttributes
          GROUP BY gene_source_id
            , project_id
            , transcript_product
        ]]>
      </sql>
    </sqlQuery>

       <sqlQuery name="GeneName" isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="gene_name"/>
            <sql>
            <![CDATA[
              SELECT
                source_id AS source_id
              , project_id
              , name AS gene_name
              FROM
                webready.GeneAttributes
            ]]>
            </sql>
        </sqlQuery>
 
        <sqlQuery name="AllProducts" isCacheable="false">
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="product"/>
            <column name="is_alternate"/>
            <column name="reference"/>
            <column name="evidence_code"/>
            <column name="evidence_code_parameter"/>
	    <column name="assigned_by"/>
            <sql>
            <![CDATA[
select source_id, transcript_ids, project_id, product, is_alternate,
       reference, evidence_code, evidence_code_parameter, assigned_by
from apidbTuning.AllGeneProducts
            ]]>
            </sql>
        </sqlQuery> 

    <sqlQuery name="GeneId" isCacheable="false">
      <column name="gene_id"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <sql>
        <![CDATA[
          SELECT
              ga.source_id
            , ga.source_id AS gene_id
            , ga.project_id
          FROM
              dots.GeneFeature gf
            , webready.GeneAttributes ga
          WHERE
            ga.na_feature_id = gf.na_feature_id
        ]]>
      </sql>
    </sqlQuery>


    <!--===========================================================================-->
    <!--===========================================================================-->
    <!-- PlasmoDB exclusives  -->
    <!--===========================================================================-->
    <!--===========================================================================-->



    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Y2H interactions -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="Y2hInteractions" isCacheable="false" includeProjects="PlasmoDB,EuPathDB,FungiDB,UniDB">

      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="source_id">PF3D7_0102200</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="other_source_id"/>
      <column name="other_product"/>
      <column name="other_gene_source_id"/>
      <column name="project_id"/>
      <column name="bait_start"/>
      <column name="bait_end"/>
      <column name="prey_start"/>
      <column name="prey_end"/>
      <column name="times_observed" />
      <column name="number_of_searches"/>
      <column name="prey_number_of_baits"/>
      <column name="bait_number_of_preys"/>
      <column name="bait_or_prey"/>
      <sql>
        <![CDATA[
            SELECT
                bf.source_id
              , pf.source_id AS other_source_id
              , pf.product AS other_product
              , bait_start
              , bait_end
              , prey_start
              , prey_end
              , times_observed
              , number_of_searches
              , NULL AS prey_number_of_baits
              , bait_number_of_preys
              , 'bait' AS bait_or_prey
              , bf.project_id
            FROM
                webready.GeneAttributes bf
              , webready.GeneAttributes pf
              , apidb.GeneInteraction gi
            WHERE
              bf.na_feature_id = gi.bait_gene_feature_id
              AND gi.prey_gene_feature_id = pf.na_feature_id
          UNION
            SELECT
                pf.source_id
              , bf.source_id AS other_source_id
              , bf.product AS other_product
              , bait_start
              , bait_end
              , prey_start
              , prey_end
              , times_observed
              , number_of_searches
              , prey_number_of_baits
              , NULL AS bait_number_of_preys
              , 'prey' AS bait_or_prey
              , pf.project_id
            FROM
                webready.GeneAttributes bf
              , webready.GeneAttributes pf
              , apidb.GeneInteraction gi
            WHERE
              bf.na_feature_id = gi.bait_gene_feature_id
              AND gi.prey_gene_feature_id = pf.na_feature_id
        ]]>
      </sql>
    </sqlQuery>



    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Protein expression -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


    <!-- TODO -->

    <!--
    <sqlQuery name="ProteinExpression" isCacheable="false" includeProjects="PlasmoDB,EuPathDB">

     <testParamValues includeProjects="PlasmoDB">
            <paramValue name="source_id">PBANKA_140060</paramValue>
         </testParamValues>

         <column name="source_id"/>
         <column name="project_id"/>
         <column name="profile_element"/>
         <column name="element_value"/>
         <sql>
         <![CDATA[
         SELECT REPLACE(pen.name, '_', ' ') as profile_element,
                DECODE(pe.value, 1, 'yes', 'no') as element_value,
                p.source_id, '@PROJECT_ID@' as project_id
         FROM apidb.profileElementName pen,
              apidb.profileElement pe,
              apidb.profile p,
              apidb.profileSet ps
         WHERE ps.name = 'berghei_proteomic_Sinden'
         AND ps.profile_set_id = p.profile_set_id
         AND ps.profile_set_id = pen.profile_set_id
         AND p.profile_id = pe.profile_id
         AND pen.profile_element_name_id = pe.profile_element_name_id
         ORDER BY pen.element_order
         ]]>
         </sql>
     </sqlQuery>
     -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- MR4 reagents -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--
           <sqlQuery name="Mr4Reagents" isCacheable="false" includeProjects="PlasmoDB,EuPathDB">
                <column name="source_id"/>
                <column name="gene_source_id"/>
                <column name="project_id"/>
                <column name="atcc_number"/>
                <column name="reagent_type"/>
                <column name="remark"/>
                <sql>
                <![CDATA[
    SELECT
      dbr.primary_identifier AS atcc_number
    , dbr.secondary_identifier AS reagent_type
    , dbr.remark
    , ta.gene_source_id
    , ta.project_id
    FROM
      webready.TranscriptAttributes ta
    , dots.aafeature af
    , dots.DbRefAAFeature df
    , sres.dbref dbr
    , sres.ExternalDatabaseRelease edr
    , sres.externaldatabase ed
    where
      ed.name = 'pfal3D7_dbxref_simple_gene2MR4Reagents_RSRC'
      and edr.external_database_id = ed.external_database_id
      and dbr.external_database_release_id = edr.external_database_release_id
      and dbr.db_ref_id = df.db_ref_id
      AND df.aa_feature_id = af.aa_feature_id
      AND af.aa_sequence_id = ta.aa_sequence_id
    ORDER BY
      dbr.secondary_identifier
    , dbr.primary_identifier
                ]]>
                </sql>
            </sqlQuery>
    -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- plasmo eQTL regions -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="Plasmo_eQTL_Span_List" isCacheable="false" includeProjects="PlasmoDB,UniDB">
      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="source_id">PF3D7_0300900</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="project_id"/>
      <column name="hapblock_id"/>
      <column name="start_min"/>
      <column name="end_max"/>
      <column name="start_max"/>
      <column name="end_min"/>
      <column name="sequence_id"/>
      <column name="lod_score"/>
      <column name="organism"/>
      <sql>
        <![CDATA[
          SELECT
              e.gene_source_id as source_id
            , e.project_id
            , e.hapblock_id
            , e.sequence_id
            , e.start_min
            , e.end_max
            , e.start_max
            , e.end_min
            , e.organism
            , TO_CHAR(e.lod_score, CASE
                WHEN lod_score BETWEEN 1 AND 10
                THEN '9.99'
                ELSE '99.99EEEE'
              END) AS lod_score
          FROM
            webready.EqtlSpan e
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Antibody -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- TODO -->
    <sqlQuery name="Antibody" isCacheable="false" includeProjects="ToxoDB,CryptoDB,UniDB">
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGME49_255260</paramValue>
      </testParamValues>
      <testParamValues includeProjects="CryptoDB">
        <paramValue name="source_id">cgd6_5430</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="bei_number"/>
      <column name="reagent_type"/>
      <column name="remark"/>
      <sql>
        <![CDATA[
          SELECT dbr.primary_identifier AS bei_number,
                 'Antibody' AS reagent_type,
                 dbr.remark,
                 gf.source_id, gf.project_id
          FROM webready.GeneAttributes gf,
               dots.DbRefNAFeature df,
               sres.DbRef dbr, sres.ExternalDatabaseRelease edr,
               sres.ExternalDatabase ed
          WHERE df.na_feature_id = gf.na_feature_id
            AND dbr.db_ref_id = df.db_ref_id
            AND ed.name in ('tgonME49_dbxref_protein2EinsteinAntibodies_RSRC','cparIowaII_dbxref_protein2EinsteinAntibodies_RSRC')
            AND edr.external_database_id = ed.external_database_id
            AND dbr.external_database_release_id
                = edr.external_database_release_id
          ORDER BY dbr.primary_identifier
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- external database links -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="gene_dbrefs"
              isCacheable="false">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="dataset"/>
      <column name="link_url"/>
      <column name="ext_id"/>

      <sql>
        <![CDATA[
          SELECT DISTINCT * FROM (
              SELECT * FROM (
                SELECT
                  edd.dataset_presenter_display_name AS dataset
                  , ga.source_id
                  , ga.project_id
                  , db.primary_identifier AS ext_id
                  , REPLACE(edr.id_url, 'EXTERNAL_ID_HERE', db.primary_identifier) AS link_url
                FROM
                  sres.dbref db
                  , DOTS.dbrefnafeature dbna
                  , apidbtuning.ExternalDbDatasetPresenter edd
                  , sres.externaldatabaserelease edr
                  , webready.GeneAttributes ga
                WHERE
                  db.external_database_release_id = edd.external_database_release_id
                  AND edr.external_database_release_id = edd.external_database_release_id
                  AND dbna.db_ref_id = db.db_ref_id
                  AND ga.na_feature_id = dbna.na_feature_id
                  AND lower(edd.dataset_presenter_name) NOT LIKE '%nrdb%'
                  AND lower(edd.dataset_presenter_name) NOT LIKE '%nafeature_aliases%'
                  AND edd.dataset_presenter_name NOT LIKE '%dbxref_simple_gene2HagaiPathway%'
                  AND lower(edd.dataset_presenter_name) NOT LIKE '%pubmed%'
                  AND edd.dataset_presenter_display_name != 'ApiLoc Predictions'
                  AND NOT edd.external_database_name = 'anidFGSCA4_dbxref_unity_EnsemblFungi_RSRC' -- #47248
                  AND NOT edd.external_database_name = 'mory70-15_dbxref_unity_EnsemblFungi_RSRC'  -- #46932
              ) t
              WHERE dataset != 'Malaria Literature Database'
                AND dataset != 'Ontology Based Pattern Identification'
                AND dataset != 'GeneDB: The Sanger Institute Pathogen Genomics Database'
            UNION
              SELECT
                regexp_replace(replace(replace(regexp_replace(ed.name, '^.*_dbxref_', ''),
                                 '_geneMapping_RSRC', ''),
                         '-Agilent', ''),
                 '_.*$', '')
                  as dataset
                , ga.source_id
                , ga.project_id
                , sref.primary_identifier as ext_id
                , case
                    when ed.name like '%_dbxref_A-%'
                      then 'https://www.ebi.ac.uk/biostudies/arrayexpress/arrays/'
                           || regexp_replace(replace(replace(replace(ed.name, '_geneMapping_RSRC', ''),
                                                             '-Agilent', ''),
                                                     '_GenePix', ''),
                                             '^.*_dbxref_', '')
                    when ed.name like '%_dbxref_GPL%'
                      then 'http://ncbi.nlm.nih.gov/geo/query/acc.cgi?acc='
                           || regexp_replace(regexp_replace(ed.name, '^.*dbxref_GPL', 'GPL'),
                                             '[-_].*$', '')
                    else ''
                  end as link_url
              FROM SRes.DbRef sref
                , DoTS.DbRefNAFeature refea
                , SRES.ExternalDatabase ed
                , SRES.ExternalDatabaseRelease edr
                , webready.GeneAttributes ga
              WHERE sref.external_database_release_id  = edr.external_database_release_id
                AND ed.external_database_id = edr.external_database_id
                AND ed.name like '%geneMapping%'
                AND refea.db_ref_id = sref.db_ref_id
                AND refea.na_feature_id = ga.na_feature_id
            UNION
              SELECT
                edd.dataset_presenter_display_name AS dataset
                , ta.gene_source_id
                , ta.project_id
                , db.primary_identifier AS ext_id
                , REPLACE(edr.id_url, 'EXTERNAL_ID_HERE', db.primary_identifier) AS link_url
              FROM
                sres.dbref db
                , DOTS.dbrefnafeature dbna
                , apidbtuning.ExternalDbDatasetPresenter edd
                , sres.externaldatabaserelease edr
                , webready.TranscriptAttributes ta
              WHERE
                  db.external_database_release_id = edd.external_database_release_id
                AND edr.external_database_release_id = edd.external_database_release_id
                AND dbna.db_ref_id = db.db_ref_id
                AND ta.na_feature_id = dbna.na_feature_id
                AND lower(edd.dataset_presenter_name) NOT LIKE '%nrdb%'
                AND lower(edd.dataset_presenter_name) NOT LIKE '%nafeature_aliases%'
                AND edd.dataset_presenter_name NOT LIKE '%dbxref_simple_gene2HagaiPathway%'
                AND lower(edd.dataset_presenter_name) NOT LIKE '%pubmed%'
            UNION
              SELECT d.name as dataset
                , ga.gene_source_id
                , ga.project_id
                , dbr.primary_identifier AS ext_id
                , REPLACE(eru.id_url, '###ID###', dbr.primary_identifier) AS link_url
              FROM
                sres.dbref dbr
                , DOTS.dbrefnafeature dbrf
                , sres.externaldatabaserelease r
                , sres.externaldatabase d
                , webready.TranscriptAttributes ga
                , APIDB.EXTERNALRESOURCEURL eru
              WHERE dbr.external_database_release_id = r.external_database_release_id
                AND r.external_database_id = d.external_database_id
                AND dbr.db_ref_id = dbrf.db_ref_id
                AND dbrf.na_feature_id = ga.na_feature_id
                AND upper(d.name) = eru.database_name
                AND d.name not in ('PUBMED')
            UNION
              SELECT d.name as dataset
                , ga.source_id
                , ga.project_id
                , dbr.primary_identifier AS ext_id
                , REPLACE(eru.id_url, '###ID###', dbr.primary_identifier) AS link_url
              FROM
                sres.dbref dbr
                , DOTS.dbrefnafeature dbrf
                , sres.externaldatabaserelease r
                , sres.externaldatabase d
                , webready.GeneAttributes ga
                , APIDB.EXTERNALRESOURCEURL eru
              WHERE dbr.external_database_release_id = r.external_database_release_id
                and r.external_database_id = d.external_database_id
                and dbr.db_ref_id = dbrf.db_ref_id
                and dbrf.na_feature_id = ga.na_feature_id
                and upper(d.name) = eru.database_name
                and d.name not in ('PUBMED','GeneDB')
            UNION
              SELECT d.name as dataset
                , ta.gene_source_id as source_id
                , ta.project_id
                , dbr.primary_identifier AS ext_id
                , REPLACE(eru.id_url, '###ID###', dbr.primary_identifier) AS link_url
              FROM
                sres.dbref dbr
                , DOTS.dbrefaafeature dbrf
                , Dots.aafeature aaf
                , sres.externaldatabaserelease r
                , sres.externaldatabase d
                , webready.TranscriptAttributes ta
                , APIDB.EXTERNALRESOURCEURL eru
              WHERE dbr.external_database_release_id = r.external_database_release_id
                AND r.external_database_id = d.external_database_id
                AND dbr.db_ref_id = dbrf.db_ref_id
                AND dbrf.aa_feature_id = aaf.aa_feature_id
                AND aaf.aa_sequence_id = ta.aa_sequence_id
                AND upper(d.name) = eru.database_name
                AND eru.database_name  not IN ('InterproscanData_RSRC', 'INTERPRO', 'Prints', 'HAMAP', 'SFLD', 'TIGRFAM', 'SUPERFAMILY', 'Pfam', 'PIRSF', 'PROSITE patterns', 'Superfamily', 'PRINTS', 'InterProScan', 'PFAM', 'SMART', 'CDD', 'PANTHER')
          ) t
          ORDER BY dataset
        ]]>
      </sql>
    </sqlQuery>





    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- protein database links -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!-- TODO -->
    <sqlQuery name="ProteinDatabase"
              isCacheable="false" includeProjects="FungiDB,PlasmoDB,EuPathDB,UniDB">
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="accession"/>
      <column name="gi"/>
      <column name="dataset"/>
      <column name="accession_url"/>
      <column name="gi_url"/>
      <sql>
        <![CDATA[
          SELECT dr.primary_identifier AS accession
            , dr.secondary_identifier AS gi
            , CASE ed.name
                WHEN 'NRDB_gb_dbXRefBySeqIdentity' THEN 'GenBank'
                WHEN 'NRDB_pdb_dbXRefBySeqIdentity' THEN 'Protein Data Bank'
                WHEN 'NRDB_ref_dbXRefBySeqIdentity' THEN 'RefSeq'
                WHEN 'NRDB_sp_dbXRefBySeqIdentity' THEN 'Swiss-Prot'
                ELSE ed.name
              END AS dataset
            , CASE ed.name
                WHEN 'NRDB_gb_dbXRefBySeqIdentity'
                  THEN 'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Protein&cmd=search&term='
                  || dr.primary_identifier
                WHEN 'NRDB_pdb_dbXRefBySeqIdentity'
                  THEN 'http://www.rcsb.org/pdb/navbarsearch.do?newSearch=yes&isAuthorSearch=no&radioset=All&inputQuickSearch='
                         || dr.primary_identifier
                  || '&image.x=0&image.y=0&image=Search'
                WHEN 'NRDB_ref_dbXRefBySeqIdentity'
                  THEN 'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Protein&cmd=search&term='
                  || dr.primary_identifier
                WHEN 'NRDB_sp_dbXRefBySeqIdentity'
                  THEN 'http://www.uniprot.org/uniprot/?query=' || dr.primary_identifier
                ELSE ed.name
              END AS accession_url
            , CASE ed.name
                WHEN 'NRDB_gb_dbXRefBySeqIdentity'
                  THEN 'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                  || dr.secondary_identifier
                WHEN 'NRDB_pdb_dbXRefBySeqIdentity'
                  THEN 'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                  || dr.secondary_identifier
                WHEN 'NRDB_ref_dbXRefBySeqIdentity'
                  THEN 'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                  || dr.secondary_identifier
                WHEN 'NRDB_sp_dbXRefBySeqIdentity'
                  THEN 'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                  || dr.secondary_identifier
                ELSE ed.name
              END AS gi_url
            , ta.source_id
            , ta.gene_source_id
            , ta.project_id
          FROM
            dots.GeneFeature gf
            , dots.DbRefNaFeature drnf
            , sres.DbRef dr
            , sres.ExternalDatabaseRelease edr
            , sres.ExternalDatabase ed
            , webready.TranscriptAttributes ta
          WHERE gf.na_feature_id = drnf.na_feature_id
            AND drnf.db_ref_id = dr.db_ref_id
            AND dr.external_database_release_id = edr.external_database_release_id
            AND edr.external_database_id = ed.external_database_id
            AND ed.name IN ('NRDB_gb_dbXRefBySeqIdentity',
                             /* gets its own section     'NRDB_pdb_dbXRefBySeqIdentity', */
                            'NRDB_ref_dbXRefBySeqIdentity',
                            'NRDB_sp_dbXRefBySeqIdentity')
            AND gf.source_id = ta.gene_source_id
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- SGC 3D structure predictions                                -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!-- TODO:  What is this??
            <sqlQuery name="SGC_3D_Struct" isCacheable="false" includeProjects="CryptoDB">

                <testParamValues>
                   <paramValue name="source_id">cgd3_300</paramValue>
                </testParamValues>

                <column name="source_id"/>
                <column name="gene_source_id"/>
                <column name="project_id"/>
                <column name="pdb_id"/>
                <sql>
                  <![CDATA[
                SELECT dr.primary_identifier AS pdb_id,
                       gf.source_id, '@PROJECT_ID@' AS project_id
                FROM dots.GeneFeature gf,
                     dots.DbRefNaFeature drnf,
                     sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed
                WHERE gf.na_feature_id = drnf.na_feature_id
                AND drnf.db_ref_id = dr.db_ref_id
                AND dr.external_database_release_id = edr.external_database_release_id
                AND edr.external_database_id = ed.external_database_id
                AND ed.name = 'Structural Genomics Consortium 3D Structures'
                ORDER BY dr.primary_identifier
                  ]]>
                </sql>
            </sqlQuery>
    -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- 3D structure predictions -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="3dPreds"
              isCacheable="false" includeProjects="PlasmoDB,EuPathDB,UniDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="search_term"/>
      <column name="pdb_template"/>
      <column name="transcript_ids"/>
      <sql>
        <![CDATA[
	SELECT
	    ta.gene_source_id AS search_term
	    , ta.gene_source_id AS source_id
	    , dr.primary_identifier AS pdb_template
	    , ta.project_id
	    , string_agg(ta.source_id, ', ' ORDER BY ta.source_id) AS transcript_ids
	FROM
	    dots.aafeature aaf
	JOIN dots.DbRefaaFeature drnf ON aaf.aa_feature_id = drnf.aa_feature_id
	JOIN sres.DbRef dr ON drnf.db_ref_id = dr.db_ref_id
	JOIN sres.ExternalDatabaseRelease edr ON dr.external_database_release_id = edr.external_database_release_id
	JOIN sres.ExternalDatabase ed ON edr.external_database_id = ed.external_database_id
	JOIN webready.TranscriptAttributes ta ON aaf.aa_sequence_id = ta.aa_sequence_id
	WHERE
	    ed.name = 'pfal3D7_dbxref_simple_gene2PredictedProteinStructures_RSRC'
	GROUP BY
	    ta.gene_source_id
	    , ta.project_id
	    , dr.primary_identifier
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- PDB similarities -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!-- TODO:  check this one.  Tuning table should be transcript level -->
    <sqlQuery name="PdbSimilarities"
              isCacheable="false">

      <testParamValues includeProjects="AmoebaDB">
        <paramValue name="source_id">EHI_011210</paramValue>
      </testParamValues>
      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="source_id">GL50803_103887</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="transcript_id"/>
      <column name="project_id"/>
      <column name="pdb_chain"/>
      <column name="pdb_id"/>
      <column name="evalue_mant"/>
      <column name="evalue_exp"/>
      <column name="taxon"/>
      <column name="pdb_title"/>
      <column name="pdb_url"/>
      <column name="percent_identity"/>
      <column name="percent_plasmo_coverage"/>
      <sql>
        <![CDATA[
          SELECT ps.pdb_chain, ps.pdb_title, ps.pdb_id, ps.evalue_mant,
                 ps.evalue_exp, ps.taxon, ps.percent_identity,
                 ps.percent_plasmo_coverage,
                 'https://www.rcsb.org/structure/' || ps.pdb_id as pdb_url,
                 ta.source_id as transcript_id,
                 ta.gene_source_id as source_id, ta.project_id
          FROM webready.PdbSimilarity ps, webready.TranscriptAttributes ta
          WHERE ps.source_id = ta.source_id
          ORDER BY ps.taxon, ps.pdb_chain DESC
        ]]>
      </sql>
    </sqlQuery>


    <!--===========================================================================-->
    <!--===========================================================================-->
    <!-- GiardiaDB exclusives  -->
    <!--===========================================================================-->
    <!--===========================================================================-->


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GeneDepreciation - to keep track of gene (un)deprecation -->
    <!--    Temporarily remove because not loaded in rebuild      -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!-- sqlQuery name="GeneDeprecation" includeProjects="GiardiaDB">
     <testParamValues includeProjects="GiardiaDB">
       <paramValue name="source_id">GL50803_10871</paramValue>
       <paramValue name="project_id">GiardiaDB</paramValue>
     </testParamValues>

         <column name="source_id"/>
         <column name="gene_source_id"/>
         <column name="project_id"/>
         <column name="action"/>
         <column name="action_date"/>
         <column name="reason"/>
         <sql>
         SELECT gd.*, '@PROJECT_ID@' as project_id
         FROM apidb.geneDeprecation gd, webready.GeneAttributes ga
         WHERE ga.source_id = gd.source_id
         </sql>
     </sqlQuery-->
    <!--===========================================================================-->


    <sqlQuery name="PubMed">
      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="source_id">PF3D7_0523000</paramValue>
      </testParamValues>
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGME49_220400</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="project_id"/>
      <column name="pubmed_id"/>
      <column name="doi"/>
      <column name="title"/>
      <column name="authors"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT gene_source_id as source_id,  project_id, pubmed_id, doi, title,
             CASE WHEN (length(authors)> 55) THEN substr(authors,1,52)  || '...'
                  ELSE authors
             END authors
          FROM ApidbTuning.GenePubmed
        ]]>
      </sql>
    </sqlQuery>

    <!--===========================================================================-->
    <!--======================Metabolic Pathways - Enzymes Compounds Table=================-->
    <!--===========================================================================-->

    <sqlQuery name="MetabolicPathwayReactions" excludeProjects="EuPathDB">
      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="source_id">PF3D7_1435300</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="project_id"/>
      <column name="pathway_source"/>
      <column name="reaction_source_id"/>
      <column name="reaction_url"/>
      <column name="enzyme"/>
      <column name="expasy_url"/>
      <column name="equation"/>
      <column name="equation_text"/>
      <column name="reversible"/>
      <column name="substrates_text"/>
      <column name="products_text"/>
      <column name="pathways"/>
      <column name="exact_match"/>
      <sql>
        <![CDATA[
          SELECT source_id
          , project_id
          , pathway_source
          , reaction_source_id
          , reaction_url
          , enzyme
          , expasy_url
          , equation
          , equation_text
          , reversible
          , substrates_text
          , products_text
          , count(name) as pathways
          , exact_match
          FROM (
              SELECT DISTINCT tp.gene_source_id AS source_id
              , ga.project_id
              , pa.pathway_source
              , pr.reaction_source_id
              , pr.reaction_url
              , pr.enzyme
              , pr.expasy_url
              , pr.equation_html AS equation
              , pr.equation_text
              , CASE pr.is_reversible WHEN '1' THEN 'Y' WHEN '0' THEN 'N' END as reversible
              , pr.substrates_text
              , pr.products_text
              , pa.name
              , CASE MAX(exact_match) WHEN 1 THEN 'Yes' WHEN 0 THEN 'No' END AS exact_match
              FROM webready.PathwayAttributes pa
              , webready.PathwayCompounds pc
              , webready.PathwayReactions pr
              , webready.TranscriptPathway tp
              , webready.GeneAttributes ga
              WHERE tp.ec_number_pathway = pr.enzyme
                AND tp.wildcard_count_gene <= tp.wildcard_count_pathway
                AND pr.reaction_id = pc.reaction_id
                AND pr.ext_db_name = pc.ext_db_name
                AND pr.ext_db_version = pc.ext_db_version
                AND pc.pathway_id = pa.pathway_id
                AND tp.pathway_id = pa.pathway_id
                AND tp.gene_source_id = ga.source_id
              GROUP BY ga.project_id, tp.gene_source_id, pa.pathway_source, pr.reaction_source_id, pr.reaction_url, pr.enzyme, pr.expasy_url
               , pr.equation_html, pr.equation_text, pr.is_reversible, pr.substrates_text, pr.products_text, pa.name
          ) t
          GROUP BY project_id, source_id, pathway_source, reaction_source_id, reaction_url, enzyme, expasy_url, equation, equation_text
            , reversible, substrates_text, products_text, exact_match
          ORDER BY exact_match desc, pathways desc, reaction_source_id, pathway_source
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="MobileElements" excludeProjects="EuPathDB">
      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="source_id">TVAG_2v0000020</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="project_id"/>
      <column name="mapping_start"/>
      <column name="mapping_end"/>
      <column name="attr"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id
            , ga.project_id
            , gff3.mapping_start
            , gff3.mapping_end
            , gff3.attr
          FROM apidb.Gff3, webready.GeneAttributes ga
          WHERE gff3.na_sequence_id = ga.na_sequence_id
            AND gff3.mapping_start < ga.end_max
            AND gff3.mapping_end > ga.start_min
            AND gff3.sequence_ontology_id IN (
              SELECT ontology_term_id
              FROM sres.OntologyTerm
              WHERE name = 'mobile_genetic_element'
            )
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- MetaTable: for each table defined in this record type, this table lists which organisms it applies to            -->
    <!--  (if 0, it applies to all)                                                                                       -->
    <!-- * in ApidbTuning.DatasetNameTaxon:  TAXON_ID is 0 when a dataset applies to all organisms,                       -->
    <!--   for example: the  DS_4d5814c3f2 enzymes dataset, with corresponding table: EcNumbers, has taxon_id 0           -->
    <!-- * for a given organism, a table may appear in several rows in DatasetModelRef: one row for each relevant dataset -->
    <!--   for example: in Pf3D7, the table "ExpressionGraphs" will be listed for each expression-related dataset         -->
    <!--                                                                                                                  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="MetaTable" isCacheable="false" excludeProjects="EuPathDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="target_name"/>
      <column name="target_type"/>
      <column name="organisms"/>

      <sql>
        <![CDATA[
          SELECT ga.source_id
            , ga.project_id
            , target_name
            , target_type
            --  listagg(ta.name, ', ') within group (order by ta.name) as organisms
            , ta.name AS organisms
          FROM
            (
              SELECT DISTINCT dmr.target_name, dmr.target_type, tn.name
              FROM
                ApidbTuning.DatasetNameTaxon dt
                  INNER JOIN ApidbTuning.DatasetModelRef dmr ON dt.dataset_presenter_id = dmr.dataset_presenter_id
                  LEFT JOIN sres.TaxonName tn ON dt.taxon_id = tn.taxon_id
              WHERE (dmr.target_type = 'table' OR dmr.target_type = 'attribute')
                AND dmr.record_type LIKE 'GeneRecordClasses.GeneRecordClass'
                AND (tn.name_class IS NULL OR tn.name_class = 'scientific name')
            ) ta
            , webready.GeneAttributes ga
            -- GROUP BY ga.source_id, ga.project_id, target_name, target_type
          ORDER BY ga.source_id, target_name
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="ProteinProperties" isCacheable="false" excludeProjects="EuPathDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="lc_project_id"/>
      <column name="transcript_id"/>
      <column name="isoelectric_point"/>
      <column name="molecular_weight"/>
      <column name="has_signalp"/>
      <column name="has_tmhmm"/>
      <column name="protein_length"/>
      <column name="organismAbbrev"/>
      <column name="prot_info"/>
      <sql>
        <![CDATA[
          SELECT
              gene_source_id as source_id
            , ta.source_id AS transcript_id
            , isoelectric_point
            , molecular_weight
            , project_id
            , lower(project_id) as lc_project_id
            , case when signalp_peptide is null then 'no' else 'yes' end as has_signalp
            , case when tm_count > 0 then 'yes' else 'no' end as has_tmhmm
            , protein_length
            , o.public_abbrev as organismAbbrev
            , protein_source_id || '%3A' || '1..' || protein_length as prot_info
          FROM
            webready.TranscriptAttributes ta, apidb.organism o
          WHERE protein_length >0
            AND o.taxon_id = ta.taxon_id
          ORDER BY
            ta.source_id
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="ProteinExpressionPBrowse" isCacheable="false" excludeProjects="EuPathDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="lc_project_id"/>
      <column name="transcript_id"/>
      <column name="protein_gtracks"/>
      <column name="protein_jbrowse_tracks"/>
      <column name="sum_sequence_count"/>
      <column name="unique_sequence_count"/>
      <column name="sum_spectrum_count"/>
      <column name="sample_count"/>
      <column name="organismAbbrev"/>
      <column name="prot_info"/>
      <sql>
        <![CDATA[
          SELECT ta.source_id AS transcript_id
            , ta.gene_source_id AS source_id
            , ta.project_id
            , lower(ta.project_id) AS lc_project_id
            , string_agg(track_names, '%1E' ORDER BY order_num, track_names) AS protein_gtracks
            , string_agg(jbrowse_track_names, '%2C' ORDER BY order_num, jbrowse_track_names) AS protein_jbrowse_tracks
            , mssum.sum_sequence_count
            , mssum.unique_sequence_count
            , mssum.sum_spectrum_count
            , mssum.sample_count
            , o.public_abbrev AS organismAbbrev
            , ta.protein_source_id || '%3A' || '1..' || ta.protein_length AS prot_info
          FROM
            (
              SELECT 'MassSpecPeptides_' || dsp.name AS track_names
                , dsp.name AS jbrowse_track_names
                , ga.source_id
                , '1' AS order_num
              FROM
                apidb.datasource ds
                , apidbtuning.datasetpresenter dsp
                , APIDB.massspecsummary mss
                , SRES.externaldatabase ed
                , sres.externaldatabaserelease edr
                , webready.TranscriptAttributes ga
              WHERE (
                    ds.name LIKE dsp.dataset_name_pattern
                  OR ds.name = dsp.name
                )
                AND ds.name LIKE '%_massSpec_%'
                AND ds.type = 'protein_expression'
                AND mss.external_database_release_id = edr.external_database_release_id
                AND edr.external_database_id = ed.external_database_id
                AND ed.name = ds.name
                AND ga.aa_sequence_id = mss.aa_sequence_id
              UNION
              SELECT 'UnifiedPostTraslationalMod' AS track_names
                , 'UnifiedMassSpecPeptides' AS jbrowse_track_names
                , source_id
                , '2' AS order_num
              FROM
                APIDBTUNING.MSModifiedPeptideSummary
            ) tracks
            , (
                SELECT source_id
                  , COUNT(mps.peptide_sequence) AS sum_sequence_count
                  , COUNT(DISTINCT mps.peptide_sequence) AS unique_sequence_count
                  , SUM(mps.spectrum_count) AS sum_spectrum_count
                  , COUNT(DISTINCT mps.sample) AS sample_count
                FROM
                  apidbtuning.mspeptidesummary mps
                GROUP BY source_id
              ) mssum
            , webready.TranscriptAttributes ta
            , apidb.organism o
          WHERE ta.source_id = tracks.source_id
            AND ta.source_id = mssum.source_id
            AND o.taxon_id = ta.taxon_id
          GROUP BY ta.source_id
            , ta.gene_source_id
            , ta.protein_source_id
            , ta.project_id
            , mssum.sum_sequence_count
            , mssum.unique_sequence_count
            , mssum.sum_spectrum_count
            , mssum.sample_count
            , o.public_abbrev
            , protein_length
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="Taxonomy" isCacheable="false" excludeProjects="EuPathDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="name"/>
      <column name="ncbi_tax_id"/>
      <column name="rank"/>
      <column name="other_names"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id
            , ga.project_id
            , t.name
            , t.ncbi_tax_id
            , t.rank
            , string_agg(tn.name, ',</br>' ORDER BY tn.name DESC) AS other_names
          FROM
            webready.Taxonomy t
              INNER JOIN webready.GeneAttributes ga ON t.organism = ga.organism
              LEFT JOIN (
                SELECT DISTINCT taxon_id, name
                FROM sres.taxonname
                WHERE name_class NOT IN ('scientific name', 'misnomer', 'misspelling')
              ) tn ON t.taxon_id = tn.taxon_id
          GROUP BY ga.source_id, ga.project_id, t.name, t.ncbi_tax_id, t.rank, t.ordernum
          ORDER BY ordernum DESC
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="Sequences" isCacheable="false" excludeProjects="EuPathDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="transcript_id"/>
      <column name="transcript_length"/>
      <column name="protein_length"/>
      <column name="is_pseudo"/>
      <column name="gen_rel_intron_utr_coords"/>
      <column name="five_prime_utr_coords"/>
      <column name="three_prime_utr_coords"/>
      <column name="transcript_sequence"/>
      <column name="protein_sequence"/>
      <column name="prot_seq_warn"/>
      <column name="genomic_sequence"/>
      <column name="genomic_sequence_length"/>
      <column name="transcript_type"/>
      <sql>
        <![CDATA[
          SELECT ta.gene_source_id AS source_id
            , ta.source_id AS transcript_id
            , ta.project_id
            , ta.length AS transcript_length
            , CASE WHEN (ta.transcript_type LIKE 'pseudogen%' OR gene_type LIKE 'pseudogen%'
                          OR ta.so_term_name LIKE 'pseudogen%')
                THEN NULL
                ELSE ta.protein_length
              END AS protein_length
            , ta.is_pseudo
            , CASE WHEN (ta.transcript_type LIKE 'pseudogen%' OR gene_type LIKE 'pseudogen%'
                        OR ta.so_term_name LIKE 'pseudogen%')
                THEN 'pseudogenic_transcript'
                ELSE ta.transcript_type
              END AS transcript_type
            , iuc.gen_rel_intron_utr_coords
            , CASE WHEN ta.five_prime_utr_length > 0
                THEN '[1,' || (ta.five_prime_utr_length) || ']'
                ELSE NULL
              END AS five_prime_utr_coords
            , CASE WHEN ta.three_prime_utr_length > 0
                THEN '[' || (ta.length - ta.three_prime_utr_length + 1) || ',' || ta.length || ']'
                ELSE NULL
              END AS three_prime_utr_coords
            , tx_seq.sequence AS transcript_sequence
            , CASE WHEN (ta.transcript_type LIKE 'pseudogen%' OR ta.gene_type LIKE 'pseudogen%'
                        OR ta.so_term_name LIKE 'pseudogen%')
                THEN NULL
                ELSE ps.sequence
              END AS protein_sequence
            , CASE WHEN ps.sequence like '%*%'
                THEN 'Genes with internal stop codons (*) may not produce functional proteins and may be pseudogenes.'
                ELSE ''
              END AS prot_seq_warn
            , gseq.genomic_sequence
            , gseq.genomic_sequence_length
          FROM
            webready.TranscriptAttributes ta
              INNER JOIN webready.TranscriptSequence tx_seq ON ta.source_id = tx_seq.source_id
              INNER JOIN apidbTuning.TranscriptGenomicSequence gseq ON ta.source_id = gseq.source_id
              LEFT JOIN webready.ProteinSequence ps ON ta.protein_source_id = ps.source_id
              LEFT JOIN apidbTuning.IntronUtrCoords iuc ON ta.na_feature_id = iuc.na_feature_id
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="ExpressionGraphsDataTable" isCacheable="false" excludeProjects="EuPathDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="dataset_id"/>
      <column name="gene"/>
      <!--column name="profile_set_display_name"/-->
      <column name="sample_name"/>
      <column name="value"/>
      <column name="standard_error"/>
      <column name="percentile_channel1"/>
      <column name="percentile_channel2"/>
      <sql>
        <![CDATA[
          SELECT ggp.source_id
            , ggp.profile_graph_id AS gene
            , dp.dataset_presenter_id as dataset_id
            , d.sample_name
            , d.value
            , d.standard_error
            , d.percentile_channel1
            , d.percentile_channel2
            , ga.project_id
          FROM apidbTuning.ExpressionGraphsData d, apidbTuning.DatasetNameTaxon dp,
               apidbTuning.GeneGroupProfile ggp, webready.GeneAttributes ga
          -- customisation for Hehl datasets
          WHERE ((dp.dataset_presenter_id = 'DS_173528b522' AND d.dataset_id IN ('DS_173528b522', 'DS_e7467c0306'))
              OR (dp.dataset_presenter_id != 'DS_173528b522' AND d.dataset_id = dp.dataset_presenter_id))
            AND ggp.source_id = ga.source_id
            AND dp.name = ggp.dataset_name
            AND ggp.profile_graph_id = d.source_id
            AND d.sample_name NOT LIKE '%PaGE'
          ORDER BY ggp.profile_graph_id, d.dataset_id, dp.dataset_presenter_id, d.node_order_num, d.protocol_app_node_id
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="TranscriptionSummary" isCacheable="false" excludeProjects="EuPathDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="display_name"/>
      <sql>
        <![CDATA[
          SELECT DISTINCT
            p.source_id
            , ga.project_id
            , dp.display_name
                || CASE p.profile_set_suffix WHEN NULL THEN '' ELSE ' - ' || p.profile_set_suffix END
                || ', ' || dp.short_attribution
            AS display_name
          FROM
            apidbtuning.profile p
            , apidbtuning.profilesamples ps
            , webready.GeneAttributes ga
            , apidbtuning.datasetmodelref dmr
            , apidbtuning.datasetpresenter dp
          WHERE p.dataset_type = 'transcript_expression'
            AND p.dataset_subtype = 'rnaseq'
            AND p.source_id = ga.source_id
            AND p.profile_set_name = ps.study_name
            AND p.dataset_name = dp.name
            AND dp.DATASET_PRESENTER_ID = dmr.DATASET_PRESENTER_ID
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="PhenotypeGraphsDataTable" isCacheable="false" excludeProjects="EuPathDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="dataset_id"/>
      <!--column name="profile_set_display_name"/-->
      <column name="sample_name"/>
      <column name="value"/>
      <column name="percentile_channel1"/>
      <sql>
        <![CDATA[
          SELECT ggp.source_id
            , ga.project_id
            , dnt.dataset_presenter_id AS dataset_id
            , coalesce(psdi.profile_set_display_name, ps.name) AS profile_set_display_name
            , smpl.protocol_app_node_name || ' ' || smpl.profile_set_suffix AS sample_name
            , round(nfe.value, 2) AS value
            , round(nfe.percentile_channel1, 2) AS percentile_channel1
          FROM
            results.nafeatureexpression nfe
            , webready.GeneAttributes ga
            , study.protocolappnode pan
            , study.studylink sl
            , study.study ps
              LEFT JOIN apidbtuning.profilesetdisplayinfo psdi ON ps.name = psdi.profile_set_name
            , study.study i
            , sres.externaldatabaserelease r
            , sres.externaldatabase d
            , apidbtuning.datasetnametaxon dnt
            , apidbtuning.genegroupprofile ggp
            , apidbtuning.profilesamples smpl
          WHERE ga.na_feature_id = nfe.na_feature_id
            AND ggp.profile_graph_id = ga.source_id
            AND d.name = ggp.dataset_name
            AND nfe.protocol_app_node_id = pan.protocol_app_node_id
            AND pan.protocol_app_node_id = sl.protocol_app_node_id
            AND sl.study_id = ps.study_id
            AND ps.investigation_id = i.study_id
            AND i.external_database_release_id = r.external_database_release_id
            AND r.external_database_id = d.external_database_id
            AND d.name = dnt.name
            AND dnt.dataset_presenter_id = 'DS_98fb258539' -- this is the TriTryp RNA-Seq phenotype dataset id
            AND ps.study_id = smpl.study_id
            AND smpl.protocol_app_node_id = pan.protocol_app_node_id
            AND smpl.profile_type = 'values'
          ORDER BY smpl.node_order_num
        ]]>
      </sql>
    </sqlQuery>



    <sqlQuery name="FacetMetadata" isCacheable="false" >
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="dataset_id"/>
      <column name="property"/>
      <column name="property_id"/>
      <sql>
        <![CDATA[
          SELECT distinct p.source_id
            , ga.project_id
            , dp.dataset_presenter_id as dataset_id
            , mt.property
            , mt.property_source_id as property_id
          FROM apidbtuning.metadata m
            , apidbtuning.PropertyType mt
            , apidbtuning.datasetpresenter dp
            , apidbtuning.profile p
            , webready.GeneAttributes ga
          WHERE m.PROPERTY_ID = mt.PROPERTY_ID
            AND mt.type = 'string'
            AND m.dataset_name like coalesce(dp.dataset_name_pattern, dp.name)
            AND m.dataset_name = p.dataset_name
            AND p.source_id = ga.source_id
          ORDER BY property
	    ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="ContXAxisMetadata" isCacheable="false" >
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="dataset_id"/>
      <column name="property"/>
      <column name="property_id"/>
      <sql>
        <![CDATA[
          SELECT distinct p.source_id
            , ga.project_id
            , dp.dataset_presenter_id as dataset_id
            , mt.property
            , mt.property_source_id as property_id
          FROM apidbtuning.metadata m
            , apidbtuning.PropertyType mt
            , apidbtuning.datasetpresenter dp
            , apidbtuning.profile p
            , webready.GeneAttributes ga
          WHERE m.PROPERTY_ID = mt.PROPERTY_ID
            AND mt.type = 'number'
            AND m.dataset_name like coalesce(dp.dataset_name_pattern, dp.name)
            AND m.dataset_name = p.dataset_name
            AND p.source_id = ga.source_id
          ORDER BY property
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="HostResponseGraphsDataTable" isCacheable="false" includeProjects="PlasmoDB,UniDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="dataset_id"/>
      <column name="profile_set_display_name"/>
      <column name="sample_name"/>
      <column name="value"/>
      <sql>
        <![CDATA[
          SELECT ggp.source_id
            , ga.project_id
            , dnt.dataset_presenter_id AS dataset_id
            , coalesce(psdi.profile_set_display_name, ps.name) AS profile_set_display_name
            , pan.name AS sample_name
            , round(nfe.value, 2) AS value
          FROM
            results.nafeaturehostresponse nfe
            , webready.GeneAttributes ga
            , study.protocolappnode pan
            , study.studylink sl
            , study.study ps
              LEFT JOIN apidbtuning.profilesetdisplayinfo psdi ON ps.name = psdi.profile_set_name
            , study.study i
            , sres.externaldatabaserelease r
            , sres.externaldatabase d
            , apidbtuning.datasetnametaxon dnt
            , apidbtuning.genegroupprofile ggp
          WHERE ga.na_feature_id = nfe.na_feature_id
            AND ggp.profile_graph_id = ga.source_id
            AND d.name = ggp.dataset_name
            AND nfe.protocol_app_node_id = pan.protocol_app_node_id
            AND pan.protocol_app_node_id = sl.protocol_app_node_id
            AND sl.study_id = ps.study_id
            AND ps.investigation_id = i.study_id
            AND i.external_database_release_id = r.external_database_release_id
            AND r.external_database_id = d.external_database_id
            AND d.name = dnt.name
          ORDER BY pan.node_order_num
        ]]>
      </sql>
    </sqlQuery>



          <!-- TODO:  this should be made by some process query? or injection -->
          <sqlQuery name="EdaPhenotypeGraphsDataTable" isCacheable="false" includeProjects="ToxoDB,UniDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <column name="variable"/>
            <column name="value"/>
            <sql>
            <![CDATA[
SELECT ga.source_id, ga.project_id, gd.variable, nvl(gd.string_value, nvl(to_char(round(gd.number_value, 4)), to_char(gd.date_value))) AS value, gd.dataset_id
FROM webready.GeneAttributes ga, (
SELECT genes.string_value AS gene, ag.display_name AS variable, av.string_value, AV.NUMBER_VALUE , av.date_value, 'tgonGT1_crisprPhenotype_CrisprFunctionalProfiling_RSRC' AS dataset_id
FROM eda.ATTRIBUTEvalue_SB044A3A170_GNPD@eda av,
   eda.ATTRIBUTEgraph_SB044A3A170_GNPD@eda ag,
   (SELECT gnpd_stable_id, string_value
    FROM eda.ATTRIBUTEvalue_SB044A3A170_GNPD@eda av
    WHERE attribute_stable_id = 'VAR_bdc8e679') genes
   WHERE av.attribute_stable_id = ag.stable_id
   AND AV.GNPD_STABLE_ID = genes.GNPD_STABLE_ID
   AND AV.ATTRIBUTE_STABLE_ID != 'VAR_bdc8e679'
union
SELECT genes.string_value AS gene, ag.display_name AS variable, av.string_value, AV.NUMBER_VALUE , av.date_value, 'tgonGT1_crisprPhenotype_CrisprScreen_RSRC' AS dataset_id
 FROM eda.ATTRIBUTEvalue_sd4745ea297_GNPD@eda av,
      eda.ATTRIBUTEgraph_sd4745ea297_GNPD@eda ag,
   (SELECT gnpd_stable_id, string_value
    FROM eda.ATTRIBUTEvalue_sd4745ea297_GNPD@eda av
    WHERE attribute_stable_id = 'VAR_bdc8e679') genes
   WHERE av.attribute_stable_id = ag.stable_id
   AND AV.GNPD_STABLE_ID = genes.GNPD_STABLE_ID
   AND AV.ATTRIBUTE_STABLE_ID != 'VAR_bdc8e679'
   ) gd
   WHERE ga.source_id = gd.gene
        ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="PhenotypeScoreGraphsDataTable" isCacheable="false" includeProjects="PlasmoDB,UniDB">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="dataset_id"/>
      <column name="gene"/>
      <column name="profile_set_display_name"/>
      <column name="sample_name"/>
      <column name="phenotype_score"/>
      <column name="score_type"/>
      <sql>
        <![CDATA[
          SELECT ggp.source_id
            , ggp.profile_graph_id AS gene
            , ga.project_id
            , dnt.dataset_presenter_id AS dataset_id
            , coalesce(psdi.profile_set_display_name, ps.name) AS profile_set_display_name
            , pan.name AS sample_name
            , CASE WHEN cp.score_type = 'mutability in CDS'
                   THEN CASE when cp.score = 0 then 'mutable' when cp.score = 1 then 'nonmutable' else 'not_determined' end
                   ELSE cast(round(cp.score, 2) as  VARCHAR(10)) END as phenotype_score
            --, round(cp.score, 2) as phenotype_score
            , cp.score_type
          FROM
            apidb.phenotypescore cp
            , webready.GeneAttributes ga
            , study.protocolappnode pan
            , study.studylink sl
            , study.study ps
              LEFT JOIN apidbtuning.profilesetdisplayinfo psdi ON ps.name = psdi.profile_set_name
            , study.study i
            , sres.externaldatabaserelease r
            , sres.externaldatabase d
            , apidbtuning.datasetnametaxon dnt
            , apidbtuning.profile p
            , apidbtuning.geneGroupProfile ggp
          WHERE ga.na_feature_id = cp.na_feature_id
            AND p.source_id = ga.source_id
            AND d.name = p.dataset_name
            AND cp.protocol_app_node_id = pan.protocol_app_node_id
            AND pan.protocol_app_node_id = sl.protocol_app_node_id
            AND sl.study_id = ps.study_id
            AND ps.investigation_id = i.study_id
            AND i.external_database_release_id = r.external_database_release_id
            AND r.external_database_id = d.external_database_id
            AND d.name = dnt.name
            AND ggp.profile_graph_id = ga.source_id
            AND d.name in ('pfal3D7_phenotype_pB_mutagenesis_MIS_MFS_RSRC',
               'pknoH_phenotype_piggyBac_mutagenesis_HME_MIS_OIS_RSRC',
               'pknoA1H1_phenotype_piggyBac_mutagenesis_MIS_MFS_RSRC')
          UNION
          SELECT ggp.source_id
            , ggp.profile_graph_id AS gene
            , ga.project_id
            , dnt.dataset_presenter_id AS dataset_id
            , coalesce(psdi.profile_set_display_name, ps.name) AS profile_set_display_name
            , pan.name AS sample_name
            , round(cp.relative_growth_rate, 2)::VARCHAR AS phenotype_score
            , 'relative growth rate' AS score_type
          FROM
            apidb.phenotypegrowthrate cp
            , webready.GeneAttributes ga
            , study.protocolappnode pan
            , study.studylink sl
            , study.study ps
              LEFT JOIN apidbtuning.profilesetdisplayinfo psdi ON ps.name = psdi.profile_set_name
            , study.study i
            , sres.externaldatabaserelease r
            , sres.externaldatabase d
            , apidbtuning.datasetnametaxon dnt
            , apidbtuning.profile p
            , apidbtuning.geneGroupProfile ggp
          WHERE ga.na_feature_id = cp.na_feature_id
            AND p.source_id = ga.source_id
            AND d.name = p.dataset_name
            AND cp.protocol_app_node_id = pan.protocol_app_node_id
            AND pan.protocol_app_node_id = sl.protocol_app_node_id
            AND sl.study_id = ps.study_id
            AND ps.investigation_id = i.study_id
            AND i.external_database_release_id = r.external_database_release_id
            AND r.external_database_id = d.external_database_id
            AND d.name = dnt.name
            AND ggp.profile_graph_id = ga.source_id
        ]]>
      </sql>
    </sqlQuery>


          <sqlQuery name="PhenotypeScore" includeProjects="EuPathDB,UniDB,PlasmoDB,FungiDB,TriTrypDB" isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="score"/>
            <column name="score_type"/>
            <column name="name"/>
            <sql>
            <![CDATA[
              SELECT ga.source_id
                   , ga.project_id
                   , ps.score_type
                   , CASE WHEN ps.score_type = 'mutability in CDS'
                          THEN CASE when score = 0 then 'mutable' when score = 1 then 'nonmutable' else 'not_determined' end
                          ELSE cast(ps.score as  VARCHAR(10)) END score
                   , pan.name
              FROM webready.GeneAttributes ga
                 , apidb.phenotypescore ps
                 , study.protocolappnode pan
              WHERE ps.protocol_app_node_id = pan.protocol_app_node_id
              AND ps.na_feature_id = ga.na_feature_id
              ORDER BY pan.name
            ]]>
            </sql>
          </sqlQuery>




    <sqlQuery name="FungiVBOrgLinkoutsTable" includeProjects="FungiDB,VectorBase,UniDB">
      <column name="source_id" />
      <column name="project_id"/>
      <column name="link" />
      <column name="dataset" />
      <sql>
        <![CDATA[
          SELECT '@PROJECT_ID@' AS project_id, source_id, link, dataset
          FROM (
              SELECT
                  ga.source_id,  --from link to self
                '<a href = "' || REPLACE(edr.id_url, 'EXTERNAL_ID_HERE', db.primary_identifier) || '" target="_blank">' || ga.source_id || '</a>' AS link,
                  edd.dataset_presenter_display_name AS dataset
              FROM
                  sres.dbref db
                , DOTS.dbrefnafeature dbna
                , apidbtuning.ExternalDbDatasetPresenter edd
                , sres.externaldatabaserelease edr
                , webready.GeneAttributes ga
              WHERE
                db.external_database_release_id = edd.external_database_release_id
                AND edr.external_database_release_id = edd.external_database_release_id
                AND dbna.db_ref_id = db.db_ref_id
                AND ga.na_feature_id = dbna.na_feature_id
                AND ga.organism IN ('Candida albicans SC5314', 'Saccharomyces cerevisiae S288C','Schizosaccharomyces pombe 972h-')
                AND edd.dataset_presenter_display_name  IN ('SGD','PomBase','CGD')
            UNION
              SELECT -- from orthologs
                og.source_id,
                '<a href = "' || REPLACE(edr.id_url, 'EXTERNAL_ID_HERE', db.primary_identifier) || '" target="_blank">' || og.ortho_gene_source_id || '</a>' AS link,
                  edd.dataset_presenter_display_name AS dataset
              FROM
                  sres.dbref db
                , DOTS.dbrefnafeature dbna
                , apidbtuning.ExternalDbDatasetPresenter edd
                , sres.externaldatabaserelease edr
                , apidbTuning.OrthologousTranscripts og
              WHERE
                db.external_database_release_id = edd.external_database_release_id
                AND edr.external_database_release_id = edd.external_database_release_id
                AND dbna.db_ref_id = db.db_ref_id
                AND og.ortho_na_feature_id = dbna.na_feature_id
                AND og.source_id != og.ortho_gene_source_id
                AND og.ortho_organism in ('Candida albicans SC5314', 'Saccharomyces cerevisiae S288C','Schizosaccharomyces pombe 972h-')
                AND edd.dataset_presenter_display_name  IN ('SGD','PomBase','CGD')
            UNION
              SELECT
                og.ortho_gene_source_id as source_id,
                '<a href="https://flybase.org/reports/' || ref.primary_identifier || '.html" target="_blank">' || og.source_id || '</a>' AS link,
                'FlyBase' AS dataset
              FROM
                  sres.externalDatabaseRelease edr
                , sres.externalDatabase ed
                , sres.dbref ref
                , dots.dbrefNaFeature dbna
                , webready.GeneAttributes ga
                , apidbTuning.OrthologousTranscripts og
              WHERE edr.external_database_id = ed.external_database_id
                AND lower(ed.name) like 'flybase%_gene_id'
                AND ref.external_database_release_id = edr.external_database_release_id
                AND dbna.db_ref_id = ref.db_ref_id
                AND ga.na_feature_id = dbna.na_feature_id
                AND ga.organism IN ('Drosophila melanogaster iso-1')
                AND ga.source_id = og.source_id
          ) t
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="AlphaFoldLinkoutsTable" excludeProjects="EuPathDB">
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="uniprot_id"/>
      <column name="first"/>
      <column name="last"/>
      <column name="prediction_length"/>
      <column name="uniprot_source"/>
      <column name="is_visualization"/>

      <sql>
        <![CDATA[
          SELECT DISTINCT
            ga.project_id
            , ga.source_id
            , af.uniprot_id
            , af.first_residue_index AS first
            , af.last_residue_index AS last
            , (af.last_residue_index - af.first_residue_index + 1) AS prediction_length
            , upg.rank
            , CASE WHEN upg.rank = 1 THEN 'From Annotation'
                   WHEN upg.rank = 2 THEN 'SWISSPROT direct link'
                   WHEN upg.rank = 3 THEN 'TrEMBL direct link'
                   WHEN upg.rank = 4 THEN 'SWISSPROT by sequence similarity'
                   WHEN upg.rank = 5 THEN 'TrEMBL by sequence similarity'
              END AS uniprot_source
            , CASE WHEN afg.uniprot_id IS NULL THEN 'No' ELSE 'Yes' END AS is_visualization
          FROM
            webready.GeneAttributes ga
              INNER JOIN apidbtuning.uniprotgenes upg ON ga.source_id = upg.gene_source_id
              INNER JOIN apidb.alphafold af ON upg.primary_identifier = af.uniprot_id
              LEFT JOIN apidbtuning.alphafoldgenes afg
                ON af.uniprot_id = afg.uniprot_id AND ga.source_id = afg.gene_source_id
          ORDER BY is_visualization DESC, upg.rank, prediction_length DESC
        ]]>
      </sql>
    </sqlQuery>

  </querySet>
</wdkModel>
