<wdkModel>

  <querySet name="CommentTables" queryType="table" isCacheable="false">

    <defaultTestParamValues includeProjects="PlasmoDB">
      <paramValue name="source_id">%%defaultGene%%</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="ToxoDB">
      <paramValue name="source_id">TGME49_221330</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="CryptoDB">
      <paramValue name="source_id">cgd3_1400</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="GiardiaDB">
      <paramValue name="source_id">%%defaultGene%%</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="TrichDB">
      <paramValue name="source_id">%%defaultGene%%</paramValue>
    </defaultTestParamValues>

    <defaultTestParamValues includeProjects="TriTrypDB">
      <paramValue name="source_id">Tb927.8.4640</paramValue>
    </defaultTestParamValues>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- User Comments -->
    <!-- July 2014: edit genecomments SQL so that:   -->
    <!--  ++ a comment in commentstableid table with an old ID appears in the official ID gene page  -->
    <!--  ++ the link (URL) to the comment uses 'stable_id' which needs to be the old ID existing in commentstableid table  -->
    <!--  ++ gene count for related IDs was counting all entries in commentstableid therefore too high in many cases (counting all IDs)  -->
    <!-- -->
    <!-- This might need to be done also in other comment tables (for Toxo and for other record types) if we allow aliases  -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!-- GUS4 TODO: WE MUST UPDATE THE STABLE_ID TO GENE_SOURCE_IDS WHEN RELEASE GUS4 -->
    <sqlQuery name="GeneComments" isCacheable="false">
      <testParamValues minRows="0" includeProjects="MicrosporidiaDB,PiroplasmaDB"/>
      <testParamValues includeProjects="CryptoDB">
        <paramValue name="source_id">cgd5_780</paramValue>
      </testParamValues>
      <testParamValues minRows="0" includeProjects="TrichDB"/>
      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="source_id">GL50803_39483</paramValue>
      </testParamValues>
      <testParamValues includeProjects="TriTrypDB">
        <paramValue name="source_id">Tb927.8.4640</paramValue>
      </testParamValues>
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGME49_102050</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="comment_id"/>
      <column name="pmids"/>
      <column name="pmids_link"/>
      <column name="genecount"/>
      <column name="filecount"/>
      <column name="stable_id"/>
      <column name="headline"/>
      <column name="user_name_org"/>
      <column name="comment_date"/>
      <column name="comment_target_id"/>

      <sqlParamValue name="selectReviewed" includeProjects="FungiDB,PlasmoDB,TriTrypDB">
        <![CDATA[
          case when ags.is_curated_genome = 'false' then 'N/A'
            when integrated_comments.gene_source_id is not null then 'Integrated'
            when reviewed_comments.gene_source_id is not null then 'Reviewed'
            when project_id = 'PlasmoDB' AND c.comment_date < '04-MAR-22' then 'Reviewed'
            else 'Pending'
            end as comment_status,
        ]]>
      </sqlParamValue>
      <sqlParamValue name="selectReviewed" excludeProjects="FungiDB,PlasmoDB,TriTrypDB">
        '' as comment_status,
      </sqlParamValue>

      <sql>
        <![CDATA[
          SELECT c.comment_target_id, c.project_name as project_id, c.comment_id,
            ga.source_id, c.stable_id, c.comment_date, c.headline,
            files.filecount, refs.pmids,
            CASE  WHEN (refs.pmids is null) THEN ''
                  WHEN REGEXP_LIKE(refs.pmids , '^-?[[:digit:],.]*$')
                    THEN '<a href="/cgi-bin/pmid2title?pmids=' || refs.pmids || ' ">' || refs.pmids || '</a>'
                  ELSE '<a href="http://www.ncbi.nlm.nih.gov/pubmed/?term=' || refs.pmids  || ' ">' || refs.pmids || '</a>'
            END AS pmids_link,
            gene_counts.geneCount,
            &&selectReviewed&&
            u.first_name || ' ' || u.last_name || ', ' || u.organization as user_name_org
          FROM
            @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@ c
            INNER JOIN apidbtuning.GeneAttributes ga ON c.project_name = ga.project_id AND c.stable_id = ga.source_id
            INNER JOIN @COMMENT_SCHEMA@comment_users@COMMENT_DBLINK@ u ON c.user_id = u.user_id
            INNER JOIN apidbtuning.annotatedgenomesummary ags ON ga.taxon_id = ags.taxon_id
            LEFT JOIN (
              SELECT comment_id, count(*) as filecount
              FROM @COMMENT_SCHEMA@CommentFile@COMMENT_DBLINK@
              GROUP BY comment_id
            ) files ON c.comment_id = files.comment_id
            LEFT JOIN (
              SELECT comment_id, string_agg(source_id,',') as pmids
              FROM @COMMENT_SCHEMA@CommentReference@COMMENT_DBLINK@
              WHERE database_name='pubmed'
              GROUP BY comment_id
            ) refs ON c.comment_id = refs.comment_id
            LEFT JOIN (
              SELECT comment_id, COUNT(DISTINCT stable_id) AS geneCount
              FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@
              WHERE stable_id IN (SELECT source_id FROM apidbTuning.GeneAttributes)
              GROUP BY comment_id
            ) gene_counts ON c.comment_id = gene_counts.comment_id
            LEFT JOIN (
              SELECT dr.primary_identifier AS comment_id , ta.gene_source_id
              FROM sres.dbref dr
                , dots.DbRefNaFeature drnf
                , apidbtuning.transcriptattributes ta
                , sres.externaldatabase ed
                , sres.externaldatabaserelease edr
              WHERE drnf.db_ref_id = dr.db_ref_id
                AND ta.na_feature_id = drnf.na_feature_id
                AND ed.external_database_id = edr.external_database_id
                AND edr.external_database_release_id = dr.external_database_release_id
                AND ed.name like '%_dbxref_EuPathDB_comment_RSRC'
            ) integrated_comments
                ON c.comment_id::varchar = integrated_comments.comment_id AND c.stable_id = integrated_comments.gene_source_id
            LEFT JOIN (
              SELECT dr.primary_identifier AS comment_id , ta.gene_source_id
              FROM sres.dbref dr
              , dots.DbRefNaFeature drnf
              , apidbtuning.transcriptattributes ta
              , sres.externaldatabase ed
              , sres.externaldatabaserelease edr
              WHERE drnf.db_ref_id = dr.db_ref_id
                AND ta.na_feature_id = drnf.na_feature_id
                AND ed.external_database_id = edr.external_database_id
                AND edr.external_database_release_id = dr.external_database_release_id
                AND ed.name like '%_dbxref_EuPathDB_comment_na_RSRC'
            ) reviewed_comments
                ON c.comment_id::varchar = reviewed_comments.comment_id AND c.stable_id = reviewed_comments.gene_source_id
          WHERE
            c.comment_target_id = 'gene'
            AND c.review_status_id NOT IN ('rejected', 'task')
            -- no need for separate sql for toxo .. just want to exclude expert/community comments here
            AND ((c.project_name = 'GiardiaDB' AND c.review_status_id != 'community') OR c.project_name != 'GiardiaDB')
            AND c.is_visible = 1
          ORDER BY c.comment_id DESC
        ]]>
      </sql>
    </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Community expert comments and annotations                    -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="CommunityComments"
              isCacheable="false">

      <testParamValues minRows="0"
                       includeProjects="TrichDB,PlasmoDB,CryptoDB,TriTrypDB,AmoebaDB,MicrosporidiaDB,PiroplasmaDB"/>
      <testParamValues includeProjects="ToxoDB">
        <paramValue name="source_id">TGME49_048700</paramValue>
      </testParamValues>

      <testParamValues includeProjects="GiardiaDB">
        <paramValue name="source_id">GL50803_4313</paramValue>
      </testParamValues>

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="comment_id"/>
      <column name="pmids"/>
      <column name="genecount"/>
      <column name="filecount"/>
      <column name="stable_id"/>
      <column name="headline"/>
      <column name="user_name_org"/>
      <column name="authors"/>
      <column name="comment_date"/>
      <column name="comment_target_id"/>
      <sql>
        <![CDATA[
          SELECT c.comment_target_id, c.project_name as project_id, c.comment_id,
            c.stable_id, c.stable_id as source_id, c.comment_date, c.headline,
            files.filecount, refs.pmids, gene_counts.geneCount,
            u.first_name || ' ' || u.last_name || ', ' || u.organization as user_name_org,
            authortable.authors
          FROM
            @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@ c
            INNER JOIN @COMMENT_SCHEMA@comment_users@COMMENT_DBLINK@ u c.user_id = u.user_id
            LEFT JOIN (
              SELECT comment_id, count(*) as filecount
              FROM @COMMENT_SCHEMA@CommentFile@COMMENT_DBLINK@
              GROUP BY comment_id
            ) files ON c.comment_id = files.comment_id
            LEFT JOIN (
              SELECT comment_id, string_agg(source_id,',') as pmids
              FROM @COMMENT_SCHEMA@CommentReference@COMMENT_DBLINK@
              WHERE database_name='pubmed'
              GROUP BY comment_id
            ) refs ON c.comment_id = refs.comment_id
            LEFT JOIN (
              SELECT comment_id, string_agg(source_id,',') as authors
              FROM @COMMENT_SCHEMA@CommentReference@COMMENT_DBLINK@
              WHERE database_name='author'
              GROUP BY comment_id
            ) authortable ON c.comment_id = authortable.comment_id
            LEFT JOIN (
              SELECT comment_id, count(stable_id) as geneCount
              FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@
              GROUP BY comment_id
            ) gene_counts c.comment_id = gene_counts.comment_id
          WHERE ('@PROJECT_ID@' = 'UniDB' OR c.project_name = '@PROJECT_ID@')
            AND c.comment_target_id = 'gene'
            AND c.review_status_id != 'rejected'
            AND c.review_status_id = 'community'
            AND c.is_visible = 1
          ORDER BY c.comment_id desc
            ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="PopsetComments"
              isCacheable="false" doNotTest="true">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="comment_id"/>
      <column name="pmids"/>
      <column name="genecount"/>
      <column name="filecount"/>
      <column name="stable_id"/>
      <column name="headline"/>
      <column name="user_name_org"/>
      <column name="comment_date"/>
      <column name="comment_target_id"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id, ga.project_id, apicomm.comment_id,
            apicomm.comment_target_id,
            apicomm.stable_id, apicomm.comment_date, apicomm.geneCount,
            apicomm.filecount, apicomm.pmids, apicomm.headline, apicomm.user_name_org
          FROM ApidbTuning.PopsetAttributes ga,
            (
              SELECT c.comment_target_id, c.project_name as project_id, c.comment_id, c.stable_id, c.comment_date, c.headline,
                files.filecount, refs.pmids, gene_counts.geneCount,
                u.first_name || ' ' || u.last_name || ', ' || u.organization as user_name_org
              FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@ c
                 INNER JOIN @COMMENT_SCHEMA@comment_users@COMMENT_DBLINK@ u ON c.user_id = u.user_id
                 LEFT JOIN (
                   SELECT comment_id, count(*) as filecount
                  FROM @COMMENT_SCHEMA@CommentFile@COMMENT_DBLINK@
                  GROUP BY comment_id
                 ) files ON  c.comment_id = files.comment_id
                 LEFT JOIN (
                   SELECT comment_id, string_agg(source_id,',') as pmids
                   FROM @COMMENT_SCHEMA@CommentReference@COMMENT_DBLINK@
                   WHERE database_name='pubmed'
                   GROUP BY comment_id
                 ) refs ON c.comment_id = refs.comment_id
                 LEFT JOIN (
                   SELECT comment_id, count(stable_id) as geneCount
                   FROM @COMMENT_SCHEMA@mappedComment@COMMENT_DBLINK@
                   GROUP BY comment_id
                 ) gene_counts ON c.comment_id = gene_counts.comment_id
               WHERE ('@PROJECT_ID@' = 'UniDB' OR c.project_name = '@PROJECT_ID@')
                 AND c.comment_target_id = 'isolate'
                 AND c.review_status_id != 'rejected'
                 AND c.review_status_id != 'task'
                 AND c.is_visible = 1
            ) apicomm
          WHERE ga.source_id = apicomm.stable_id
          ORDER BY apicomm.comment_id DESC
        ]]>
      </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Comment category link -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="CommentCategoryLink" excludeProjects="EuPathDB"
              doNotTest="true">

      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="project_id"/>
      <column name="category_link"/>
      <sql>
        <![CDATA[
          SELECT c.stable_id AS source_id, c.project_name as project_id,
                 lower(t.category) || ':' || count(t.category) as category_link
          FROM   @COMMENT_SCHEMA@MappedCcomment@COMMENT_DBLINK@ c,
                 @COMMENT_SCHEMA@TargetCategory@COMMENT_DBLINK@ t,
                 @COMMENT_SCHEMA@CommentTargetCategory@COMMENT_DBLINK@ tc
          WHERE  c.comment_id = tc.comment_id
             AND t.target_category_id = tc.target_category_id
          GROUP BY c.stable_id, t.category
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GenomeComments" excludeProjects="EuPathDB"
              isCacheable="false">

      <testParamValues minRows="0"
                       includeProjects="MicrosporidiaDB,GiardiaDB,TrichDB,ToxoDB,CryptoDB,TriTrypDB,AmoebaDB,PiroplasmaDB"/>
      <testParamValues includeProjects="PlasmoDB">
        <paramValue name="source_id">Pf3D7_09</paramValue>
      </testParamValues>

      <column name="source_id"/>
      <column name="project_id"/>
      <column name="comment_id"/>
      <column name="pmids"/>
      <column name="genecount"/>
      <column name="filecount"/>
      <column name="stable_id"/>
      <column name="headline"/>
      <column name="user_name_org"/>
      <column name="comment_date"/>
      <column name="comment_target_id"/>
      <sql>
        <![CDATA[
          SELECT ga.source_id, apicomm.project_id, apicomm.comment_id,
            apicomm.comment_target_id,
            apicomm.stable_id, apicomm.comment_date, apicomm.geneCount,
            apicomm.filecount, apicomm.pmids, apicomm.headline, apicomm.user_name_org
          FROM dots.NASequence ga,
            (
              SELECT c.comment_target_id, c.project_name as project_id, c.comment_id, c.stable_id, c.comment_date, c.headline,
                files.filecount, refs.pmids, gene_counts.geneCount,
                u.first_name || ' ' || u.last_name || ', ' || u.organization as user_name_org
              FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@ c
                INNER JOIN @COMMENT_SCHEMA@comment_users@COMMENT_DBLINK@ u ON c.user_id = u.user_id
                LEFT JOIN (
                  SELECT comment_id, count(*) as filecount
                  FROM @COMMENT_SCHEMA@CommentFile@COMMENT_DBLINK@
                  GROUP BY comment_id
                ) files ON c.comment_id = files.comment_id
                LEFT JOIN (
                  SELECT comment_id, apidb.tab_to_string(set(cast(collect(source_id) as apidb.varchartab)),',') as pmids
                  FROM @COMMENT_SCHEMA@CommentReference@COMMENT_DBLINK@
                  WHERE database_name='pubmed'
                  GROUP BY comment_id
                ) refs ON c.comment_id = refs.comment_id
                LEFT JOIN (
                  SELECT comment_id, count(stable_id) as geneCount
                  FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@
                  GROUP BY comment_id
                ) gene_counts ON c.comment_id = gene_counts.comment_id
              WHERE ('@PROJECT_ID@' = 'UniDB' OR c.project_name = '@PROJECT_ID@')
                AND c.comment_target_id = 'genome'
                AND c.review_status_id != 'rejected'
                AND c.review_status_id != 'task'
                AND c.is_visible = 1
            ) apicomm
          WHERE ga.source_id = apicomm.stable_id
          ORDER BY apicomm.comment_id DESC
        ]]>
      </sql>
    </sqlQuery>
    <!--
           <sqlQuery name="PhenotypeComments"
                     isCacheable="false">

                <column name="source_id"/>
                <column name="project_id"/>
                <column name="comment_id"/>
                <column name="pmids"/>
                <column name="filecount"/>
                <column name="stable_id"/>
                <column name="headline"/>
                <column name="user_name_org"/>
                <column name="comment_date"/>
                <column name="comment_target_id"/>
                <sql>
                <![CDATA[
                  SELECT ga.source_id, ga.project_id, apicomm.comment_id,
                         apicomm.comment_target_id,
                         apicomm.stable_id, apicomm.comment_date,
                         apicomm.filecount, apicomm.pmids, apicomm.headline, apicomm.user_name_org
                  FROM ApidbTuning.GeneAttributes ga,
                       (SELECT c.comment_target_id, c.project_name as project_id, c.comment_id, c.stable_id,
                               c.comment_date, c.headline,
                               files.filecount, references.pmids,
                               u.first_name || ' ' || u.last_name || ', ' || u.organization as user_name_org
                        FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@ c, @COMMENT_SCHEMA@comment_users@COMMENT_DBLINK@ u,
                             (SELECT comment_id, count(*) as filecount
                              FROM @COMMENT_SCHEMA@CommentFile@COMMENT_DBLINK@
                              GROUP BY comment_id) files,
                             (SELECT comment_id,
                                      apidb.tab_to_string(set(cast(collect(source_id) as apidb.varchartab)),',') as pmids
                              FROM @COMMENT_SCHEMA@CommentReference@COMMENT_DBLINK@
                              WHERE database_name='pubmed'
                              GROUP BY comment_id
                              ) references
                        WHERE c.project_name = '@PROJECT_ID@'
                          AND c.comment_target_id = 'phenotype'
                          AND c.review_status_id != 'rejected'
                          AND c.review_status_id != 'task'
                          AND c.is_visible = 1
                          AND c.user_id = u.user_id
                          AND c.comment_id = files.comment_id(+)
                          AND c.comment_id = references.comment_id(+)
                       ) apicomm
                  WHERE ga.source_id = apicomm.stable_id
                    AND ga.project_id = apicomm.project_id
                  ORDER BY apicomm.comment_id desc
                ]]>
                </sql>
            </sqlQuery>
    -->
  </querySet>
</wdkModel>
