<staticQueries>

  <query name="transcription_summary_profiles">
  <![CDATA[ 
                select distinct p.profile_set_name,
                    replace(dsp.display_name ||
                       CASE p.profile_set_suffix WHEN NULL THEN '' ELSE  p.profile_set_suffix END ||
                        ', ' || dsp.short_attribution, '''', '`') as display_name,
                    dsp.dataset_presenter_id as presenter_id, 
                    ds.order_num
                from apidbTuning.Profile p,
                     apidbTuning.ProfileSamples ps,
                     study.ProtocolAppNode pan,
                     apidbTuning.DatasetPresenter dsp,
                     (select *
                      from apidbTuning.DatasetProperty
                      where property = 'switchStrandsProfiles') dprop,
                     (select '' as dataset_name, 1 as order_num from dual
        -- TEMPLATE_ANCHOR transcriptionSummaryGraph
                     ) ds
                where p.dataset_type = 'transcript_expression' 
                and p.dataset_subtype = 'rnaseq' 
                and p.profile_type = 'values' 
                and p.source_id = '$id'
                and ((dprop.value = 'false'
                      and pan.name like '%firststrand%')
                     or (dprop.value = 'true'
                         and pan.name like '%secondstrand%')
                     or pan.name like '%unstranded%')
                and p.profile_set_name not like '%nonunique%'
                and p.profile_set_name = ps.study_name
                and ps.protocol_app_node_id = pan.protocol_app_node_id
                and p.dataset_name = dsp.name
                and dsp.name = ds.dataset_name
                and dsp.dataset_presenter_id = dprop.dataset_presenter_id
                order by ds.order_num
  ]]>
    </query>

    <query name="profile_set_ids">
    <![CDATA[
      select profile_set_id, name, unit 
      from @VDI_DATASETS_SCHEMA@.ud_profileset
      where user_dataset_id = '$datasetId'
    ]]>
    </query>


    <query name="profile_set_names">
    <![CDATA[
      select DISTINCT pt.profile_set_name || ' [' || pt.node_type || ']' as profile_set_name, 
             profile_type
      from apidbtuning.profiletype pt
        ,  (select distinct sl.node_set_id
            from study.nodeNodeSet sl, apidbtuning.PanResults panr
            where sl.protocol_app_node_id = panr.pan_id
            and panr.result_table =
              'Results::NAFeatureExpression') dr
        , apidbtuning.DatasetNameTaxon dnt
      where dnt.dataset_presenter_id = '$datasetPresenterId'
      and pt.dataset_name = dnt.name
      and pt.profile_study_id = dr.node_set_id
      --and dr.study_id is null
    ]]>
    </query>

    <query name="profile_set_names_by_source_id">
    <![CDATA[
      select DISTINCT pt.profile_set_name || ' [' || pt.node_type || ']' as profile_set_name
           , pt.profile_type
      from apidbtuning.profiletype pt, apidbtuning.profile p
        ,  (select distinct sl.study_id
            from study.studylink sl, apidbtuning.PanResults panr
            where sl.protocol_app_node_id = panr.pan_id
            and panr.result_table =
              'Results::NAFeatureDiffResult') dr
        , apidbtuning.DatasetNameTaxon dnt
      where dnt.dataset_presenter_id = '$datasetPresenterId'
      and pt.dataset_name = dnt.name
      and pt.profile_study_id = dr.study_id (+)
      and dr.study_id is null
      and p.profile_study_id = pt.profile_study_id
      and p.profile_type = pt.profile_type
      and p.source_id = '$sourceId'
    ]]>
    </query>

    <query name="ranked_values">
    <![CDATA[
       select $columnsToReturn, rn as element_order,
              $order as profile_order, '$name' as profile_set
       from (select $columnsInDat, rownum as rn
             from ($sourceIdValueQuery order by value)) t,
            (select max(rownum) as m
             from($sourceIdValueQuery)) ct
       where ('$sourceId' = 'ALL' AND (rn = 1 or rn = ct.m or mod(rn, round(ct.m/$N,0)) = 0)) 
       OR '$sourceId' = source_id
    ]]>
    </query>

    <query name="user_datasets">
    <![CDATA[
      select pan.name, e.value, pan.node_order_num as element_order
           , $order as profile_order, '$name' as profile_set
      from @VDI_DATASETS_SCHEMA@.ud_protocolappnode pan
         , @VDI_DATASETS_SCHEMA@.ud_nafeatureexpression e
         , webready.GeneAttributes ga
      where pan.profile_set_id = '$profileSetId'
      and pan.protocol_app_node_id = e.protocol_app_node_id
      and ga.na_feature_id = e.na_feature_id
      and ga.source_id = '$sourceId'
    ]]>
    </query>

    <query name="profile_set">
    <![CDATA[
       select $colsToReturn
       from (
select pts.name, vals.oneval as value, pts.profile_set_name || ' [' ||  pts.node_type || ']' as profile_set_name, pts.profile_type, pts.node_order_num as element_order
from (select row_number() OVER () as rn, points.* from (
                   SELECT distinct protocol_app_node_name AS name
                        , study_name as profile_set_name
                        , profile_type, node_type 
                        , node_order_num, dataset_name, study_id as profile_study_id
                   FROM  apidbtuning.ProfileSamples
                   WHERE node_type like  'htseq-union%'
                   AND profile_type = 'values'
                   AND study_name = '$profileSetName'
                   ORDER  BY node_order_num) points
                   )pts,
    ( select row_number() OVER () as rn, vs.* from (
                SELECT profile_study_id, dataset_name,  p.profile_set_name, p.profile_type, p.node_type,
                       unnest( STRING_TO_ARRAY(p.profile_AS_STRING, chr(9) ,'')) as oneval
                   FROM apidbtuning.Profile p 
                   where p.profile_type = 'values'
                   AND p.profile_set_name = '$profileSetName'
                   and p.node_type like  'htseq-union%'
                   ) vs
          ) vals
where pts.rn = vals.rn
and pts.dataset_name = vals.dataset_name
and pts.node_type=vals.node_type
and pts.profile_study_id = vals.profile_study_id
) samplenames
    ]]>
    </query>

    <query name="profile_set_by_ec">
    <![CDATA[
      select $order as profile_order, name, value
           , samplenames.profile_set_name, samplenames.profile_type
           , samplenames.element_order
      from (select  rownum as element_order, ps.* 
            FROM (SELECT protocol_app_node_name AS name
                       , '$profileSetName' as profile_set_name, profile_type
                  FROM  apidbtuning.ProfileSamples
                  WHERE  study_name || ' [' || node_type || ']' = '$profileSetName'
                  AND profile_type = '$profileType'
                  ORDER  BY node_order_num) ps) samplenames,
           (select distinct rownum as element_order 
                          , trim(regexp_substr(t.profile_as_string, '[^' || CHR(9) || ']+', 1, levels.column_value))  as value
                          , profile_set_name, profile_type
            from (select p.source_id, ec.ec_number, p.profile_as_string
                      , p.profile_set_name, p.profile_type
                  from apidbtuning.profile p,
                       (SELECT DISTINCT ta.gene_source_id, ec.ec_number
                        FROM dots.aaSequenceEnzymeClass asec
                           , sres.enzymeClass ec
                           , webready.TranscriptAttributes ta
                        WHERE ta.aa_sequence_id = asec.aa_sequence_id
                        AND asec.enzyme_class_id = ec.enzyme_class_id 
                        AND ec.ec_number LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower('$sourceId'),' ',''),'-', '%'),'*','%'),'any','%')) ec
                  WHERE p.profile_set_name = '$profileSetName'
                  AND p.profile_type = '$profileType'
                  AND p.source_id = ec.gene_source_id) t
               , table(cast(multiset(select level from dual connect by  level <= length (regexp_replace(t.profile_as_string, '[^' || CHR(9) || ']+'))  + 1) as sys.OdciNumberList)) levels) samplevalues
      where samplenames.element_order = samplevalues.element_order
      and value is not null
    ]]>
    </query>

    <query name="profile_set_with_metadata">
    <![CDATA[
      select $order as profile_order, name, value
           , samplenames.profile_set_name, samplenames.profile_type
           , samplenames.element_order, samplenames.facet
           , samplenames.contxaxis
      from (select rownum as element_order, ps.NAME, ps.FACET
                 , ps.CONTXAXIS, ps.profile_type, ps.profile_set_name 
            FROM (SELECT distinct s.protocol_app_node_name AS name
                       , s.NODE_ORDER_NUM, m1.string_value as facet
                       , m2.string_value as contXAxis, s.profile_type
                       , s.study_name profile_set_name
                  FROM  apidbtuning.ProfileSamples s
                      , apidbtuning.metadata m1
                      , apidbtuning.metadata m2
                  WHERE  s.study_name = '$profileSetName'
                  AND s.profile_type = '$profileType'
                  and m1.PAN_ID(+) = s.PROTOCOL_APP_NODE_ID
                  and m1.property_source_id(+) = '$facet'
                  and m2.PAN_ID(+) = s.PROTOCOL_APP_NODE_ID
                  and m2.property_source_id(+) = '$xAxis'
                  ORDER  BY s.node_order_num) ps) samplenames,
           (select distinct rownum as element_order 
                          , trim(regexp_substr(t.profile_as_string, '[^' || CHR(9) || ']+', 1, levels.column_value))  as value, profile_set_name, profile_type 
            from (SELECT profile_AS_STRING, profile_set_name
                       , profile_type
                  FROM apidbtuning.Profile p 
                  WHERE p.source_id  = '$sourceId'
                  AND p.profile_set_name = '$profileSetName'
                  AND p.profile_type = '$profileType') t
               , table(cast(multiset(select level from dual connect by  level <= length (regexp_replace(t.profile_as_string, '[^' || CHR(9) || ']+'))  + 1) as sys.OdciNumberList)) levels) samplevalues
      where samplenames.element_order = samplevalues.element_order
      and value is not null
    ]]>
    </query>

    <query name="pathway_genera">
    <![CDATA[
      select case when ec.genus is null then 0 else 1 end as value
           , orgs.o as element_order, orgs.genus as name
      from (select distinct genus
            from apidb.ecnumbergenus
            where ec_number LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower('$sourceId'),' ',''),'-', '%'),'*','%'),'any','%')
            UNION
            select distinct 'Plasmodium' as genus
            from dots.AaSequenceEnzymeClass asec, sres.EnzymeClass ec
            where ec.enzyme_class_id = asec.enzyme_class_id
            and ec.ec_number LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower('$sourceId'),' ',''),'-', '%'),'*','%'),'any','%')) ec,
            ($generaSql) orgs
      where orgs.genus = ec.genus (+)
      order by orgs.o asc
    ]]>
    </query>

    <query name="sense_antisense">
    <![CDATA[
  select sense.CONTXAXIS, antisense.NAME, antisense.VALUE
       , ROW_NUMBER() OVER (order by antisense.NAME) as element_order
  from (select sense_ref.protocol_app_node_name || '->' || sense_comp.protocol_app_node_name as NAME
             , round(log(2,greatest(sense_comp.value,$floor) / greatest(sense_ref.value,$floor)),1) as CONTXAXIS
        from (select ps.node_order_num,ps.protocol_app_node_name,na.value
              from apidbtuning.ProfileSamples ps
                 , results.nafeatureexpression na
                 , webready.GeneAttributes ga
              where ps.study_name in ('$senseProfileSetId')
              and ps.profile_type = 'values'
              and ps.protocol_app_node_id =  na.protocol_app_node_id
              and na.na_feature_id = ga.na_feature_id
              and ga.source_id='$sourceId') sense_comp
           , (select ps.node_order_num, ps.protocol_app_node_name
                   , na.value
              from apidbtuning.ProfileSamples ps
                 , results.nafeatureexpression na
                 , webready.GeneAttributes ga
              where ps.study_name in ('$senseProfileSetId')
              and ps.profile_type = 'values'
              and ps.protocol_app_node_id =  na.protocol_app_node_id
              and na.na_feature_id = ga.na_feature_id
              and ga.source_id='$sourceId') sense_ref
        where sense_comp.protocol_app_node_name != sense_ref.protocol_app_node_name) sense
        , (select antisense_ref.protocol_app_node_name || '->' || antisense_comp.protocol_app_node_name as name
                         , round(log(2,greatest(antisense_comp.value,$floor) / greatest(antisense_ref.value,$floor)),1) as value
                    from (select ps.node_order_num,ps.protocol_app_node_name,na.value
                from apidbtuning.ProfileSamples ps
                    , results.nafeatureexpression na
                    , webready.GeneAttributes ga
            where ps.study_name in ('$antisenseProfileSetId')
                and ps.profile_type = 'values'
                and ps.protocol_app_node_id =  na.protocol_app_node_id
                and na.na_feature_id = ga.na_feature_id
                and ga.source_id='$sourceId') antisense_comp
                       , (select ps.node_order_num,ps.protocol_app_node_name,na.value
                from apidbtuning.ProfileSamples ps
                   , results.nafeatureexpression na
                   , webready.GeneAttributes ga
                where ps.study_name in ('$antisenseProfileSetId')
                    and ps.profile_type = 'values'
                    and ps.protocol_app_node_id =  na.protocol_app_node_id
                    and na.na_feature_id = ga.na_feature_id
                and ga.source_id='$sourceId') antisense_ref
                    where antisense_comp.protocol_app_node_name != antisense_ref.protocol_app_node_name) antisense
        where sense.name = antisense.name 
    ]]>
    </query>

</staticQueries>
