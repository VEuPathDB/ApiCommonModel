<?xml version="1.0" encoding="UTF-8"?>

<!-- These are tuning tables for the portal instance that are aggregations of
     primary (that is, non-tuning) tables in the apidb schema in component instances.
-->

<tuningConfig>


  <tuningTable name="Datasource">
    <externalDependency name="apidb.Datasource" dblink="crypto.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="giardia.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="plasmo.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="toxo.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="tritryp.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="trich.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="amoeba.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="micro.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="piro.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="fungi.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="host.tuning"/>
    <externalDependency name="apidb.Datasource" dblink="vect.tuning"/>

    <unionization>

      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'CryptoDB' end as project_id
                   from apidb.datasource@crypto.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'GiardiaDB' end as project_id
                   from apidb.datasource@giardia.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'PlasmoDB' end as project_id
                   from apidb.datasource@plasmo.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[select name,  version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'ToxoDB' end as project_id
                   from apidb.datasource@toxo.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'TriTrypDB' end as project_id
                   from apidb.datasource@tritryp.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'TrichDB' end as project_id
                   from apidb.datasource@trich.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'AmoebaDB' end as project_id
                   from apidb.datasource@amoeba.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'MicrosporidiaDB' end as project_id
                   from apidb.datasource@micro.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'PiroplasmaDB' end as project_id
                   from apidb.datasource@piro.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'FungiDB' end as project_id
                   from apidb.datasource@fungi.tuning
          ]]>
        </query>
      </source>      
      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'HostDB' end as project_id
                   from apidb.datasource@host.tuning
          ]]>
        </query>
      </source>      
      <source>
        <query>
          <![CDATA[select name, version, is_species_scope, taxon_id, type, subtype, external_database_name,
                   case when taxon_id is null then '' else 'VectorBase' end as project_id
                   from apidb.datasource@vect.tuning
          ]]>
        </query>
      </source>      

    </unionization>

  </tuningTable>


  <tuningTable name="GeneGFF">
    <externalDependency name="apidb.GeneGFF" dblink="giardia.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="plasmo.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="toxo.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="crypto.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="tritryp.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="trich.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="micro.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="amoeba.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="piro.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="fungi.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="host.tuning"/>
    <externalDependency name="apidb.GeneGFF" dblink="vect.tuning"/>
    <intermediateTable name="apidb.GeneGFFGiardia"/>
    <intermediateTable name="apidb.GeneGFFPlasmo"/>
    <intermediateTable name="apidb.GeneGFFToxo"/>
    <intermediateTable name="apidb.GeneGFFCrypto"/>
    <intermediateTable name="apidb.GeneGFFTriTryp"/>
    <intermediateTable name="apidb.GeneGFFTrich"/>
    <intermediateTable name="apidb.GeneGFFPiro"/>
    <intermediateTable name="apidb.GeneGFFFungi"/>
    <intermediateTable name="apidb.GeneGFFVect"/>
    <intermediateTable name="apidb.GeneGFFAmoeba"/>
    <intermediateTable name="apidb.GeneGFFMicro"/>
    <intermediateTable name="apidb.GeneGFFHost"/>

    <sql>
      <![CDATA[
        create table GeneGFFGiardia nologging as
        select SOURCE_ID,PROJECT_ID as PROJECT_ID,TABLE_NAME, ROW_COUNT,
               CONTENT, MODIFICATION_DATE from apidb.GeneGFF@giardia.tuning
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create table GeneGFFPlasmo nologging as
        select SOURCE_ID,PROJECT_id, TABLE_NAME, ROW_COUNT,
               CONTENT, MODIFICATION_DATE from apidb.GeneGFF@plasmo.tuning
       ]]>
    </sql>

    <sql>
      <![CDATA[
        create table GeneGFFToxo nologging as
        select SOURCE_ID, PROJECT_ID, TABLE_NAME, ROW_COUNT,
        CONTENT, MODIFICATION_DATE from apidb.GeneGFF@toxo.tuning
       ]]>
    </sql>

      <sql>
      <![CDATA[
        create table GeneGFFTriTryp nologging as
        select SOURCE_ID,PROJECT_ID, TABLE_NAME, ROW_COUNT,
               CONTENT, MODIFICATION_DATE from apidb.GeneGFF@tritryp.tuning
      ]]>
    </sql>

      <sql>
      <![CDATA[
        create table GeneGFFCrypto nologging as
        select SOURCE_ID, PROJECT_ID, TABLE_NAME, ROW_COUNT,
               CONTENT, MODIFICATION_DATE from apidb.GeneGFF@crypto.tuning
      ]]>
    </sql>

     <sql>
      <![CDATA[
        create table GeneGFFTrich nologging as
        select SOURCE_ID,PROJECT_ID, TABLE_NAME, ROW_COUNT,
               CONTENT, MODIFICATION_DATE from apidb.GeneGFF@trich.tuning where project_id = 'TrichDB'
      ]]>
    </sql>

      <sql>
      <![CDATA[
        create table GeneGFFAmoeba nologging as
        select SOURCE_ID,'EuPathDB' as PROJECT_ID,
               TABLE_NAME, ROW_COUNT,CONTENT, MODIFICATION_DATE from apidb.GeneGFF@amoeba.tuning where project_id = 'AmoebaDB'
      ]]>
    </sql>

      <sql>
      <![CDATA[
        create table GeneGFFMicro nologging as
        select SOURCE_ID,'EuPathDB' as PROJECT_ID,
               TABLE_NAME, ROW_COUNT,CONTENT, MODIFICATION_DATE from apidb.GeneGFF@micro.tuning where project_id = 'MicrosporidiaDB'
      ]]>
    </sql>

     <sql>
      <![CDATA[
        create table GeneGFFPiro nologging as
        select SOURCE_ID,PROJECT_ID, TABLE_NAME, ROW_COUNT,
               CONTENT, MODIFICATION_DATE from apidb.GeneGFF@piro.tuning where project_id = 'PiroDB'
      ]]>
    </sql>
     <sql>
      <![CDATA[
        create table GeneGFFFungi nologging as
        select SOURCE_ID,PROJECT_ID, TABLE_NAME, ROW_COUNT,
               CONTENT, MODIFICATION_DATE from apidb.GeneGFF@fungi.tuning where project_id = 'FungiDB'
      ]]>
    </sql>

     <sql>
      <![CDATA[
        create table GeneGFFVect nologging as
        select SOURCE_ID,PROJECT_ID, TABLE_NAME, ROW_COUNT,
               CONTENT, MODIFICATION_DATE from apidb.GeneGFF@vect.tuning where project_id = 'VectorBase'
      ]]>
    </sql>

     <sql>
      <![CDATA[
        create table GeneGFFHost nologging as
        select SOURCE_ID,PROJECT_ID, TABLE_NAME, ROW_COUNT,
               CONTENT, MODIFICATION_DATE from apidb.GeneGFF@host.tuning where project_id = 'HostDB'
      ]]>
    </sql>

      <sql>
      <![CDATA[
        create table GeneGFF&1 nologging as
        (
        select * from apidb.GeneGFFGiardia
        union all
        select * from apidb.GeneGFFPlasmo
        union all
        select * from apidb.GeneGFFToxo
        union all
        select * from apidb.GeneGFFTriTryp
        union all
        select * from apidb.GeneGFFTrich
        union all
        select * from apidb.GeneGFFCrypto
        union all
        select * from apidb.GeneGFFPiro
        union all
        select * from apidb.GeneGFFFungi
        union all
        select * from apidb.GeneGFFVect
        union all
        select * from apidb.GeneGFFAmoeba
        union all
        select * from apidb.GeneGFFMicro 
        union all
        select * from apidb.GeneGFFHost
        )
      ]]>
    </sql>
  </tuningTable>


  <tuningTable name="OrthomclTaxon">
    <externalDependency name="apidb.orthomcltaxon" dblink="crypto.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="giardia.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="plasmo.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="toxo.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="tritryp.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="trich.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="amoeba.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="micro.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="piro.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="fungi.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="host.tuning"/>
    <externalDependency name="apidb.orthomcltaxon" dblink="vect.tuning"/>

    <perl>
      <![CDATA[ 

#!/usr/bin/perl
use DBI;
use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

# my $hash_ref;
my @abbrevQ;
my $someDblink;
my $queryHandle;
$queryHandle = $dbh->prepare(<<SQL) or die $dbh->errstr;
    select db_link
    from all_db_links
    where db_link like '%.TUNING'
SQL
$queryHandle->execute();

#looping on available component sites
while (my ($dblink) = $queryHandle->fetchrow_array() ) {
    $someDblink = $dblink;
    push(@abbrevQ, "select three_letter_abbrev from apidb.OrthomclTaxon\@" . $dblink);
}

# did we find at least one dblink?
die "didn't find any dblinks named something.TUNING"
  unless $someDblink;

my $sql = "create table OrthomclTaxon&1 "
          . "as select * from apidb.orthomclTaxon\@$someDblink "
          . "where three_letter_abbrev in ("
          . join(" intersect ", @abbrevQ) . ")";
$dbh->do($sql) or die $dbh->errstr;

      ]]> 
    </perl>
  
  </tuningTable>


  <tuningTable name="RflpGenotypeNumber">
    <externalDependency name="apidb.RflpGenotypeNumber" dblink="toxo.tuning"/>

    <sql>
      <![CDATA[
        create table RflpGenotypeNumber&1 nologging as
        select * from apidb.RflpGenotypeNumber@toxo.tuning
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create index rflpgnix&1 on RflpGenotypeNumber&1 (protocol_app_node_id)
      ]]>
    </sql>
  </tuningTable>

  <tuningTable name="FeatureLocation">
    <externalDependency name="apidb.FeatureLocation" dblink="crypto.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="giardia.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="plasmo.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="toxo.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="tritryp.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="trich.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="amoeba.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="micro.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="piro.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="fungi.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="host.tuning"/>
    <externalDependency name="apidb.FeatureLocation" dblink="vect.tuning"/>

    <unionization>

      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@crypto.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@giardia.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@plasmo.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@toxo.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@tritryp.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@trich.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@amoeba.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@micro.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@piro.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@fungi.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>      
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@host.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>      
      <source>
        <query>
          <![CDATA[
            select sequence_source_id, feature_type, is_reversed,
                   feature_source_id, is_top_level, start_min, end_max
            from apidb.FeatureLocation@vect.tuning
            where is_top_level = 1
            --and feature_type in ( 'GeneFeature', 'Transcript')
          ]]>
        </query>
      </source>      

    </unionization>

  </tuningTable>


<!-- NOT READY for bld 67 
  <tuningTable name="FileAttributes">
    <externalDependency name="apidb.FileAttributes" dblink="amoeba.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="crypto.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="fungi.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="giardia.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="host.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="micro.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="piro.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="plasmo.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="toxo.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="tritryp.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="trich.tuning"/>
    <externalDependency name="apidb.FileAttributes" dblink="vect.tuning"/>

    <unionization>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@amoeba.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@crypto.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@fungi.tuning
          ]]>
        </query>
      </source> 
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@giardia.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@host.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@micro.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@piro.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@plasmo.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@toxo.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@tritryp.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@trich.tuning
          ]]>
        </query>
      </source>
      <source>
        <query>
          <![CDATA[
          SELECT file_id, filename, filepath, '' as filelink, organism,
                 build_num, category, file_type, file_format, checksum, filesize,
                 trim(to_char(filesize,'999,999,999,999')) as filesize_text
          FROM   apidb.fileAttributes@vect.tuning
          ]]>
        </query>
      </source>
    </unionization>
  </tuningTable>
-->


</tuningConfig>
